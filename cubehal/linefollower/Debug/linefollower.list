
linefollower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d88  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec0  08006ec0  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08006ec0  08006ec0  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ec0  08006ec0  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08006ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000030  08006ef8  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08006ef8  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d01  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002859  00000000  00000000  00030d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000335b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  000345f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001909f  00000000  00000000  000354f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d26  00000000  00000000  0004e58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000908d0  00000000  00000000  0005f2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efb85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004644  00000000  00000000  000efbd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000030 	.word	0x20000030
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e80 	.word	0x08006e80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000034 	.word	0x20000034
 800014c:	08006e80 	.word	0x08006e80

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_frsub>:
 80005d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005dc:	e002      	b.n	80005e4 <__addsf3>
 80005de:	bf00      	nop

080005e0 <__aeabi_fsub>:
 80005e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005e4 <__addsf3>:
 80005e4:	0042      	lsls	r2, r0, #1
 80005e6:	bf1f      	itttt	ne
 80005e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005ec:	ea92 0f03 	teqne	r2, r3
 80005f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f8:	d06a      	beq.n	80006d0 <__addsf3+0xec>
 80005fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000602:	bfc1      	itttt	gt
 8000604:	18d2      	addgt	r2, r2, r3
 8000606:	4041      	eorgt	r1, r0
 8000608:	4048      	eorgt	r0, r1
 800060a:	4041      	eorgt	r1, r0
 800060c:	bfb8      	it	lt
 800060e:	425b      	neglt	r3, r3
 8000610:	2b19      	cmp	r3, #25
 8000612:	bf88      	it	hi
 8000614:	4770      	bxhi	lr
 8000616:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800062a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800062e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4249      	negne	r1, r1
 8000636:	ea92 0f03 	teq	r2, r3
 800063a:	d03f      	beq.n	80006bc <__addsf3+0xd8>
 800063c:	f1a2 0201 	sub.w	r2, r2, #1
 8000640:	fa41 fc03 	asr.w	ip, r1, r3
 8000644:	eb10 000c 	adds.w	r0, r0, ip
 8000648:	f1c3 0320 	rsb	r3, r3, #32
 800064c:	fa01 f103 	lsl.w	r1, r1, r3
 8000650:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000654:	d502      	bpl.n	800065c <__addsf3+0x78>
 8000656:	4249      	negs	r1, r1
 8000658:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800065c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000660:	d313      	bcc.n	800068a <__addsf3+0xa6>
 8000662:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000666:	d306      	bcc.n	8000676 <__addsf3+0x92>
 8000668:	0840      	lsrs	r0, r0, #1
 800066a:	ea4f 0131 	mov.w	r1, r1, rrx
 800066e:	f102 0201 	add.w	r2, r2, #1
 8000672:	2afe      	cmp	r2, #254	; 0xfe
 8000674:	d251      	bcs.n	800071a <__addsf3+0x136>
 8000676:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800067a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800067e:	bf08      	it	eq
 8000680:	f020 0001 	biceq.w	r0, r0, #1
 8000684:	ea40 0003 	orr.w	r0, r0, r3
 8000688:	4770      	bx	lr
 800068a:	0049      	lsls	r1, r1, #1
 800068c:	eb40 0000 	adc.w	r0, r0, r0
 8000690:	3a01      	subs	r2, #1
 8000692:	bf28      	it	cs
 8000694:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000698:	d2ed      	bcs.n	8000676 <__addsf3+0x92>
 800069a:	fab0 fc80 	clz	ip, r0
 800069e:	f1ac 0c08 	sub.w	ip, ip, #8
 80006a2:	ebb2 020c 	subs.w	r2, r2, ip
 80006a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006aa:	bfaa      	itet	ge
 80006ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006b0:	4252      	neglt	r2, r2
 80006b2:	4318      	orrge	r0, r3
 80006b4:	bfbc      	itt	lt
 80006b6:	40d0      	lsrlt	r0, r2
 80006b8:	4318      	orrlt	r0, r3
 80006ba:	4770      	bx	lr
 80006bc:	f092 0f00 	teq	r2, #0
 80006c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006c4:	bf06      	itte	eq
 80006c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006ca:	3201      	addeq	r2, #1
 80006cc:	3b01      	subne	r3, #1
 80006ce:	e7b5      	b.n	800063c <__addsf3+0x58>
 80006d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d8:	bf18      	it	ne
 80006da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006de:	d021      	beq.n	8000724 <__addsf3+0x140>
 80006e0:	ea92 0f03 	teq	r2, r3
 80006e4:	d004      	beq.n	80006f0 <__addsf3+0x10c>
 80006e6:	f092 0f00 	teq	r2, #0
 80006ea:	bf08      	it	eq
 80006ec:	4608      	moveq	r0, r1
 80006ee:	4770      	bx	lr
 80006f0:	ea90 0f01 	teq	r0, r1
 80006f4:	bf1c      	itt	ne
 80006f6:	2000      	movne	r0, #0
 80006f8:	4770      	bxne	lr
 80006fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006fe:	d104      	bne.n	800070a <__addsf3+0x126>
 8000700:	0040      	lsls	r0, r0, #1
 8000702:	bf28      	it	cs
 8000704:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000708:	4770      	bx	lr
 800070a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800070e:	bf3c      	itt	cc
 8000710:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000714:	4770      	bxcc	lr
 8000716:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800071a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800071e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000722:	4770      	bx	lr
 8000724:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000728:	bf16      	itet	ne
 800072a:	4608      	movne	r0, r1
 800072c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000730:	4601      	movne	r1, r0
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	bf06      	itte	eq
 8000736:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800073a:	ea90 0f01 	teqeq	r0, r1
 800073e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000742:	4770      	bx	lr

08000744 <__aeabi_ui2f>:
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e004      	b.n	8000754 <__aeabi_i2f+0x8>
 800074a:	bf00      	nop

0800074c <__aeabi_i2f>:
 800074c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000750:	bf48      	it	mi
 8000752:	4240      	negmi	r0, r0
 8000754:	ea5f 0c00 	movs.w	ip, r0
 8000758:	bf08      	it	eq
 800075a:	4770      	bxeq	lr
 800075c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000760:	4601      	mov	r1, r0
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	e01c      	b.n	80007a2 <__aeabi_l2f+0x2a>

08000768 <__aeabi_ul2f>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	e00a      	b.n	800078c <__aeabi_l2f+0x14>
 8000776:	bf00      	nop

08000778 <__aeabi_l2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__aeabi_l2f+0x14>
 8000786:	4240      	negs	r0, r0
 8000788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078c:	ea5f 0c01 	movs.w	ip, r1
 8000790:	bf02      	ittt	eq
 8000792:	4684      	moveq	ip, r0
 8000794:	4601      	moveq	r1, r0
 8000796:	2000      	moveq	r0, #0
 8000798:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800079c:	bf08      	it	eq
 800079e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007a6:	fabc f28c 	clz	r2, ip
 80007aa:	3a08      	subs	r2, #8
 80007ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007b0:	db10      	blt.n	80007d4 <__aeabi_l2f+0x5c>
 80007b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007b6:	4463      	add	r3, ip
 80007b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007bc:	f1c2 0220 	rsb	r2, r2, #32
 80007c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007c4:	fa20 f202 	lsr.w	r2, r0, r2
 80007c8:	eb43 0002 	adc.w	r0, r3, r2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f102 0220 	add.w	r2, r2, #32
 80007d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007e4:	fa21 f202 	lsr.w	r2, r1, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_fmul>:
 80007f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007fc:	bf1e      	ittt	ne
 80007fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000802:	ea92 0f0c 	teqne	r2, ip
 8000806:	ea93 0f0c 	teqne	r3, ip
 800080a:	d06f      	beq.n	80008ec <__aeabi_fmul+0xf8>
 800080c:	441a      	add	r2, r3
 800080e:	ea80 0c01 	eor.w	ip, r0, r1
 8000812:	0240      	lsls	r0, r0, #9
 8000814:	bf18      	it	ne
 8000816:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800081a:	d01e      	beq.n	800085a <__aeabi_fmul+0x66>
 800081c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000820:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000824:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000828:	fba0 3101 	umull	r3, r1, r0, r1
 800082c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000830:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000834:	bf3e      	ittt	cc
 8000836:	0049      	lslcc	r1, r1, #1
 8000838:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800083c:	005b      	lslcc	r3, r3, #1
 800083e:	ea40 0001 	orr.w	r0, r0, r1
 8000842:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000846:	2afd      	cmp	r2, #253	; 0xfd
 8000848:	d81d      	bhi.n	8000886 <__aeabi_fmul+0x92>
 800084a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800084e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000852:	bf08      	it	eq
 8000854:	f020 0001 	biceq.w	r0, r0, #1
 8000858:	4770      	bx	lr
 800085a:	f090 0f00 	teq	r0, #0
 800085e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000862:	bf08      	it	eq
 8000864:	0249      	lsleq	r1, r1, #9
 8000866:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800086a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800086e:	3a7f      	subs	r2, #127	; 0x7f
 8000870:	bfc2      	ittt	gt
 8000872:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000876:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800087a:	4770      	bxgt	lr
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	3a01      	subs	r2, #1
 8000886:	dc5d      	bgt.n	8000944 <__aeabi_fmul+0x150>
 8000888:	f112 0f19 	cmn.w	r2, #25
 800088c:	bfdc      	itt	le
 800088e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000892:	4770      	bxle	lr
 8000894:	f1c2 0200 	rsb	r2, r2, #0
 8000898:	0041      	lsls	r1, r0, #1
 800089a:	fa21 f102 	lsr.w	r1, r1, r2
 800089e:	f1c2 0220 	rsb	r2, r2, #32
 80008a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008aa:	f140 0000 	adc.w	r0, r0, #0
 80008ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008b2:	bf08      	it	eq
 80008b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008b8:	4770      	bx	lr
 80008ba:	f092 0f00 	teq	r2, #0
 80008be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008c2:	bf02      	ittt	eq
 80008c4:	0040      	lsleq	r0, r0, #1
 80008c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008ca:	3a01      	subeq	r2, #1
 80008cc:	d0f9      	beq.n	80008c2 <__aeabi_fmul+0xce>
 80008ce:	ea40 000c 	orr.w	r0, r0, ip
 80008d2:	f093 0f00 	teq	r3, #0
 80008d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008da:	bf02      	ittt	eq
 80008dc:	0049      	lsleq	r1, r1, #1
 80008de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008e2:	3b01      	subeq	r3, #1
 80008e4:	d0f9      	beq.n	80008da <__aeabi_fmul+0xe6>
 80008e6:	ea41 010c 	orr.w	r1, r1, ip
 80008ea:	e78f      	b.n	800080c <__aeabi_fmul+0x18>
 80008ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008f0:	ea92 0f0c 	teq	r2, ip
 80008f4:	bf18      	it	ne
 80008f6:	ea93 0f0c 	teqne	r3, ip
 80008fa:	d00a      	beq.n	8000912 <__aeabi_fmul+0x11e>
 80008fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000900:	bf18      	it	ne
 8000902:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000906:	d1d8      	bne.n	80008ba <__aeabi_fmul+0xc6>
 8000908:	ea80 0001 	eor.w	r0, r0, r1
 800090c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000910:	4770      	bx	lr
 8000912:	f090 0f00 	teq	r0, #0
 8000916:	bf17      	itett	ne
 8000918:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800091c:	4608      	moveq	r0, r1
 800091e:	f091 0f00 	teqne	r1, #0
 8000922:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000926:	d014      	beq.n	8000952 <__aeabi_fmul+0x15e>
 8000928:	ea92 0f0c 	teq	r2, ip
 800092c:	d101      	bne.n	8000932 <__aeabi_fmul+0x13e>
 800092e:	0242      	lsls	r2, r0, #9
 8000930:	d10f      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000932:	ea93 0f0c 	teq	r3, ip
 8000936:	d103      	bne.n	8000940 <__aeabi_fmul+0x14c>
 8000938:	024b      	lsls	r3, r1, #9
 800093a:	bf18      	it	ne
 800093c:	4608      	movne	r0, r1
 800093e:	d108      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000940:	ea80 0001 	eor.w	r0, r0, r1
 8000944:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000950:	4770      	bx	lr
 8000952:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000956:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800095a:	4770      	bx	lr

0800095c <__aeabi_fdiv>:
 800095c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000964:	bf1e      	ittt	ne
 8000966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800096a:	ea92 0f0c 	teqne	r2, ip
 800096e:	ea93 0f0c 	teqne	r3, ip
 8000972:	d069      	beq.n	8000a48 <__aeabi_fdiv+0xec>
 8000974:	eba2 0203 	sub.w	r2, r2, r3
 8000978:	ea80 0c01 	eor.w	ip, r0, r1
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000982:	d037      	beq.n	80009f4 <__aeabi_fdiv+0x98>
 8000984:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000988:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800098c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000990:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000994:	428b      	cmp	r3, r1
 8000996:	bf38      	it	cc
 8000998:	005b      	lslcc	r3, r3, #1
 800099a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800099e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009a2:	428b      	cmp	r3, r1
 80009a4:	bf24      	itt	cs
 80009a6:	1a5b      	subcs	r3, r3, r1
 80009a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009b0:	bf24      	itt	cs
 80009b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009be:	bf24      	itt	cs
 80009c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009cc:	bf24      	itt	cs
 80009ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	bf18      	it	ne
 80009da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009de:	d1e0      	bne.n	80009a2 <__aeabi_fdiv+0x46>
 80009e0:	2afd      	cmp	r2, #253	; 0xfd
 80009e2:	f63f af50 	bhi.w	8000886 <__aeabi_fmul+0x92>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fc:	327f      	adds	r2, #127	; 0x7f
 80009fe:	bfc2      	ittt	gt
 8000a00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a08:	4770      	bxgt	lr
 8000a0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	3a01      	subs	r2, #1
 8000a14:	e737      	b.n	8000886 <__aeabi_fmul+0x92>
 8000a16:	f092 0f00 	teq	r2, #0
 8000a1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a1e:	bf02      	ittt	eq
 8000a20:	0040      	lsleq	r0, r0, #1
 8000a22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a26:	3a01      	subeq	r2, #1
 8000a28:	d0f9      	beq.n	8000a1e <__aeabi_fdiv+0xc2>
 8000a2a:	ea40 000c 	orr.w	r0, r0, ip
 8000a2e:	f093 0f00 	teq	r3, #0
 8000a32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a36:	bf02      	ittt	eq
 8000a38:	0049      	lsleq	r1, r1, #1
 8000a3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a3e:	3b01      	subeq	r3, #1
 8000a40:	d0f9      	beq.n	8000a36 <__aeabi_fdiv+0xda>
 8000a42:	ea41 010c 	orr.w	r1, r1, ip
 8000a46:	e795      	b.n	8000974 <__aeabi_fdiv+0x18>
 8000a48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a4c:	ea92 0f0c 	teq	r2, ip
 8000a50:	d108      	bne.n	8000a64 <__aeabi_fdiv+0x108>
 8000a52:	0242      	lsls	r2, r0, #9
 8000a54:	f47f af7d 	bne.w	8000952 <__aeabi_fmul+0x15e>
 8000a58:	ea93 0f0c 	teq	r3, ip
 8000a5c:	f47f af70 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e776      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a64:	ea93 0f0c 	teq	r3, ip
 8000a68:	d104      	bne.n	8000a74 <__aeabi_fdiv+0x118>
 8000a6a:	024b      	lsls	r3, r1, #9
 8000a6c:	f43f af4c 	beq.w	8000908 <__aeabi_fmul+0x114>
 8000a70:	4608      	mov	r0, r1
 8000a72:	e76e      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a78:	bf18      	it	ne
 8000a7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a7e:	d1ca      	bne.n	8000a16 <__aeabi_fdiv+0xba>
 8000a80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a84:	f47f af5c 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a8c:	f47f af3c 	bne.w	8000908 <__aeabi_fmul+0x114>
 8000a90:	e75f      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a92:	bf00      	nop

08000a94 <__gesf2>:
 8000a94:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a98:	e006      	b.n	8000aa8 <__cmpsf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__lesf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	e002      	b.n	8000aa8 <__cmpsf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__cmpsf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ab0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab8:	bf18      	it	ne
 8000aba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abe:	d011      	beq.n	8000ae4 <__cmpsf2+0x40>
 8000ac0:	b001      	add	sp, #4
 8000ac2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ac6:	bf18      	it	ne
 8000ac8:	ea90 0f01 	teqne	r0, r1
 8000acc:	bf58      	it	pl
 8000ace:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ad2:	bf88      	it	hi
 8000ad4:	17c8      	asrhi	r0, r1, #31
 8000ad6:	bf38      	it	cc
 8000ad8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000adc:	bf18      	it	ne
 8000ade:	f040 0001 	orrne.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ae8:	d102      	bne.n	8000af0 <__cmpsf2+0x4c>
 8000aea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000aee:	d105      	bne.n	8000afc <__cmpsf2+0x58>
 8000af0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000af4:	d1e4      	bne.n	8000ac0 <__cmpsf2+0x1c>
 8000af6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000afa:	d0e1      	beq.n	8000ac0 <__cmpsf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cfrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4608      	mov	r0, r1
 8000b08:	4661      	mov	r1, ip
 8000b0a:	e7ff      	b.n	8000b0c <__aeabi_cfcmpeq>

08000b0c <__aeabi_cfcmpeq>:
 8000b0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b0e:	f7ff ffc9 	bl	8000aa4 <__cmpsf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b1c <__aeabi_fcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_fcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_fcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffd2 	bl	8000b04 <__aeabi_cfrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc8 	bl	8000b04 <__aeabi_cfrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_f2iz>:
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b88:	d30f      	bcc.n	8000baa <__aeabi_f2iz+0x2a>
 8000b8a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_f2iz+0x30>
 8000b94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba4:	bf18      	it	ne
 8000ba6:	4240      	negne	r0, r0
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	4770      	bx	lr
 8000bb0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bb4:	d101      	bne.n	8000bba <__aeabi_f2iz+0x3a>
 8000bb6:	0242      	lsls	r2, r0, #9
 8000bb8:	d105      	bne.n	8000bc6 <__aeabi_f2iz+0x46>
 8000bba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000bbe:	bf08      	it	eq
 8000bc0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_f2uiz>:
 8000bcc:	0042      	lsls	r2, r0, #1
 8000bce:	d20e      	bcs.n	8000bee <__aeabi_f2uiz+0x22>
 8000bd0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bd4:	d30b      	bcc.n	8000bee <__aeabi_f2uiz+0x22>
 8000bd6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bda:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bde:	d409      	bmi.n	8000bf4 <__aeabi_f2uiz+0x28>
 8000be0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000be4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be8:	fa23 f002 	lsr.w	r0, r3, r2
 8000bec:	4770      	bx	lr
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	4770      	bx	lr
 8000bf4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bf8:	d101      	bne.n	8000bfe <__aeabi_f2uiz+0x32>
 8000bfa:	0242      	lsls	r2, r0, #9
 8000bfc:	d102      	bne.n	8000c04 <__aeabi_f2uiz+0x38>
 8000bfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <CTRL_Init>:
 */

#include "ctrl.h"

void CTRL_Init(float Kp, float Ki, float Kd, float T, float maxIn, float maxOut, CTRL_t* ctrl)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	603b      	str	r3, [r7, #0]
  ctrl->maxIn = maxIn;
 8000c1a:	6a3b      	ldr	r3, [r7, #32]
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	61da      	str	r2, [r3, #28]
  ctrl->maxOut = maxOut;
 8000c20:	6a3b      	ldr	r3, [r7, #32]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	621a      	str	r2, [r3, #32]

  ctrl->Kp = Kp;
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	601a      	str	r2, [r3, #0]
  ctrl->Ki = Ki;
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	605a      	str	r2, [r3, #4]
  ctrl->Kd = Kd;
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	609a      	str	r2, [r3, #8]
  ctrl->T = T;
 8000c38:	6a3b      	ldr	r3, [r7, #32]
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	60da      	str	r2, [r3, #12]

  CTRL_Calculate(0.0, 0.0, ctrl, true);
 8000c3e:	2301      	movs	r3, #1
 8000c40:	6a3a      	ldr	r2, [r7, #32]
 8000c42:	f04f 0100 	mov.w	r1, #0
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	f000 f804 	bl	8000c56 <CTRL_Calculate>
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <CTRL_Calculate>:

float CTRL_Calculate(float curr, float dest, CTRL_t* ctrl, bool restart)
{
 8000c56:	b5b0      	push	{r4, r5, r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	70fb      	strb	r3, [r7, #3]
  if(restart)
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00b      	beq.n	8000c82 <CTRL_Calculate+0x2c>
  {
    ctrl->error = 0;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f04f 0200 	mov.w	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
    ctrl->lastError = 0;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f04f 0200 	mov.w	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
    ctrl->integral = 0;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f04f 0200 	mov.w	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
  }

  if(dest > ctrl->maxIn)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4619      	mov	r1, r3
 8000c88:	68b8      	ldr	r0, [r7, #8]
 8000c8a:	f7ff ff6f 	bl	8000b6c <__aeabi_fcmpgt>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d003      	beq.n	8000c9c <CTRL_Calculate+0x46>
  {
    dest = ctrl->maxIn;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	e00f      	b.n	8000cbc <CTRL_Calculate+0x66>
  }
  else if(dest < -ctrl->maxIn)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	68b8      	ldr	r0, [r7, #8]
 8000ca8:	f7ff ff42 	bl	8000b30 <__aeabi_fcmplt>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d004      	beq.n	8000cbc <CTRL_Calculate+0x66>
  {
    dest = -ctrl->maxIn;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000cba:	60bb      	str	r3, [r7, #8]
  }

  ctrl->error = dest - curr;
 8000cbc:	68f9      	ldr	r1, [r7, #12]
 8000cbe:	68b8      	ldr	r0, [r7, #8]
 8000cc0:	f7ff fc8e 	bl	80005e0 <__aeabi_fsub>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	611a      	str	r2, [r3, #16]

  if(ctrl->output < ctrl->maxOut && ctrl->output > -ctrl->maxOut)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	f7ff ff2a 	bl	8000b30 <__aeabi_fcmplt>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d018      	beq.n	8000d14 <CTRL_Calculate+0xbe>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a1b      	ldr	r3, [r3, #32]
 8000cea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	f7ff ff3b 	bl	8000b6c <__aeabi_fcmpgt>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00b      	beq.n	8000d14 <CTRL_Calculate+0xbe>
  {
	  ctrl->integral += ctrl->error;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	699a      	ldr	r2, [r3, #24]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4610      	mov	r0, r2
 8000d08:	f7ff fc6c 	bl	80005e4 <__addsf3>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	619a      	str	r2, [r3, #24]
  }
  ctrl->output = ctrl->Kp * ctrl->error + ctrl->Ki * ctrl->integral
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4610      	mov	r0, r2
 8000d20:	f7ff fd68 	bl	80007f4 <__aeabi_fmul>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461c      	mov	r4, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4619      	mov	r1, r3
 8000d32:	4610      	mov	r0, r2
 8000d34:	f7ff fd5e 	bl	80007f4 <__aeabi_fmul>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f7ff fc51 	bl	80005e4 <__addsf3>
 8000d42:	4603      	mov	r3, r0
 8000d44:	461d      	mov	r5, r3
		  + ctrl->Kd * (ctrl->error - ctrl->lastError) / ctrl->T;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689c      	ldr	r4, [r3, #8]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	691a      	ldr	r2, [r3, #16]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4619      	mov	r1, r3
 8000d54:	4610      	mov	r0, r2
 8000d56:	f7ff fc43 	bl	80005e0 <__aeabi_fsub>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4620      	mov	r0, r4
 8000d60:	f7ff fd48 	bl	80007f4 <__aeabi_fmul>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4610      	mov	r0, r2
 8000d70:	f7ff fdf4 	bl	800095c <__aeabi_fdiv>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4619      	mov	r1, r3
 8000d78:	4628      	mov	r0, r5
 8000d7a:	f7ff fc33 	bl	80005e4 <__addsf3>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	461a      	mov	r2, r3
  ctrl->output = ctrl->Kp * ctrl->error + ctrl->Ki * ctrl->integral
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  ctrl->lastError = ctrl->error;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	691a      	ldr	r2, [r3, #16]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	615a      	str	r2, [r3, #20]

  return ctrl->output;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d9c <ISR_ENCODER0>:
void obstacleSequence();
void interruptionSequence();
void checkforOilspill();

void ISR_ENCODER0()
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	ticksLeft++;
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <ISR_ENCODER0+0x18>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	4a03      	ldr	r2, [pc, #12]	; (8000db4 <ISR_ENCODER0+0x18>)
 8000da8:	6013      	str	r3, [r2, #0]
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	2000004c 	.word	0x2000004c

08000db8 <ISR_ENCODER1>:

void ISR_ENCODER1()
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
	ticksRight++;
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <ISR_ENCODER1+0x18>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <ISR_ENCODER1+0x18>)
 8000dc4:	6013      	str	r3, [r2, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000050 	.word	0x20000050

08000dd4 <ISR_DMA>:

void ISR_DMA(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <ISR_CTRL>:

void ISR_CTRL()
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
//	tp2 = !tp2;
//	HAL_GPIO_WritePin(TP2_GPIO_Port, TP2_Pin, tp2);
	followTrack();
 8000de4:	f000 fe3a 	bl	8001a5c <followTrack>
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df2:	f003 f8cb 	bl	8003f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df6:	f000 f929 	bl	800104c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  state = CALIBRATING;
 8000dfa:	4b7d      	ldr	r3, [pc, #500]	; (8000ff0 <main+0x204>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e00:	f000 fc28 	bl	8001654 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e04:	f000 fc08 	bl	8001618 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e08:	f000 f97c 	bl	8001104 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e0c:	f000 fa3c 	bl	8001288 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e10:	f000 fa8a 	bl	8001328 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e14:	f000 fada 	bl	80013cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e18:	f000 fb80 	bl	800151c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000e1c:	f000 fbd2 	bl	80015c4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Powertrain_Init();
 8000e20:	f000 fcdc 	bl	80017dc <Powertrain_Init>

  WEIGHTEDAVG_Init(&filter,
 8000e24:	4b73      	ldr	r3, [pc, #460]	; (8000ff4 <main+0x208>)
 8000e26:	9302      	str	r3, [sp, #8]
 8000e28:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	4b72      	ldr	r3, [pc, #456]	; (8000ff8 <main+0x20c>)
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	4b72      	ldr	r3, [pc, #456]	; (8000ffc <main+0x210>)
 8000e34:	4a72      	ldr	r2, [pc, #456]	; (8001000 <main+0x214>)
 8000e36:	2108      	movs	r1, #8
 8000e38:	4872      	ldr	r0, [pc, #456]	; (8001004 <main+0x218>)
 8000e3a:	f002 fb56 	bl	80034ea <WEIGHTEDAVG_Init>
		  sensorValues,
		  minVals,
		  maxVals,
		  1600,
		  weights);
  WEIGHTEDAVG_Invert(&filter, true);
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4870      	ldr	r0, [pc, #448]	; (8001004 <main+0x218>)
 8000e42:	f002 fb97 	bl	8003574 <WEIGHTEDAVG_Invert>

  HAL_GPIO_WritePin(XS0_GPIO_Port, XS0_Pin, 1);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e4c:	486e      	ldr	r0, [pc, #440]	; (8001008 <main+0x21c>)
 8000e4e:	f004 f9cc 	bl	80051ea <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XS1_GPIO_Port, XS1_Pin, 1);
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e58:	486b      	ldr	r0, [pc, #428]	; (8001008 <main+0x21c>)
 8000e5a:	f004 f9c6 	bl	80051ea <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XS2_GPIO_Port, XS2_Pin, 1);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e64:	4868      	ldr	r0, [pc, #416]	; (8001008 <main+0x21c>)
 8000e66:	f004 f9c0 	bl	80051ea <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XS3_GPIO_Port, XS3_Pin, 1);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e70:	4865      	ldr	r0, [pc, #404]	; (8001008 <main+0x21c>)
 8000e72:	f004 f9ba 	bl	80051ea <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XS4_GPIO_Port, XS4_Pin, 1);
 8000e76:	2201      	movs	r2, #1
 8000e78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e7c:	4863      	ldr	r0, [pc, #396]	; (800100c <main+0x220>)
 8000e7e:	f004 f9b4 	bl	80051ea <HAL_GPIO_WritePin>

  HAL_Delay(100);
 8000e82:	2064      	movs	r0, #100	; 0x64
 8000e84:	f003 f8e4 	bl	8004050 <HAL_Delay>

  QUEUE_Init(&wireRxQueue, (char*)wireRx, 20);
 8000e88:	2214      	movs	r2, #20
 8000e8a:	4961      	ldr	r1, [pc, #388]	; (8001010 <main+0x224>)
 8000e8c:	4861      	ldr	r0, [pc, #388]	; (8001014 <main+0x228>)
 8000e8e:	f001 f84b 	bl	8001f28 <QUEUE_Init>
  QUEUE_Init(&wireTxQueue, (char*)wireTx, 20);
 8000e92:	2214      	movs	r2, #20
 8000e94:	4960      	ldr	r1, [pc, #384]	; (8001018 <main+0x22c>)
 8000e96:	4861      	ldr	r0, [pc, #388]	; (800101c <main+0x230>)
 8000e98:	f001 f846 	bl	8001f28 <QUEUE_Init>
  HAL_ADC_Start_DMA(&hadc1, sensorValues, DMA_MEMDEPTH);
 8000e9c:	2260      	movs	r2, #96	; 0x60
 8000e9e:	4958      	ldr	r1, [pc, #352]	; (8001000 <main+0x214>)
 8000ea0:	485f      	ldr	r0, [pc, #380]	; (8001020 <main+0x234>)
 8000ea2:	f003 f9d1 	bl	8004248 <HAL_ADC_Start_DMA>
  WIRE_Init(&wire,
 8000ea6:	4b5d      	ldr	r3, [pc, #372]	; (800101c <main+0x230>)
 8000ea8:	9303      	str	r3, [sp, #12]
 8000eaa:	4b5a      	ldr	r3, [pc, #360]	; (8001014 <main+0x228>)
 8000eac:	9302      	str	r3, [sp, #8]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	2340      	movs	r3, #64	; 0x40
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	4b5b      	ldr	r3, [pc, #364]	; (8001024 <main+0x238>)
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	495a      	ldr	r1, [pc, #360]	; (8001024 <main+0x238>)
 8000ebc:	485a      	ldr	r0, [pc, #360]	; (8001028 <main+0x23c>)
 8000ebe:	f002 fc89 	bl	80037d4 <WIRE_Init>
		  SDA_GPIO_Port, SDA_Pin,
		  SCL_GPIO_Port, SCL_Pin,
		  0,
		  &wireRxQueue, &wireTxQueue);
  WIRE_Begin(&wire);
 8000ec2:	4859      	ldr	r0, [pc, #356]	; (8001028 <main+0x23c>)
 8000ec4:	f002 fe1a 	bl	8003afc <WIRE_Begin>

  CTRL_Init(KP_LINE,
 8000ec8:	4b58      	ldr	r3, [pc, #352]	; (800102c <main+0x240>)
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	4b58      	ldr	r3, [pc, #352]	; (8001030 <main+0x244>)
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	4b57      	ldr	r3, [pc, #348]	; (8001030 <main+0x244>)
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ed8:	4a56      	ldr	r2, [pc, #344]	; (8001034 <main+0x248>)
 8000eda:	f04f 0100 	mov.w	r1, #0
 8000ede:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
 8000ee2:	f7ff fe93 	bl	8000c0c <CTRL_Init>
		  KI_LINE,
		  KD_LINE,
		  T_LINE,
		  100.0, 100.0, &ctrl);

  CTRL_Init(KP_DIFF,
 8000ee6:	4b54      	ldr	r3, [pc, #336]	; (8001038 <main+0x24c>)
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	4b51      	ldr	r3, [pc, #324]	; (8001030 <main+0x244>)
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	4b50      	ldr	r3, [pc, #320]	; (8001030 <main+0x244>)
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	f04f 0100 	mov.w	r1, #0
 8000efe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000f02:	f7ff fe83 	bl	8000c0c <CTRL_Init>
		  KI_DIFF,
		  KD_DIFF,
		  T_DIFF,
		  100.0, 100.0, &dTicks);

  calibrateFiler();
 8000f06:	f000 fd23 	bl	8001950 <calibrateFiler>

  VL53_SetTimeout(&s2, 500);
 8000f0a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f0e:	484b      	ldr	r0, [pc, #300]	; (800103c <main+0x250>)
 8000f10:	f002 f9b7 	bl	8003282 <VL53_SetTimeout>
  success = VL53_Init(&s2, &wire, 0x29, XS2_GPIO_Port, XS2_Pin);
 8000f14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <main+0x21c>)
 8000f1c:	2229      	movs	r2, #41	; 0x29
 8000f1e:	4942      	ldr	r1, [pc, #264]	; (8001028 <main+0x23c>)
 8000f20:	4846      	ldr	r0, [pc, #280]	; (800103c <main+0x250>)
 8000f22:	f001 fee2 	bl	8002cea <VL53_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b45      	ldr	r3, [pc, #276]	; (8001040 <main+0x254>)
 8000f2c:	701a      	strb	r2, [r3, #0]
  VL53_SetMeasurementTimingBudget(&s2, 20000);
 8000f2e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000f32:	4842      	ldr	r0, [pc, #264]	; (800103c <main+0x250>)
 8000f34:	f002 f9e8 	bl	8003308 <VL53_SetMeasurementTimingBudget>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i = 0; i < 2; i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	e01a      	b.n	8000f74 <main+0x188>
	  {
		  if(!VL53_TimeoutOccured(&s2))
 8000f3e:	483f      	ldr	r0, [pc, #252]	; (800103c <main+0x250>)
 8000f40:	f002 fa74 	bl	800342c <VL53_TimeoutOccured>
 8000f44:	4603      	mov	r3, r0
 8000f46:	f083 0301 	eor.w	r3, r3, #1
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d009      	beq.n	8000f64 <main+0x178>
		  {
			  dists[i] = VL53_ReadRangeSingle_mm(&s2);
 8000f50:	483a      	ldr	r0, [pc, #232]	; (800103c <main+0x250>)
 8000f52:	f002 fa7b 	bl	800344c <VL53_ReadRangeSingle_mm>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4a3a      	ldr	r2, [pc, #232]	; (8001044 <main+0x258>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f62:	e004      	b.n	8000f6e <main+0x182>
		  }
		  else
		  {
			  dists[i] = OBSTACLE_MINDIST_MM + 5;
 8000f64:	4a37      	ldr	r2, [pc, #220]	; (8001044 <main+0x258>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2182      	movs	r1, #130	; 0x82
 8000f6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i = 0; i < 2; i++)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3301      	adds	r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	dde1      	ble.n	8000f3e <main+0x152>
		  }
	  }

	  if(dists[0] <= OBSTACLE_MINDIST_MM && dists[1] <= OBSTACLE_MINDIST_MM)
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <main+0x258>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	2b7d      	cmp	r3, #125	; 0x7d
 8000f80:	d815      	bhi.n	8000fae <main+0x1c2>
 8000f82:	4b30      	ldr	r3, [pc, #192]	; (8001044 <main+0x258>)
 8000f84:	885b      	ldrh	r3, [r3, #2]
 8000f86:	2b7d      	cmp	r3, #125	; 0x7d
 8000f88:	d811      	bhi.n	8000fae <main+0x1c2>
	  {
		  state = OBSTACLE;
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <main+0x204>)
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f96:	481d      	ldr	r0, [pc, #116]	; (800100c <main+0x220>)
 8000f98:	f004 f927 	bl	80051ea <HAL_GPIO_WritePin>
		  obstacleSequence();
 8000f9c:	f000 feb6 	bl	8001d0c <obstacleSequence>
		  state = DRIVING;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <main+0x204>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(100);
 8000fa6:	2064      	movs	r0, #100	; 0x64
 8000fa8:	f003 f852 	bl	8004050 <HAL_Delay>
 8000fac:	e00c      	b.n	8000fc8 <main+0x1dc>
	  }
	  else if(INTERRUPTIONINI != state)
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <main+0x204>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d008      	beq.n	8000fc8 <main+0x1dc>
	  {
		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbc:	4813      	ldr	r0, [pc, #76]	; (800100c <main+0x220>)
 8000fbe:	f004 f914 	bl	80051ea <HAL_GPIO_WritePin>
		  state = DRIVING;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <main+0x204>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
	  }

	  if(INTERRUPTIONINI == state)
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <main+0x204>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d1b3      	bne.n	8000f38 <main+0x14c>
	  {
		  state = INTERRUPTION;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <main+0x204>)
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	701a      	strb	r2, [r3, #0]
//		  HAL_Delay(200);
		  if(!isLine)
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <main+0x25c>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	f083 0301 	eor.w	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <main+0x1fc>
		  {
			  interruptionSequence();
 8000fe4:	f000 fef0 	bl	8001dc8 <interruptionSequence>
//			  Powertrain_SetDutycycles(stop, stop);
//			  HAL_Delay(100);
//			  obstacleSequence();
		  }
		  state = DRIVING;
 8000fe8:	4b01      	ldr	r3, [pc, #4]	; (8000ff0 <main+0x204>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < 2; i++)
 8000fee:	e7a3      	b.n	8000f38 <main+0x14c>
 8000ff0:	200001a8 	.word	0x200001a8
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	200004f0 	.word	0x200004f0
 8000ffc:	20000414 	.word	0x20000414
 8001000:	2000024c 	.word	0x2000024c
 8001004:	200001dc 	.word	0x200001dc
 8001008:	40010800 	.word	0x40010800
 800100c:	40011000 	.word	0x40011000
 8001010:	200004dc 	.word	0x200004dc
 8001014:	20000510 	.word	0x20000510
 8001018:	2000014c 	.word	0x2000014c
 800101c:	20000064 	.word	0x20000064
 8001020:	200001ac 	.word	0x200001ac
 8001024:	40010c00 	.word	0x40010c00
 8001028:	20000450 	.word	0x20000450
 800102c:	20000124 	.word	0x20000124
 8001030:	42c80000 	.word	0x42c80000
 8001034:	43700000 	.word	0x43700000
 8001038:	200004b4 	.word	0x200004b4
 800103c:	20000434 	.word	0x20000434
 8001040:	20000060 	.word	0x20000060
 8001044:	20000204 	.word	0x20000204
 8001048:	20000054 	.word	0x20000054

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b094      	sub	sp, #80	; 0x50
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001056:	2228      	movs	r2, #40	; 0x28
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f005 ff08 	bl	8006e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800107c:	2301      	movs	r3, #1
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108a:	2301      	movs	r3, #1
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108e:	2302      	movs	r3, #2
 8001090:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001096:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001098:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800109c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a2:	4618      	mov	r0, r3
 80010a4:	f004 f8dc 	bl	8005260 <HAL_RCC_OscConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010ae:	f000 ff35 	bl	8001f1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b2:	230f      	movs	r3, #15
 80010b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2102      	movs	r1, #2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f004 fb46 	bl	8005760 <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80010da:	f000 ff1f 	bl	8001f1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010de:	2302      	movs	r3, #2
 80010e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80010e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 fcd2 	bl	8005a94 <HAL_RCCEx_PeriphCLKConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010f6:	f000 ff11 	bl	8001f1c <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3750      	adds	r7, #80	; 0x50
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001126:	4b55      	ldr	r3, [pc, #340]	; (800127c <MX_ADC1_Init+0x178>)
 8001128:	4a55      	ldr	r2, [pc, #340]	; (8001280 <MX_ADC1_Init+0x17c>)
 800112a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800112c:	4b53      	ldr	r3, [pc, #332]	; (800127c <MX_ADC1_Init+0x178>)
 800112e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001132:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001134:	4b51      	ldr	r3, [pc, #324]	; (800127c <MX_ADC1_Init+0x178>)
 8001136:	2201      	movs	r2, #1
 8001138:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800113a:	4b50      	ldr	r3, [pc, #320]	; (800127c <MX_ADC1_Init+0x178>)
 800113c:	2200      	movs	r2, #0
 800113e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001140:	4b4e      	ldr	r3, [pc, #312]	; (800127c <MX_ADC1_Init+0x178>)
 8001142:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001146:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001148:	4b4c      	ldr	r3, [pc, #304]	; (800127c <MX_ADC1_Init+0x178>)
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 800114e:	4b4b      	ldr	r3, [pc, #300]	; (800127c <MX_ADC1_Init+0x178>)
 8001150:	2208      	movs	r2, #8
 8001152:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001154:	4849      	ldr	r0, [pc, #292]	; (800127c <MX_ADC1_Init+0x178>)
 8001156:	f002 ff9f 	bl	8004098 <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8001160:	f000 fedc 	bl	8001f1c <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001164:	4b47      	ldr	r3, [pc, #284]	; (8001284 <MX_ADC1_Init+0x180>)
 8001166:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4619      	mov	r1, r3
 800117e:	483f      	ldr	r0, [pc, #252]	; (800127c <MX_ADC1_Init+0x178>)
 8001180:	f003 fa54 	bl	800462c <HAL_ADC_AnalogWDGConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800118a:	f000 fec7 	bl	8001f1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001192:	2301      	movs	r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4619      	mov	r1, r3
 800119e:	4837      	ldr	r0, [pc, #220]	; (800127c <MX_ADC1_Init+0x178>)
 80011a0:	f003 f94c 	bl	800443c <HAL_ADC_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80011aa:	f000 feb7 	bl	8001f1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4619      	mov	r1, r3
 80011ba:	4830      	ldr	r0, [pc, #192]	; (800127c <MX_ADC1_Init+0x178>)
 80011bc:	f003 f93e 	bl	800443c <HAL_ADC_ConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80011c6:	f000 fea9 	bl	8001f1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011ce:	2303      	movs	r3, #3
 80011d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4829      	ldr	r0, [pc, #164]	; (800127c <MX_ADC1_Init+0x178>)
 80011d8:	f003 f930 	bl	800443c <HAL_ADC_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80011e2:	f000 fe9b 	bl	8001f1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011e6:	2303      	movs	r3, #3
 80011e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80011ea:	2304      	movs	r3, #4
 80011ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4822      	ldr	r0, [pc, #136]	; (800127c <MX_ADC1_Init+0x178>)
 80011f4:	f003 f922 	bl	800443c <HAL_ADC_ConfigChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80011fe:	f000 fe8d 	bl	8001f1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001202:	2304      	movs	r3, #4
 8001204:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001206:	2305      	movs	r3, #5
 8001208:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	481b      	ldr	r0, [pc, #108]	; (800127c <MX_ADC1_Init+0x178>)
 8001210:	f003 f914 	bl	800443c <HAL_ADC_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800121a:	f000 fe7f 	bl	8001f1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800121e:	2305      	movs	r3, #5
 8001220:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001222:	2306      	movs	r3, #6
 8001224:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	4814      	ldr	r0, [pc, #80]	; (800127c <MX_ADC1_Init+0x178>)
 800122c:	f003 f906 	bl	800443c <HAL_ADC_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001236:	f000 fe71 	bl	8001f1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800123a:	2306      	movs	r3, #6
 800123c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800123e:	2307      	movs	r3, #7
 8001240:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4619      	mov	r1, r3
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_ADC1_Init+0x178>)
 8001248:	f003 f8f8 	bl	800443c <HAL_ADC_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001252:	f000 fe63 	bl	8001f1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001256:	2307      	movs	r3, #7
 8001258:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800125a:	2308      	movs	r3, #8
 800125c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <MX_ADC1_Init+0x178>)
 8001264:	f003 f8ea 	bl	800443c <HAL_ADC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800126e:	f000 fe55 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200001ac 	.word	0x200001ac
 8001280:	40012400 	.word	0x40012400
 8001284:	00800200 	.word	0x00800200

08001288 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <MX_TIM1_Init+0x98>)
 80012a6:	4a1f      	ldr	r2, [pc, #124]	; (8001324 <MX_TIM1_Init+0x9c>)
 80012a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <MX_TIM1_Init+0x98>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_TIM1_Init+0x98>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <MX_TIM1_Init+0x98>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <MX_TIM1_Init+0x98>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <MX_TIM1_Init+0x98>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_TIM1_Init+0x98>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ce:	4814      	ldr	r0, [pc, #80]	; (8001320 <MX_TIM1_Init+0x98>)
 80012d0:	f004 fc96 	bl	8005c00 <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80012da:	f000 fe1f 	bl	8001f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4619      	mov	r1, r3
 80012ea:	480d      	ldr	r0, [pc, #52]	; (8001320 <MX_TIM1_Init+0x98>)
 80012ec:	f004 ffea 	bl	80062c4 <HAL_TIM_ConfigClockSource>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80012f6:	f000 fe11 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_TIM1_Init+0x98>)
 8001308:	f005 fc42 	bl	8006b90 <HAL_TIMEx_MasterConfigSynchronization>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001312:	f000 fe03 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200003cc 	.word	0x200003cc
 8001324:	40012c00 	.word	0x40012c00

08001328 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <MX_TIM2_Init+0xa0>)
 8001346:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800134a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7250;
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <MX_TIM2_Init+0xa0>)
 800134e:	f641 4252 	movw	r2, #7250	; 0x1c52
 8001352:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <MX_TIM2_Init+0xa0>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <MX_TIM2_Init+0xa0>)
 800135c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001360:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <MX_TIM2_Init+0xa0>)
 8001364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001368:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_TIM2_Init+0xa0>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001370:	4815      	ldr	r0, [pc, #84]	; (80013c8 <MX_TIM2_Init+0xa0>)
 8001372:	f004 fc45 	bl	8005c00 <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800137c:	f000 fdce 	bl	8001f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	4619      	mov	r1, r3
 800138c:	480e      	ldr	r0, [pc, #56]	; (80013c8 <MX_TIM2_Init+0xa0>)
 800138e:	f004 ff99 	bl	80062c4 <HAL_TIM_ConfigClockSource>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001398:	f000 fdc0 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4807      	ldr	r0, [pc, #28]	; (80013c8 <MX_TIM2_Init+0xa0>)
 80013aa:	f005 fbf1 	bl	8006b90 <HAL_TIMEx_MasterConfigSynchronization>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80013b4:	f000 fdb2 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <MX_TIM2_Init+0xa0>)
 80013ba:	f004 fc71 	bl	8005ca0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000046c 	.word	0x2000046c

080013cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08e      	sub	sp, #56	; 0x38
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	f107 0320 	add.w	r3, r7, #32
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	615a      	str	r2, [r3, #20]
 80013fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013fc:	4b45      	ldr	r3, [pc, #276]	; (8001514 <MX_TIM3_Init+0x148>)
 80013fe:	4a46      	ldr	r2, [pc, #280]	; (8001518 <MX_TIM3_Init+0x14c>)
 8001400:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0x1;
 8001402:	4b44      	ldr	r3, [pc, #272]	; (8001514 <MX_TIM3_Init+0x148>)
 8001404:	2201      	movs	r2, #1
 8001406:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b42      	ldr	r3, [pc, #264]	; (8001514 <MX_TIM3_Init+0x148>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800140e:	4b41      	ldr	r3, [pc, #260]	; (8001514 <MX_TIM3_Init+0x148>)
 8001410:	f242 7210 	movw	r2, #10000	; 0x2710
 8001414:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001416:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <MX_TIM3_Init+0x148>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <MX_TIM3_Init+0x148>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001422:	483c      	ldr	r0, [pc, #240]	; (8001514 <MX_TIM3_Init+0x148>)
 8001424:	f004 fbec 	bl	8005c00 <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800142e:	f000 fd75 	bl	8001f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143c:	4619      	mov	r1, r3
 800143e:	4835      	ldr	r0, [pc, #212]	; (8001514 <MX_TIM3_Init+0x148>)
 8001440:	f004 ff40 	bl	80062c4 <HAL_TIM_ConfigClockSource>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800144a:	f000 fd67 	bl	8001f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800144e:	4831      	ldr	r0, [pc, #196]	; (8001514 <MX_TIM3_Init+0x148>)
 8001450:	f004 fc78 	bl	8005d44 <HAL_TIM_PWM_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800145a:	f000 fd5f 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	4619      	mov	r1, r3
 800146c:	4829      	ldr	r0, [pc, #164]	; (8001514 <MX_TIM3_Init+0x148>)
 800146e:	f005 fb8f 	bl	8006b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001478:	f000 fd50 	bl	8001f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147c:	2360      	movs	r3, #96	; 0x60
 800147e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	4619      	mov	r1, r3
 8001492:	4820      	ldr	r0, [pc, #128]	; (8001514 <MX_TIM3_Init+0x148>)
 8001494:	f004 fe58 	bl	8006148 <HAL_TIM_PWM_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800149e:	f000 fd3d 	bl	8001f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2204      	movs	r2, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	481a      	ldr	r0, [pc, #104]	; (8001514 <MX_TIM3_Init+0x148>)
 80014aa:	f004 fe4d 	bl	8006148 <HAL_TIM_PWM_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014b4:	f000 fd32 	bl	8001f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2208      	movs	r2, #8
 80014bc:	4619      	mov	r1, r3
 80014be:	4815      	ldr	r0, [pc, #84]	; (8001514 <MX_TIM3_Init+0x148>)
 80014c0:	f004 fe42 	bl	8006148 <HAL_TIM_PWM_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80014ca:	f000 fd27 	bl	8001f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	220c      	movs	r2, #12
 80014d2:	4619      	mov	r1, r3
 80014d4:	480f      	ldr	r0, [pc, #60]	; (8001514 <MX_TIM3_Init+0x148>)
 80014d6:	f004 fe37 	bl	8006148 <HAL_TIM_PWM_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80014e0:	f000 fd1c 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014e4:	2100      	movs	r1, #0
 80014e6:	480b      	ldr	r0, [pc, #44]	; (8001514 <MX_TIM3_Init+0x148>)
 80014e8:	f004 fc84 	bl	8005df4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014ec:	2104      	movs	r1, #4
 80014ee:	4809      	ldr	r0, [pc, #36]	; (8001514 <MX_TIM3_Init+0x148>)
 80014f0:	f004 fc80 	bl	8005df4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80014f4:	2108      	movs	r1, #8
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <MX_TIM3_Init+0x148>)
 80014f8:	f004 fc7c 	bl	8005df4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80014fc:	210c      	movs	r1, #12
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_TIM3_Init+0x148>)
 8001500:	f004 fc78 	bl	8005df4 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <MX_TIM3_Init+0x148>)
 8001506:	f000 fe9f 	bl	8002248 <HAL_TIM_MspPostInit>

}
 800150a:	bf00      	nop
 800150c:	3738      	adds	r7, #56	; 0x38
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000160 	.word	0x20000160
 8001518:	40000400 	.word	0x40000400

0800151c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <MX_TIM4_Init+0xa0>)
 800153c:	4a20      	ldr	r2, [pc, #128]	; (80015c0 <MX_TIM4_Init+0xa4>)
 800153e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <MX_TIM4_Init+0xa0>)
 8001542:	220a      	movs	r2, #10
 8001544:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <MX_TIM4_Init+0xa0>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3500;
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_TIM4_Init+0xa0>)
 800154e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001552:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <MX_TIM4_Init+0xa0>)
 8001556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800155a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <MX_TIM4_Init+0xa0>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001562:	4816      	ldr	r0, [pc, #88]	; (80015bc <MX_TIM4_Init+0xa0>)
 8001564:	f004 fb4c 	bl	8005c00 <HAL_TIM_Base_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800156e:	f000 fcd5 	bl	8001f1c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	4619      	mov	r1, r3
 8001580:	480e      	ldr	r0, [pc, #56]	; (80015bc <MX_TIM4_Init+0xa0>)
 8001582:	f004 ff63 	bl	800644c <HAL_TIM_SlaveConfigSynchro>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800158c:	f000 fcc6 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	4619      	mov	r1, r3
 800159c:	4807      	ldr	r0, [pc, #28]	; (80015bc <MX_TIM4_Init+0xa0>)
 800159e:	f005 faf7 	bl	8006b90 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80015a8:	f000 fcb8 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80015ac:	4803      	ldr	r0, [pc, #12]	; (80015bc <MX_TIM4_Init+0xa0>)
 80015ae:	f004 fb77 	bl	8005ca0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	3720      	adds	r7, #32
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000098 	.word	0x20000098
 80015c0:	40000800 	.word	0x40000800

080015c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_USART3_UART_Init+0x4c>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	; (8001614 <MX_USART3_UART_Init+0x50>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <MX_USART3_UART_Init+0x4c>)
 80015d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_USART3_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_USART3_UART_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <MX_USART3_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_USART3_UART_Init+0x4c>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <MX_USART3_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_USART3_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_USART3_UART_Init+0x4c>)
 80015fc:	f005 fb38 	bl	8006c70 <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001606:	f000 fc89 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200000e0 	.word	0x200000e0
 8001614:	40004800 	.word	0x40004800

08001618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_DMA_Init+0x38>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <MX_DMA_Init+0x38>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6153      	str	r3, [r2, #20]
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_DMA_Init+0x38>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	200b      	movs	r0, #11
 800163c:	f003 fa15 	bl	8004a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001640:	200b      	movs	r0, #11
 8001642:	f003 fa2e 	bl	8004aa2 <HAL_NVIC_EnableIRQ>

}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	f107 0310 	add.w	r3, r7, #16
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001668:	4b57      	ldr	r3, [pc, #348]	; (80017c8 <MX_GPIO_Init+0x174>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a56      	ldr	r2, [pc, #344]	; (80017c8 <MX_GPIO_Init+0x174>)
 800166e:	f043 0310 	orr.w	r3, r3, #16
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b54      	ldr	r3, [pc, #336]	; (80017c8 <MX_GPIO_Init+0x174>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001680:	4b51      	ldr	r3, [pc, #324]	; (80017c8 <MX_GPIO_Init+0x174>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a50      	ldr	r2, [pc, #320]	; (80017c8 <MX_GPIO_Init+0x174>)
 8001686:	f043 0320 	orr.w	r3, r3, #32
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b4e      	ldr	r3, [pc, #312]	; (80017c8 <MX_GPIO_Init+0x174>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0320 	and.w	r3, r3, #32
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b4b      	ldr	r3, [pc, #300]	; (80017c8 <MX_GPIO_Init+0x174>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a4a      	ldr	r2, [pc, #296]	; (80017c8 <MX_GPIO_Init+0x174>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b48      	ldr	r3, [pc, #288]	; (80017c8 <MX_GPIO_Init+0x174>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <MX_GPIO_Init+0x174>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a44      	ldr	r2, [pc, #272]	; (80017c8 <MX_GPIO_Init+0x174>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b42      	ldr	r3, [pc, #264]	; (80017c8 <MX_GPIO_Init+0x174>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|XS4_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80016ce:	483f      	ldr	r0, [pc, #252]	; (80017cc <MX_GPIO_Init+0x178>)
 80016d0:	f003 fd8b 	bl	80051ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, XS0_Pin|XS1_Pin|XS2_Pin|XS3_Pin
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 80016da:	483d      	ldr	r0, [pc, #244]	; (80017d0 <MX_GPIO_Init+0x17c>)
 80016dc:	f003 fd85 	bl	80051ea <HAL_GPIO_WritePin>
                          |TP1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP2_Pin|SCL_Pin|nSLEEP_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80016e6:	483b      	ldr	r0, [pc, #236]	; (80017d4 <MX_GPIO_Init+0x180>)
 80016e8:	f003 fd7f 	bl	80051ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin XS4_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|XS4_Pin;
 80016ec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fe:	f107 0310 	add.w	r3, r7, #16
 8001702:	4619      	mov	r1, r3
 8001704:	4831      	ldr	r0, [pc, #196]	; (80017cc <MX_GPIO_Init+0x178>)
 8001706:	f003 fbd5 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin SDA_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|SDA_Pin|nFAULT_Pin;
 800170a:	f44f 534a 	mov.w	r3, #12928	; 0x3280
 800170e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	482d      	ldr	r0, [pc, #180]	; (80017d4 <MX_GPIO_Init+0x180>)
 8001720:	f003 fbc8 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC0_Pin ENC1_Pin */
  GPIO_InitStruct.Pin = ENC0_Pin|ENC1_Pin;
 8001724:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800172a:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <MX_GPIO_Init+0x184>)
 800172c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800172e:	2301      	movs	r3, #1
 8001730:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	4619      	mov	r1, r3
 8001738:	4826      	ldr	r0, [pc, #152]	; (80017d4 <MX_GPIO_Init+0x180>)
 800173a:	f003 fbbb 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : S8_Pin */
  GPIO_InitStruct.Pin = S8_Pin;
 800173e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001748:	2301      	movs	r3, #1
 800174a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S8_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4619      	mov	r1, r3
 8001752:	481f      	ldr	r0, [pc, #124]	; (80017d0 <MX_GPIO_Init+0x17c>)
 8001754:	f003 fbae 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : XS0_Pin XS1_Pin XS2_Pin XS3_Pin
                           TP1_Pin */
  GPIO_InitStruct.Pin = XS0_Pin|XS1_Pin|XS2_Pin|XS3_Pin
 8001758:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 800175c:	613b      	str	r3, [r7, #16]
                          |TP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2302      	movs	r3, #2
 8001768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	4619      	mov	r1, r3
 8001770:	4817      	ldr	r0, [pc, #92]	; (80017d0 <MX_GPIO_Init+0x17c>)
 8001772:	f003 fb9f 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP2_Pin nSLEEP_Pin */
  GPIO_InitStruct.Pin = TP2_Pin|nSLEEP_Pin;
 8001776:	f44f 7384 	mov.w	r3, #264	; 0x108
 800177a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2302      	movs	r3, #2
 8001786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	4619      	mov	r1, r3
 800178e:	4811      	ldr	r0, [pc, #68]	; (80017d4 <MX_GPIO_Init+0x180>)
 8001790:	f003 fb90 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCL_Pin */
  GPIO_InitStruct.Pin = SCL_Pin;
 8001794:	2340      	movs	r3, #64	; 0x40
 8001796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001798:	2311      	movs	r3, #17
 800179a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2302      	movs	r3, #2
 80017a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	480a      	ldr	r0, [pc, #40]	; (80017d4 <MX_GPIO_Init+0x180>)
 80017ac:	f003 fb82 	bl	8004eb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	2028      	movs	r0, #40	; 0x28
 80017b6:	f003 f958 	bl	8004a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017ba:	2028      	movs	r0, #40	; 0x28
 80017bc:	f003 f971 	bl	8004aa2 <HAL_NVIC_EnableIRQ>

}
 80017c0:	bf00      	nop
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40011000 	.word	0x40011000
 80017d0:	40010800 	.word	0x40010800
 80017d4:	40010c00 	.word	0x40010c00
 80017d8:	10110000 	.word	0x10110000

080017dc <Powertrain_Init>:

/* USER CODE BEGIN 4 */
void Powertrain_Init()
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	Powertrain_EnableMotors(1);
 80017e0:	2001      	movs	r0, #1
 80017e2:	f000 f807 	bl	80017f4 <Powertrain_EnableMotors>
	Powertrain_SetDutycycles(0, 0);
 80017e6:	2100      	movs	r1, #0
 80017e8:	2000      	movs	r0, #0
 80017ea:	f000 f815 	bl	8001818 <Powertrain_SetDutycycles>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <Powertrain_EnableMotors>:


void Powertrain_EnableMotors(int enableState)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nSLEEP_GPIO_Port, nSLEEP_Pin, enableState);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001806:	4803      	ldr	r0, [pc, #12]	; (8001814 <Powertrain_EnableMotors+0x20>)
 8001808:	f003 fcef 	bl	80051ea <HAL_GPIO_WritePin>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40010c00 	.word	0x40010c00

08001818 <Powertrain_SetDutycycles>:

void Powertrain_SetDutycycles(int left, int right)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
	static int lastLeft = 0;
	static int lastRight = 0;

	if(left > 100)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b64      	cmp	r3, #100	; 0x64
 8001826:	dd01      	ble.n	800182c <Powertrain_SetDutycycles+0x14>
	{
		left = 100;
 8001828:	2364      	movs	r3, #100	; 0x64
 800182a:	607b      	str	r3, [r7, #4]
	}
	if(left < -100 && left != stop)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001832:	da07      	bge.n	8001844 <Powertrain_SetDutycycles+0x2c>
 8001834:	4b41      	ldr	r3, [pc, #260]	; (800193c <Powertrain_SetDutycycles+0x124>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d002      	beq.n	8001844 <Powertrain_SetDutycycles+0x2c>
	{
		left = -100;
 800183e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001842:	607b      	str	r3, [r7, #4]
	}

	if(right > 100)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2b64      	cmp	r3, #100	; 0x64
 8001848:	dd01      	ble.n	800184e <Powertrain_SetDutycycles+0x36>
	{
		right = 100;
 800184a:	2364      	movs	r3, #100	; 0x64
 800184c:	603b      	str	r3, [r7, #0]
	}
	if(right < -100 && right != stop)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001854:	da07      	bge.n	8001866 <Powertrain_SetDutycycles+0x4e>
 8001856:	4b39      	ldr	r3, [pc, #228]	; (800193c <Powertrain_SetDutycycles+0x124>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d002      	beq.n	8001866 <Powertrain_SetDutycycles+0x4e>
	{
		right = -100;
 8001860:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001864:	603b      	str	r3, [r7, #0]
	}

	left *= 100;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2264      	movs	r2, #100	; 0x64
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	607b      	str	r3, [r7, #4]
	right *= 100;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2264      	movs	r2, #100	; 0x64
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	603b      	str	r3, [r7, #0]

	if(left != lastLeft)
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <Powertrain_SetDutycycles+0x128>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	d028      	beq.n	80018d6 <Powertrain_SetDutycycles+0xbe>
	{
		if(left < 0)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	da1a      	bge.n	80018c0 <Powertrain_SetDutycycles+0xa8>
		{
			if(left < -100*100)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a2d      	ldr	r2, [pc, #180]	; (8001944 <Powertrain_SetDutycycles+0x12c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	da0a      	bge.n	80018a8 <Powertrain_SetDutycycles+0x90>
			{
				htim3.Instance->CCR1 = 100*100;
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <Powertrain_SetDutycycles+0x130>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f242 7210 	movw	r2, #10000	; 0x2710
 800189a:	635a      	str	r2, [r3, #52]	; 0x34
				htim3.Instance->CCR3 = 100*100;
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <Powertrain_SetDutycycles+0x130>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80018a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80018a6:	e013      	b.n	80018d0 <Powertrain_SetDutycycles+0xb8>
			}
			else
			{
				left = -left;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	425b      	negs	r3, r3
 80018ac:	607b      	str	r3, [r7, #4]
				htim3.Instance->CCR1 = left;
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <Powertrain_SetDutycycles+0x130>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34
				htim3.Instance->CCR3 = 0;
 80018b6:	4b24      	ldr	r3, [pc, #144]	; (8001948 <Powertrain_SetDutycycles+0x130>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80018be:	e007      	b.n	80018d0 <Powertrain_SetDutycycles+0xb8>
			}
		}
		else
		{
			htim3.Instance->CCR1 = 0;
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <Powertrain_SetDutycycles+0x130>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR3 = left;
 80018c8:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <Powertrain_SetDutycycles+0x130>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		lastLeft = left;
 80018d0:	4a1b      	ldr	r2, [pc, #108]	; (8001940 <Powertrain_SetDutycycles+0x128>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
	}

	if(right != lastRight)
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <Powertrain_SetDutycycles+0x134>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d028      	beq.n	8001932 <Powertrain_SetDutycycles+0x11a>
	{
		if(right < 0)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	da1a      	bge.n	800191c <Powertrain_SetDutycycles+0x104>
		{
			if(right < -100*100)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	4a16      	ldr	r2, [pc, #88]	; (8001944 <Powertrain_SetDutycycles+0x12c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	da0a      	bge.n	8001904 <Powertrain_SetDutycycles+0xec>
			{
				htim3.Instance->CCR2 = 100*100;
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <Powertrain_SetDutycycles+0x130>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38
				htim3.Instance->CCR4 = 100*100;
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <Powertrain_SetDutycycles+0x130>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
 8001902:	e013      	b.n	800192c <Powertrain_SetDutycycles+0x114>
			}
			else
			{
				right = -right;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	425b      	negs	r3, r3
 8001908:	603b      	str	r3, [r7, #0]
				htim3.Instance->CCR2 = right;
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <Powertrain_SetDutycycles+0x130>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	639a      	str	r2, [r3, #56]	; 0x38
				htim3.Instance->CCR4 = 0;
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <Powertrain_SetDutycycles+0x130>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2200      	movs	r2, #0
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
 800191a:	e007      	b.n	800192c <Powertrain_SetDutycycles+0x114>
			}
		}
		else
		{
			htim3.Instance->CCR2 = 0;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <Powertrain_SetDutycycles+0x130>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2200      	movs	r2, #0
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR4 = right;
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <Powertrain_SetDutycycles+0x130>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		lastRight = right;
 800192c:	4a07      	ldr	r2, [pc, #28]	; (800194c <Powertrain_SetDutycycles+0x134>)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	6013      	str	r3, [r2, #0]
	}
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	20000020 	.word	0x20000020
 8001940:	20000058 	.word	0x20000058
 8001944:	ffffd8f0 	.word	0xffffd8f0
 8001948:	20000160 	.word	0x20000160
 800194c:	2000005c 	.word	0x2000005c

08001950 <calibrateFiler>:
		htim3.Instance->CCR4 = 100*100;
	}
}

void calibrateFiler()
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
	state = CALIBRATING;
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <calibrateFiler+0x78>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin))
 800195c:	e008      	b.n	8001970 <calibrateFiler+0x20>
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800195e:	2201      	movs	r2, #1
 8001960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001964:	4819      	ldr	r0, [pc, #100]	; (80019cc <calibrateFiler+0x7c>)
 8001966:	f003 fc40 	bl	80051ea <HAL_GPIO_WritePin>
		WEIGHTEDAVG_Calibrate(&filter);
 800196a:	4819      	ldr	r0, [pc, #100]	; (80019d0 <calibrateFiler+0x80>)
 800196c:	f001 fe1e 	bl	80035ac <WEIGHTEDAVG_Calibrate>
	while(HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin))
 8001970:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001974:	4817      	ldr	r0, [pc, #92]	; (80019d4 <calibrateFiler+0x84>)
 8001976:	f003 fc21 	bl	80051bc <HAL_GPIO_ReadPin>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1ee      	bne.n	800195e <calibrateFiler+0xe>
	}
	for(int i = 0; i < 8; i++)
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	e010      	b.n	80019a8 <calibrateFiler+0x58>
	{
		threshVals[i] = (minVals[i] + maxVals[i]) / 2;
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <calibrateFiler+0x88>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800198e:	4913      	ldr	r1, [pc, #76]	; (80019dc <calibrateFiler+0x8c>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001996:	4413      	add	r3, r2
 8001998:	085a      	lsrs	r2, r3, #1
 800199a:	4911      	ldr	r1, [pc, #68]	; (80019e0 <calibrateFiler+0x90>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 8; i++)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3301      	adds	r3, #1
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b07      	cmp	r3, #7
 80019ac:	ddeb      	ble.n	8001986 <calibrateFiler+0x36>
	}
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <calibrateFiler+0x7c>)
 80019b6:	f003 fc18 	bl	80051ea <HAL_GPIO_WritePin>
	state = DRIVING;
 80019ba:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <calibrateFiler+0x78>)
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200001a8 	.word	0x200001a8
 80019cc:	40011000 	.word	0x40011000
 80019d0:	200001dc 	.word	0x200001dc
 80019d4:	40010c00 	.word	0x40010c00
 80019d8:	20000414 	.word	0x20000414
 80019dc:	200004f0 	.word	0x200004f0
 80019e0:	20000078 	.word	0x20000078

080019e4 <validate>:

bool validate()
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
	uint32_t min = 0xffffffff;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ee:	60fb      	str	r3, [r7, #12]
	int minPos = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]

	for(int i = 0; i < 8; i++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	e010      	b.n	8001a1c <validate+0x38>
	{
		if(sensorValues[i] < min)
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <validate+0x6c>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d906      	bls.n	8001a16 <validate+0x32>
		{
			minPos = i;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	60bb      	str	r3, [r7, #8]
			min = sensorValues[i];
 8001a0c:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <validate+0x6c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 8; i++)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b07      	cmp	r3, #7
 8001a20:	ddeb      	ble.n	80019fa <validate+0x16>
		}
	}

	if((min <= threshVals[minPos] && minPos < 5) || isOilspill)
 8001a22:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <validate+0x70>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d802      	bhi.n	8001a36 <validate+0x52>
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	dd03      	ble.n	8001a3e <validate+0x5a>
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <validate+0x74>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <validate+0x5e>
	{
		return true;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <validate+0x60>
	}
	else
	{
		return false;
 8001a42:	2300      	movs	r3, #0
	}
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	2000024c 	.word	0x2000024c
 8001a54:	20000078 	.word	0x20000078
 8001a58:	20000055 	.word	0x20000055

08001a5c <followTrack>:

void followTrack()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TP1_GPIO_Port, TP1_Pin, 1);
 8001a62:	2201      	movs	r2, #1
 8001a64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a68:	484b      	ldr	r0, [pc, #300]	; (8001b98 <followTrack+0x13c>)
 8001a6a:	f003 fbbe 	bl	80051ea <HAL_GPIO_WritePin>

	if(CALIBRATING == state)
 8001a6e:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <followTrack+0x140>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 808c 	beq.w	8001b90 <followTrack+0x134>
	{
		return;
	}
	  for(int i = 0; i < DMA_MEMDEPTH; i += 8)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e00d      	b.n	8001a9a <followTrack+0x3e>
	  {
		  WEIGHTEDAVG_SetData(&filter, &sensorValues[i]);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4a47      	ldr	r2, [pc, #284]	; (8001ba0 <followTrack+0x144>)
 8001a84:	4413      	add	r3, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	4846      	ldr	r0, [pc, #280]	; (8001ba4 <followTrack+0x148>)
 8001a8a:	f001 fd82 	bl	8003592 <WEIGHTEDAVG_SetData>
		  WEIGHTEDAVG_AddSamples(&filter);
 8001a8e:	4845      	ldr	r0, [pc, #276]	; (8001ba4 <followTrack+0x148>)
 8001a90:	f001 fdcb 	bl	800362a <WEIGHTEDAVG_AddSamples>
	  for(int i = 0; i < DMA_MEMDEPTH; i += 8)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3308      	adds	r3, #8
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b5f      	cmp	r3, #95	; 0x5f
 8001a9e:	ddee      	ble.n	8001a7e <followTrack+0x22>
	  }
	  pos = WEIGHTEDAVG_Process(&filter);
 8001aa0:	4840      	ldr	r0, [pc, #256]	; (8001ba4 <followTrack+0x148>)
 8001aa2:	f001 fe7a 	bl	800379a <WEIGHTEDAVG_Process>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4a3f      	ldr	r2, [pc, #252]	; (8001ba8 <followTrack+0x14c>)
 8001aaa:	6013      	str	r3, [r2, #0]
	  checkforOilspill();
 8001aac:	f000 f9fc 	bl	8001ea8 <checkforOilspill>
	  if(validate())
 8001ab0:	f7ff ff98 	bl	80019e4 <validate>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d03f      	beq.n	8001b3a <followTrack+0xde>
	  {
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001aba:	2201      	movs	r2, #1
 8001abc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ac0:	483a      	ldr	r0, [pc, #232]	; (8001bac <followTrack+0x150>)
 8001ac2:	f003 fb92 	bl	80051ea <HAL_GPIO_WritePin>
		  isLine = true;
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <followTrack+0x154>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
		  float delta = CTRL_Calculate((float)pos, (float)LINEPOS, &ctrl, false);
 8001acc:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <followTrack+0x14c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fe37 	bl	8000744 <__aeabi_ui2f>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	4a36      	ldr	r2, [pc, #216]	; (8001bb4 <followTrack+0x158>)
 8001ada:	4937      	ldr	r1, [pc, #220]	; (8001bb8 <followTrack+0x15c>)
 8001adc:	f7ff f8bb 	bl	8000c56 <CTRL_Calculate>
 8001ae0:	6038      	str	r0, [r7, #0]
		  int left = V0 + (int)delta;
 8001ae2:	6838      	ldr	r0, [r7, #0]
 8001ae4:	f7ff f84c 	bl	8000b80 <__aeabi_f2iz>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	3332      	adds	r3, #50	; 0x32
 8001aec:	60bb      	str	r3, [r7, #8]
		  if(left < 0)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	da02      	bge.n	8001afa <followTrack+0x9e>
		  {
			  left = stop;
 8001af4:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <followTrack+0x160>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60bb      	str	r3, [r7, #8]
		  }
		  if(left > V0)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b32      	cmp	r3, #50	; 0x32
 8001afe:	dd01      	ble.n	8001b04 <followTrack+0xa8>
		  {
			  left = V0;
 8001b00:	2332      	movs	r3, #50	; 0x32
 8001b02:	60bb      	str	r3, [r7, #8]
		  }
		  int right = V0 - (int)delta;
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f7ff f83b 	bl	8000b80 <__aeabi_f2iz>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001b10:	607b      	str	r3, [r7, #4]
		  if(right < 0)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da02      	bge.n	8001b1e <followTrack+0xc2>
		  {
			  right = stop;
 8001b18:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <followTrack+0x160>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	607b      	str	r3, [r7, #4]
		  }
		  if(right > V0)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b32      	cmp	r3, #50	; 0x32
 8001b22:	dd01      	ble.n	8001b28 <followTrack+0xcc>
		  {
			  right = V0;
 8001b24:	2332      	movs	r3, #50	; 0x32
 8001b26:	607b      	str	r3, [r7, #4]
		  }

		  if(DRIVING == state)
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <followTrack+0x140>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d128      	bne.n	8001b82 <followTrack+0x126>
		  {
			  Powertrain_SetDutycycles(left, right);
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	68b8      	ldr	r0, [r7, #8]
 8001b34:	f7ff fe70 	bl	8001818 <Powertrain_SetDutycycles>
 8001b38:	e023      	b.n	8001b82 <followTrack+0x126>
		  }
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b40:	481a      	ldr	r0, [pc, #104]	; (8001bac <followTrack+0x150>)
 8001b42:	f003 fb52 	bl	80051ea <HAL_GPIO_WritePin>
		  isLine = false;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <followTrack+0x154>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
		  if(INTERRUPTION != state && OBSTACLE != state)
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <followTrack+0x140>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d006      	beq.n	8001b62 <followTrack+0x106>
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <followTrack+0x140>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d002      	beq.n	8001b62 <followTrack+0x106>
		  {
			  state = INTERRUPTIONINI;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <followTrack+0x140>)
 8001b5e:	2203      	movs	r2, #3
 8001b60:	701a      	strb	r2, [r3, #0]
		  }
		  if(DRIVING == state || INTERRUPTIONINI == state)
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <followTrack+0x140>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d003      	beq.n	8001b72 <followTrack+0x116>
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <followTrack+0x140>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d107      	bne.n	8001b82 <followTrack+0x126>
		  {
			  Powertrain_SetDutycycles(stop, stop);
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <followTrack+0x160>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <followTrack+0x160>)
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fe4b 	bl	8001818 <Powertrain_SetDutycycles>
		  }
	  }
	HAL_GPIO_WritePin(TP1_GPIO_Port, TP1_Pin, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b88:	4803      	ldr	r0, [pc, #12]	; (8001b98 <followTrack+0x13c>)
 8001b8a:	f003 fb2e 	bl	80051ea <HAL_GPIO_WritePin>
 8001b8e:	e000      	b.n	8001b92 <followTrack+0x136>
		return;
 8001b90:	bf00      	nop
}
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40010800 	.word	0x40010800
 8001b9c:	200001a8 	.word	0x200001a8
 8001ba0:	2000024c 	.word	0x2000024c
 8001ba4:	200001dc 	.word	0x200001dc
 8001ba8:	20000120 	.word	0x20000120
 8001bac:	40011000 	.word	0x40011000
 8001bb0:	20000054 	.word	0x20000054
 8001bb4:	20000124 	.word	0x20000124
 8001bb8:	42480000 	.word	0x42480000
 8001bbc:	20000020 	.word	0x20000020

08001bc0 <turn>:

void turn(bool left, int speed, int ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	73fb      	strb	r3, [r7, #15]
	ticksLeft = 0;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <turn+0x80>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
	ticksRight = 0;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <turn+0x84>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
	if(left)
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <turn+0x32>
	{
		Powertrain_SetDutycycles(-speed, stop);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	425b      	negs	r3, r3
 8001be4:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <turn+0x88>)
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fe14 	bl	8001818 <Powertrain_SetDutycycles>
 8001bf0:	e007      	b.n	8001c02 <turn+0x42>
	}
	else
	{
		Powertrain_SetDutycycles(stop, -speed);
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <turn+0x88>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	425b      	negs	r3, r3
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	f7ff fe0b 	bl	8001818 <Powertrain_SetDutycycles>
	}
	while((left && ticksLeft < ticks) || (!left && ticksRight < ticks)){}
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d004      	beq.n	8001c12 <turn+0x52>
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <turn+0x80>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d3f7      	bcc.n	8001c02 <turn+0x42>
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	f083 0301 	eor.w	r3, r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d004      	beq.n	8001c28 <turn+0x68>
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <turn+0x84>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d3ec      	bcc.n	8001c02 <turn+0x42>
	Powertrain_SetDutycycles(stop, stop);
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <turn+0x88>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <turn+0x88>)
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fdf0 	bl	8001818 <Powertrain_SetDutycycles>
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000004c 	.word	0x2000004c
 8001c44:	20000050 	.word	0x20000050
 8001c48:	20000020 	.word	0x20000020

08001c4c <goStraight>:
	while((left && ticksLeft < ticks) || (!left && ticksRight < ticks)){}
	Powertrain_SetDutycycles(stop, stop);
}

void goStraight(int speed, int ticks)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
	ticksLeft = 0;
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <goStraight+0xb0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
	ticksRight = 0;
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <goStraight+0xb4>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
	CTRL_Calculate(0.0, 0.0, &dTicks, true);
 8001c62:	2301      	movs	r3, #1
 8001c64:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <goStraight+0xb8>)
 8001c66:	f04f 0100 	mov.w	r1, #0
 8001c6a:	f04f 0000 	mov.w	r0, #0
 8001c6e:	f7fe fff2 	bl	8000c56 <CTRL_Calculate>
	while((ticksLeft < ticks) && (ticksRight < ticks))
 8001c72:	e02c      	b.n	8001cce <goStraight+0x82>
	{
		int delta = ticksLeft - ticksRight;
 8001c74:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <goStraight+0xb0>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <goStraight+0xb4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	60fb      	str	r3, [r7, #12]
		int dv = (float)CTRL_Calculate((float)delta, 0.0, &dTicks, false);
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f7fe fd63 	bl	800074c <__aeabi_i2f>
 8001c86:	2300      	movs	r3, #0
 8001c88:	4a1e      	ldr	r2, [pc, #120]	; (8001d04 <goStraight+0xb8>)
 8001c8a:	f04f 0100 	mov.w	r1, #0
 8001c8e:	f7fe ffe2 	bl	8000c56 <CTRL_Calculate>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe ff73 	bl	8000b80 <__aeabi_f2iz>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	60bb      	str	r3, [r7, #8]
		int left = speed + dv;
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
		int right = speed - dv;
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	613b      	str	r3, [r7, #16]
		if(left < 0)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	da02      	bge.n	8001cba <goStraight+0x6e>
		{
			left = stop;
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <goStraight+0xbc>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	617b      	str	r3, [r7, #20]
		}
		if(right < 0)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	da02      	bge.n	8001cc6 <goStraight+0x7a>
		{
			right = stop;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <goStraight+0xbc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	613b      	str	r3, [r7, #16]
		}
		Powertrain_SetDutycycles(left, right);
 8001cc6:	6939      	ldr	r1, [r7, #16]
 8001cc8:	6978      	ldr	r0, [r7, #20]
 8001cca:	f7ff fda5 	bl	8001818 <Powertrain_SetDutycycles>
	while((ticksLeft < ticks) && (ticksRight < ticks))
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <goStraight+0xb0>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d204      	bcs.n	8001ce2 <goStraight+0x96>
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <goStraight+0xb4>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d3c8      	bcc.n	8001c74 <goStraight+0x28>
	}
	Powertrain_SetDutycycles(stop, stop);
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <goStraight+0xbc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <goStraight+0xbc>)
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fd93 	bl	8001818 <Powertrain_SetDutycycles>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000004c 	.word	0x2000004c
 8001d00:	20000050 	.word	0x20000050
 8001d04:	200004b4 	.word	0x200004b4
 8001d08:	20000020 	.word	0x20000020

08001d0c <obstacleSequence>:

void obstacleSequence()
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	  Powertrain_SetDutycycles(stop, stop);
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <obstacleSequence+0xb4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <obstacleSequence+0xb4>)
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fd7c 	bl	8001818 <Powertrain_SetDutycycles>
	  HAL_Delay(100);
 8001d20:	2064      	movs	r0, #100	; 0x64
 8001d22:	f002 f995 	bl	8004050 <HAL_Delay>
	  turn(true, 40, 55);
 8001d26:	2237      	movs	r2, #55	; 0x37
 8001d28:	2128      	movs	r1, #40	; 0x28
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f7ff ff48 	bl	8001bc0 <turn>
	  HAL_Delay(10);
 8001d30:	200a      	movs	r0, #10
 8001d32:	f002 f98d 	bl	8004050 <HAL_Delay>
	  Powertrain_SetDutycycles(50, 50);
 8001d36:	2132      	movs	r1, #50	; 0x32
 8001d38:	2032      	movs	r0, #50	; 0x32
 8001d3a:	f7ff fd6d 	bl	8001818 <Powertrain_SetDutycycles>
	  HAL_Delay(150);
 8001d3e:	2096      	movs	r0, #150	; 0x96
 8001d40:	f002 f986 	bl	8004050 <HAL_Delay>
	  Powertrain_SetDutycycles(40, 22);
 8001d44:	2116      	movs	r1, #22
 8001d46:	2028      	movs	r0, #40	; 0x28
 8001d48:	f7ff fd66 	bl	8001818 <Powertrain_SetDutycycles>
	  HAL_Delay(500);
 8001d4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d50:	f002 f97e 	bl	8004050 <HAL_Delay>
	  while(!isLine){}
 8001d54:	bf00      	nop
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <obstacleSequence+0xb8>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	f083 0301 	eor.w	r3, r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f8      	bne.n	8001d56 <obstacleSequence+0x4a>
	  goStraight(40, 20);
 8001d64:	2114      	movs	r1, #20
 8001d66:	2028      	movs	r0, #40	; 0x28
 8001d68:	f7ff ff70 	bl	8001c4c <goStraight>
	  Powertrain_SetDutycycles(stop, stop);
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <obstacleSequence+0xb4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <obstacleSequence+0xb4>)
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fd4e 	bl	8001818 <Powertrain_SetDutycycles>
	  HAL_Delay(150);
 8001d7c:	2096      	movs	r0, #150	; 0x96
 8001d7e:	f002 f967 	bl	8004050 <HAL_Delay>
	  while(!isLine)
 8001d82:	e004      	b.n	8001d8e <obstacleSequence+0x82>
	  {
		  turn(true, 43, 2);
 8001d84:	2202      	movs	r2, #2
 8001d86:	212b      	movs	r1, #43	; 0x2b
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f7ff ff19 	bl	8001bc0 <turn>
	  while(!isLine)
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <obstacleSequence+0xb8>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	f083 0301 	eor.w	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f3      	bne.n	8001d84 <obstacleSequence+0x78>
	  }
	  Powertrain_SetDutycycles(stop, stop);
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <obstacleSequence+0xb4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <obstacleSequence+0xb4>)
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fd36 	bl	8001818 <Powertrain_SetDutycycles>
	  HAL_Delay(150);
 8001dac:	2096      	movs	r0, #150	; 0x96
 8001dae:	f002 f94f 	bl	8004050 <HAL_Delay>
	  goStraight(40, 10);
 8001db2:	210a      	movs	r1, #10
 8001db4:	2028      	movs	r0, #40	; 0x28
 8001db6:	f7ff ff49 	bl	8001c4c <goStraight>
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000020 	.word	0x20000020
 8001dc4:	20000054 	.word	0x20000054

08001dc8 <interruptionSequence>:

void interruptionSequence()
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
	goStraight(V0, 30);
 8001dce:	211e      	movs	r1, #30
 8001dd0:	2032      	movs	r0, #50	; 0x32
 8001dd2:	f7ff ff3b 	bl	8001c4c <goStraight>
	Powertrain_SetDutycycles(stop, stop);
 8001dd6:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <interruptionSequence+0xd8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a31      	ldr	r2, [pc, #196]	; (8001ea0 <interruptionSequence+0xd8>)
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fd19 	bl	8001818 <Powertrain_SetDutycycles>
	HAL_Delay(10);
 8001de6:	200a      	movs	r0, #10
 8001de8:	f002 f932 	bl	8004050 <HAL_Delay>
	bool first = true;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
	bool found = false;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73bb      	strb	r3, [r7, #14]
	while(!isLine)
 8001df4:	e047      	b.n	8001e86 <interruptionSequence+0xbe>
	{
		int i = 20;
 8001df6:	2314      	movs	r3, #20
 8001df8:	60bb      	str	r3, [r7, #8]
		if(first)
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <interruptionSequence+0x40>
		{
			i = 10;
 8001e00:	230a      	movs	r3, #10
 8001e02:	60bb      	str	r3, [r7, #8]
			first = false;
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]
		}

		for(int k = 0; k < i; k++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	e011      	b.n	8001e32 <interruptionSequence+0x6a>
		{
			if(isLine || found)
 8001e0e:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <interruptionSequence+0xdc>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <interruptionSequence+0x54>
 8001e16:	7bbb      	ldrb	r3, [r7, #14]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <interruptionSequence+0x5a>
			{
				found = true;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73bb      	strb	r3, [r7, #14]
				break;
 8001e20:	e00b      	b.n	8001e3a <interruptionSequence+0x72>
			}
			turn(true, V0, 2);
 8001e22:	2202      	movs	r2, #2
 8001e24:	2132      	movs	r1, #50	; 0x32
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7ff feca 	bl	8001bc0 <turn>
		for(int k = 0; k < i; k++)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	dbe9      	blt.n	8001e0e <interruptionSequence+0x46>
		}
		i = 20;
 8001e3a:	2314      	movs	r3, #20
 8001e3c:	60bb      	str	r3, [r7, #8]
		Powertrain_SetDutycycles(stop, stop);
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <interruptionSequence+0xd8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a17      	ldr	r2, [pc, #92]	; (8001ea0 <interruptionSequence+0xd8>)
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fce5 	bl	8001818 <Powertrain_SetDutycycles>
		HAL_Delay(50);
 8001e4e:	2032      	movs	r0, #50	; 0x32
 8001e50:	f002 f8fe 	bl	8004050 <HAL_Delay>
		for(int k = 0; k < i; k++)
 8001e54:	2300      	movs	r3, #0
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	e011      	b.n	8001e7e <interruptionSequence+0xb6>
		{
			if(isLine || found)
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <interruptionSequence+0xdc>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <interruptionSequence+0xa0>
 8001e62:	7bbb      	ldrb	r3, [r7, #14]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <interruptionSequence+0xa6>
			{
				found = true;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73bb      	strb	r3, [r7, #14]
				break;
 8001e6c:	e00b      	b.n	8001e86 <interruptionSequence+0xbe>
			}
			turn(false, V0, 2);
 8001e6e:	2202      	movs	r2, #2
 8001e70:	2132      	movs	r1, #50	; 0x32
 8001e72:	2000      	movs	r0, #0
 8001e74:	f7ff fea4 	bl	8001bc0 <turn>
		for(int k = 0; k < i; k++)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	dbe9      	blt.n	8001e5a <interruptionSequence+0x92>
	while(!isLine)
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <interruptionSequence+0xdc>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	f083 0301 	eor.w	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1b0      	bne.n	8001df6 <interruptionSequence+0x2e>
		}
	}
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000020 	.word	0x20000020
 8001ea4:	20000054 	.word	0x20000054

08001ea8 <checkforOilspill>:

void checkforOilspill()
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
	int count = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 8; i++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	e00f      	b.n	8001ed8 <checkforOilspill+0x30>
	{
		if(sensorValues[i] < threshVals[i])
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <checkforOilspill+0x64>)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ec0:	4913      	ldr	r1, [pc, #76]	; (8001f10 <checkforOilspill+0x68>)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d202      	bcs.n	8001ed2 <checkforOilspill+0x2a>
		{
			count ++;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 8; i++)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b07      	cmp	r3, #7
 8001edc:	ddec      	ble.n	8001eb8 <checkforOilspill+0x10>
		}
	}
	if(count > 5)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	dd07      	ble.n	8001ef4 <checkforOilspill+0x4c>
	{
		isOilspill = true;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <checkforOilspill+0x6c>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
		WEIGHTEDAVG_Invert(&filter, false);
 8001eea:	2100      	movs	r1, #0
 8001eec:	480a      	ldr	r0, [pc, #40]	; (8001f18 <checkforOilspill+0x70>)
 8001eee:	f001 fb41 	bl	8003574 <WEIGHTEDAVG_Invert>
	else
	{
		isOilspill = false;
		WEIGHTEDAVG_Invert(&filter, true);
	}
}
 8001ef2:	e006      	b.n	8001f02 <checkforOilspill+0x5a>
		isOilspill = false;
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <checkforOilspill+0x6c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
		WEIGHTEDAVG_Invert(&filter, true);
 8001efa:	2101      	movs	r1, #1
 8001efc:	4806      	ldr	r0, [pc, #24]	; (8001f18 <checkforOilspill+0x70>)
 8001efe:	f001 fb39 	bl	8003574 <WEIGHTEDAVG_Invert>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000024c 	.word	0x2000024c
 8001f10:	20000078 	.word	0x20000078
 8001f14:	20000055 	.word	0x20000055
 8001f18:	200001dc 	.word	0x200001dc

08001f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <QUEUE_Init>:
 *      Author: jonas
 */
#include "queue.h"

void QUEUE_Init(QUEUE_t* q, char* buf, int max)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
	q->max = max;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
	q->elements = 0;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
	q->buf = buf;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	611a      	str	r2, [r3, #16]
	q->rear = q->max - 1;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1e5a      	subs	r2, r3, #1
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	605a      	str	r2, [r3, #4]
	q->front = 0;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <QUEUE_IsFull>:
bool QUEUE_IsFull(QUEUE_t* q)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	return (q->elements == q->max);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <QUEUE_IsEmpty>:

bool QUEUE_IsEmpty(QUEUE_t* q)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	return (0 == q->elements);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <QUEUE_Push>:

void QUEUE_Push(char val, QUEUE_t* q)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
	q->rear = (q->rear + 1) % q->max;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fbe:	fb02 f201 	mul.w	r2, r2, r1
 8001fc2:	1a9a      	subs	r2, r3, r2
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
	q->elements++;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	60da      	str	r2, [r3, #12]
	q->buf[q->rear] = val;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	6852      	ldr	r2, [r2, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	79fa      	ldrb	r2, [r7, #7]
 8001fde:	701a      	strb	r2, [r3, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <QUEUE_Pop>:
{
	return q->buf[q->rear];
}

char QUEUE_Pop(QUEUE_t* q)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b085      	sub	sp, #20
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
	char c = q->buf[q->front];
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6892      	ldr	r2, [r2, #8]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	73fb      	strb	r3, [r7, #15]
	q->front = (q->front + 1) % q->max;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	3301      	adds	r3, #1
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	fb93 f1f2 	sdiv	r1, r3, r2
 800200e:	fb02 f201 	mul.w	r2, r2, r1
 8002012:	1a9a      	subs	r2, r3, r2
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]
	q->elements--;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60da      	str	r2, [r3, #12]
	return c;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <QUEUE_Size>:

uint32_t QUEUE_Size(QUEUE_t* q)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
	return q->elements;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_MspInit+0x5c>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_MspInit+0x5c>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6193      	str	r3, [r2, #24]
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_MspInit+0x5c>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <HAL_MspInit+0x5c>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <HAL_MspInit+0x5c>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206c:	61d3      	str	r3, [r2, #28]
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <HAL_MspInit+0x5c>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_MspInit+0x60>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <HAL_MspInit+0x60>)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40010000 	.word	0x40010000

080020a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a28      	ldr	r2, [pc, #160]	; (8002164 <HAL_ADC_MspInit+0xbc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d149      	bne.n	800215c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <HAL_ADC_MspInit+0xc0>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a26      	ldr	r2, [pc, #152]	; (8002168 <HAL_ADC_MspInit+0xc0>)
 80020ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b24      	ldr	r3, [pc, #144]	; (8002168 <HAL_ADC_MspInit+0xc0>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	4b21      	ldr	r3, [pc, #132]	; (8002168 <HAL_ADC_MspInit+0xc0>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	4a20      	ldr	r2, [pc, #128]	; (8002168 <HAL_ADC_MspInit+0xc0>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	6193      	str	r3, [r2, #24]
 80020ec:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_ADC_MspInit+0xc0>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 80020f8:	23ff      	movs	r3, #255	; 0xff
 80020fa:	613b      	str	r3, [r7, #16]
                          |S4_Pin|S5_Pin|S6_Pin|S7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020fc:	2303      	movs	r3, #3
 80020fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	f107 0310 	add.w	r3, r7, #16
 8002104:	4619      	mov	r1, r3
 8002106:	4819      	ldr	r0, [pc, #100]	; (800216c <HAL_ADC_MspInit+0xc4>)
 8002108:	f002 fed4 	bl	8004eb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_ADC_MspInit+0xc8>)
 800210e:	4a19      	ldr	r2, [pc, #100]	; (8002174 <HAL_ADC_MspInit+0xcc>)
 8002110:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <HAL_ADC_MspInit+0xc8>)
 8002114:	2200      	movs	r2, #0
 8002116:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_ADC_MspInit+0xc8>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <HAL_ADC_MspInit+0xc8>)
 8002120:	2280      	movs	r2, #128	; 0x80
 8002122:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_ADC_MspInit+0xc8>)
 8002126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800212a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800212c:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_ADC_MspInit+0xc8>)
 800212e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002132:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_ADC_MspInit+0xc8>)
 8002136:	2220      	movs	r2, #32
 8002138:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <HAL_ADC_MspInit+0xc8>)
 800213c:	2200      	movs	r2, #0
 800213e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002140:	480b      	ldr	r0, [pc, #44]	; (8002170 <HAL_ADC_MspInit+0xc8>)
 8002142:	f002 fcc9 	bl	8004ad8 <HAL_DMA_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800214c:	f7ff fee6 	bl	8001f1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_ADC_MspInit+0xc8>)
 8002154:	621a      	str	r2, [r3, #32]
 8002156:	4a06      	ldr	r2, [pc, #24]	; (8002170 <HAL_ADC_MspInit+0xc8>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800215c:	bf00      	nop
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40012400 	.word	0x40012400
 8002168:	40021000 	.word	0x40021000
 800216c:	40010800 	.word	0x40010800
 8002170:	20000208 	.word	0x20000208
 8002174:	40020008 	.word	0x40020008

08002178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a2c      	ldr	r2, [pc, #176]	; (8002238 <HAL_TIM_Base_MspInit+0xc0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d10c      	bne.n	80021a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800218a:	4b2c      	ldr	r3, [pc, #176]	; (800223c <HAL_TIM_Base_MspInit+0xc4>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	4a2b      	ldr	r2, [pc, #172]	; (800223c <HAL_TIM_Base_MspInit+0xc4>)
 8002190:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002194:	6193      	str	r3, [r2, #24]
 8002196:	4b29      	ldr	r3, [pc, #164]	; (800223c <HAL_TIM_Base_MspInit+0xc4>)
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021a2:	e044      	b.n	800222e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ac:	d114      	bne.n	80021d8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ae:	4b23      	ldr	r3, [pc, #140]	; (800223c <HAL_TIM_Base_MspInit+0xc4>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4a22      	ldr	r2, [pc, #136]	; (800223c <HAL_TIM_Base_MspInit+0xc4>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	61d3      	str	r3, [r2, #28]
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_TIM_Base_MspInit+0xc4>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	201c      	movs	r0, #28
 80021cc:	f002 fc4d 	bl	8004a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021d0:	201c      	movs	r0, #28
 80021d2:	f002 fc66 	bl	8004aa2 <HAL_NVIC_EnableIRQ>
}
 80021d6:	e02a      	b.n	800222e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a18      	ldr	r2, [pc, #96]	; (8002240 <HAL_TIM_Base_MspInit+0xc8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10c      	bne.n	80021fc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <HAL_TIM_Base_MspInit+0xc4>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a15      	ldr	r2, [pc, #84]	; (800223c <HAL_TIM_Base_MspInit+0xc4>)
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	61d3      	str	r3, [r2, #28]
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_TIM_Base_MspInit+0xc4>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
}
 80021fa:	e018      	b.n	800222e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a10      	ldr	r2, [pc, #64]	; (8002244 <HAL_TIM_Base_MspInit+0xcc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d113      	bne.n	800222e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_TIM_Base_MspInit+0xc4>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	4a0c      	ldr	r2, [pc, #48]	; (800223c <HAL_TIM_Base_MspInit+0xc4>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	61d3      	str	r3, [r2, #28]
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_TIM_Base_MspInit+0xc4>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	201e      	movs	r0, #30
 8002224:	f002 fc21 	bl	8004a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002228:	201e      	movs	r0, #30
 800222a:	f002 fc3a 	bl	8004aa2 <HAL_NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40012c00 	.word	0x40012c00
 800223c:	40021000 	.word	0x40021000
 8002240:	40000400 	.word	0x40000400
 8002244:	40000800 	.word	0x40000800

08002248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <HAL_TIM_MspPostInit+0x7c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d129      	bne.n	80022bc <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <HAL_TIM_MspPostInit+0x80>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <HAL_TIM_MspPostInit+0x80>)
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <HAL_TIM_MspPostInit+0x80>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM2_Pin|PWM1_Pin|PWM3_Pin|PWM4_Pin;
 8002280:	2333      	movs	r3, #51	; 0x33
 8002282:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2302      	movs	r3, #2
 800228a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	4619      	mov	r1, r3
 8002292:	480e      	ldr	r0, [pc, #56]	; (80022cc <HAL_TIM_MspPostInit+0x84>)
 8002294:	f002 fe0e 	bl	8004eb4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002298:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <HAL_TIM_MspPostInit+0x88>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <HAL_TIM_MspPostInit+0x88>)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022bc:	bf00      	nop
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010c00 	.word	0x40010c00
 80022d0:	40010000 	.word	0x40010000

080022d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0310 	add.w	r3, r7, #16
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <HAL_UART_MspInit+0x8c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d131      	bne.n	8002358 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_UART_MspInit+0x90>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	4a1a      	ldr	r2, [pc, #104]	; (8002364 <HAL_UART_MspInit+0x90>)
 80022fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fe:	61d3      	str	r3, [r2, #28]
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_UART_MspInit+0x90>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230c:	4b15      	ldr	r3, [pc, #84]	; (8002364 <HAL_UART_MspInit+0x90>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <HAL_UART_MspInit+0x90>)
 8002312:	f043 0308 	orr.w	r3, r3, #8
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_UART_MspInit+0x90>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002328:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232e:	2303      	movs	r3, #3
 8002330:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	f107 0310 	add.w	r3, r7, #16
 8002336:	4619      	mov	r1, r3
 8002338:	480b      	ldr	r0, [pc, #44]	; (8002368 <HAL_UART_MspInit+0x94>)
 800233a:	f002 fdbb 	bl	8004eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800233e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002342:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234c:	f107 0310 	add.w	r3, r7, #16
 8002350:	4619      	mov	r1, r3
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <HAL_UART_MspInit+0x94>)
 8002354:	f002 fdae 	bl	8004eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002358:	bf00      	nop
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40004800 	.word	0x40004800
 8002364:	40021000 	.word	0x40021000
 8002368:	40010c00 	.word	0x40010c00

0800236c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <HardFault_Handler+0x4>

0800237e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <MemManage_Handler+0x4>

08002384 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <BusFault_Handler+0x4>

0800238a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <UsageFault_Handler+0x4>

08002390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b8:	f001 fe2e 	bl	8004018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}

080023c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	ISR_DMA();
 80023c4:	f7fe fd06 	bl	8000dd4 <ISR_DMA>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <DMA1_Channel1_IRQHandler+0x14>)
 80023ca:	f002 fc3f 	bl	8004c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000208 	.word	0x20000208

080023d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <TIM2_IRQHandler+0x10>)
 80023de:	f003 fdab 	bl	8005f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2000046c 	.word	0x2000046c

080023ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	ISR_CTRL();
 80023f0:	f7fe fcf6 	bl	8000de0 <ISR_CTRL>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <TIM4_IRQHandler+0x14>)
 80023f6:	f003 fd9f 	bl	8005f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000098 	.word	0x20000098

08002404 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(ENC0_Pin))
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <EXTI15_10_IRQHandler+0x38>)
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <EXTI15_10_IRQHandler+0x14>
	{
		ISR_ENCODER0();
 8002414:	f7fe fcc2 	bl	8000d9c <ISR_ENCODER0>
	}
	if(__HAL_GPIO_EXTI_GET_FLAG(ENC1_Pin))
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <EXTI15_10_IRQHandler+0x38>)
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <EXTI15_10_IRQHandler+0x24>
	{
		ISR_ENCODER1();
 8002424:	f7fe fcc8 	bl	8000db8 <ISR_ENCODER1>
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002428:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800242c:	f002 fef6 	bl	800521c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002430:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002434:	f002 fef2 	bl	800521c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40010400 	.word	0x40010400

08002440 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <startTimeout>:
#include "vl53l0x.h"

uint32_t timeout_start_ms;

void startTimeout(VL53_t* tof)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	tof->timeout_start_ms = HAL_GetTick();
 8002454:	f001 fdf2 	bl	800403c <HAL_GetTick>
 8002458:	4603      	mov	r3, r0
 800245a:	b29a      	uxth	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	829a      	strh	r2, [r3, #20]
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <checkTimeoutExpired>:

bool checkTimeoutExpired(VL53_t* tof)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	return tof->io_timeout > 0 && ((uint16_t)(HAL_GetTick() - tof->timeout_start_ms) > tof->io_timeout);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	8a1b      	ldrh	r3, [r3, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <checkTimeoutExpired+0x2c>
 8002478:	f001 fde0 	bl	800403c <HAL_GetTick>
 800247c:	4603      	mov	r3, r0
 800247e:	b29a      	uxth	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	8a9b      	ldrh	r3, [r3, #20]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	b29a      	uxth	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	8a1b      	ldrh	r3, [r3, #16]
 800248c:	429a      	cmp	r2, r3
 800248e:	d901      	bls.n	8002494 <checkTimeoutExpired+0x2c>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <checkTimeoutExpired+0x2e>
 8002494:	2300      	movs	r3, #0
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <readReg>:
   uint16_t msrc_dss_tcc_mclks, pre_range_mclks, final_range_mclks;
   uint32_t msrc_dss_tcc_us,    pre_range_us,    final_range_us;
}SequenceStepTimeouts;

uint8_t readReg(VL53_t* tof, uint8_t reg)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	70fb      	strb	r3, [r7, #3]
	WIRE_BeginTransmission(tof->wire, tof->address);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	791b      	ldrb	r3, [r3, #4]
 80024b8:	4619      	mov	r1, r3
 80024ba:	4610      	mov	r0, r2
 80024bc:	f001 fb33 	bl	8003b26 <WIRE_BeginTransmission>
	WIRE_WriteByte(tof->wire, reg);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f001 fb54 	bl	8003b76 <WIRE_WriteByte>
	tof->lastStatus = WIRE_EndTransmission(tof->wire, true);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2101      	movs	r1, #1
 80024d4:	4618      	mov	r0, r3
 80024d6:	f001 fb75 	bl	8003bc4 <WIRE_EndTransmission>
 80024da:	4603      	mov	r3, r0
 80024dc:	461a      	mov	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	739a      	strb	r2, [r3, #14]
	WIRE_RequestFrom(tof->wire, tof->address, 1, true);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7919      	ldrb	r1, [r3, #4]
 80024ea:	2301      	movs	r3, #1
 80024ec:	2201      	movs	r2, #1
 80024ee:	f001 fc07 	bl	8003d00 <WIRE_RequestFrom>
	return WIRE_Read(tof->wire);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f001 fd07 	bl	8003f0a <WIRE_Read>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <writeReg>:

void writeReg(VL53_t* tof, uint8_t reg, uint8_t value)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	460b      	mov	r3, r1
 8002510:	70fb      	strb	r3, [r7, #3]
 8002512:	4613      	mov	r3, r2
 8002514:	70bb      	strb	r3, [r7, #2]
	WIRE_BeginTransmission(tof->wire, tof->address);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	791b      	ldrb	r3, [r3, #4]
 800251e:	4619      	mov	r1, r3
 8002520:	4610      	mov	r0, r2
 8002522:	f001 fb00 	bl	8003b26 <WIRE_BeginTransmission>
	WIRE_WriteByte(tof->wire, reg);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f001 fb21 	bl	8003b76 <WIRE_WriteByte>
	WIRE_WriteByte(tof->wire, value);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	78ba      	ldrb	r2, [r7, #2]
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f001 fb1a 	bl	8003b76 <WIRE_WriteByte>
	tof->lastStatus = WIRE_EndTransmission(tof->wire, true);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2101      	movs	r1, #1
 8002548:	4618      	mov	r0, r3
 800254a:	f001 fb3b 	bl	8003bc4 <WIRE_EndTransmission>
 800254e:	4603      	mov	r3, r0
 8002550:	461a      	mov	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	739a      	strb	r2, [r3, #14]
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <readReg16Bit>:

uint16_t readReg16Bit(VL53_t* tof, uint8_t reg)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b084      	sub	sp, #16
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	70fb      	strb	r3, [r7, #3]
	 uint16_t value;

	 WIRE_BeginTransmission(tof->wire, tof->address);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	791b      	ldrb	r3, [r3, #4]
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f001 fad6 	bl	8003b26 <WIRE_BeginTransmission>
	 WIRE_WriteByte(tof->wire, reg);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f001 faf7 	bl	8003b76 <WIRE_WriteByte>
	 tof->lastStatus = WIRE_EndTransmission(tof->wire, true);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2101      	movs	r1, #1
 800258e:	4618      	mov	r0, r3
 8002590:	f001 fb18 	bl	8003bc4 <WIRE_EndTransmission>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	739a      	strb	r2, [r3, #14]
	 WIRE_RequestFrom(tof->wire, tof->address, (uint8_t)2, true);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7919      	ldrb	r1, [r3, #4]
 80025a4:	2301      	movs	r3, #1
 80025a6:	2202      	movs	r2, #2
 80025a8:	f001 fbaa 	bl	8003d00 <WIRE_RequestFrom>
	 value  = (uint16_t)WIRE_Read(tof->wire) << 8; // value high byte
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f001 fcaa 	bl	8003f0a <WIRE_Read>
 80025b6:	4603      	mov	r3, r0
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	81fb      	strh	r3, [r7, #14]
	 value |=           WIRE_Read(tof->wire);      // value low byte
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f001 fca1 	bl	8003f0a <WIRE_Read>
 80025c8:	4603      	mov	r3, r0
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	89fb      	ldrh	r3, [r7, #14]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	81fb      	strh	r3, [r7, #14]
	 return value;
 80025d2:	89fb      	ldrh	r3, [r7, #14]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <writeReg16Bit>:
void writeReg16Bit(VL53_t* tof, uint8_t reg, uint16_t value)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	70fb      	strb	r3, [r7, #3]
 80025e8:	4613      	mov	r3, r2
 80025ea:	803b      	strh	r3, [r7, #0]
	WIRE_BeginTransmission(tof->wire, tof->address);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	791b      	ldrb	r3, [r3, #4]
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f001 fa95 	bl	8003b26 <WIRE_BeginTransmission>
	WIRE_WriteByte(tof->wire, reg);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f001 fab6 	bl	8003b76 <WIRE_WriteByte>
	WIRE_WriteByte(tof->wire, (value >> 8) & 0xff);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	883b      	ldrh	r3, [r7, #0]
 8002610:	0a1b      	lsrs	r3, r3, #8
 8002612:	b29b      	uxth	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	4619      	mov	r1, r3
 8002618:	4610      	mov	r0, r2
 800261a:	f001 faac 	bl	8003b76 <WIRE_WriteByte>
	WIRE_WriteByte(tof->wire, value & 0xff);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	883a      	ldrh	r2, [r7, #0]
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f001 faa4 	bl	8003b76 <WIRE_WriteByte>
	tof->lastStatus = WIRE_EndTransmission(tof->wire, true);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2101      	movs	r1, #1
 8002634:	4618      	mov	r0, r3
 8002636:	f001 fac5 	bl	8003bc4 <WIRE_EndTransmission>
 800263a:	4603      	mov	r3, r0
 800263c:	461a      	mov	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	739a      	strb	r2, [r3, #14]
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <readMulti>:

void readMulti(VL53_t* tof, uint8_t reg, uint8_t* dst, uint8_t count)
{
 800264a:	b590      	push	{r4, r7, lr}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	461a      	mov	r2, r3
 8002656:	460b      	mov	r3, r1
 8002658:	72fb      	strb	r3, [r7, #11]
 800265a:	4613      	mov	r3, r2
 800265c:	72bb      	strb	r3, [r7, #10]
	WIRE_BeginTransmission(tof->wire, tof->address);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	791b      	ldrb	r3, [r3, #4]
 8002666:	4619      	mov	r1, r3
 8002668:	4610      	mov	r0, r2
 800266a:	f001 fa5c 	bl	8003b26 <WIRE_BeginTransmission>
	WIRE_WriteByte(tof->wire, reg);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	7afa      	ldrb	r2, [r7, #11]
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f001 fa7d 	bl	8003b76 <WIRE_WriteByte>
	tof->lastStatus = WIRE_EndTransmission(tof->wire, true);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2101      	movs	r1, #1
 8002682:	4618      	mov	r0, r3
 8002684:	f001 fa9e 	bl	8003bc4 <WIRE_EndTransmission>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	739a      	strb	r2, [r3, #14]
	HAL_Delay(2);
 8002690:	2002      	movs	r0, #2
 8002692:	f001 fcdd 	bl	8004050 <HAL_Delay>
	WIRE_RequestFrom(tof->wire, tof->address, count, true);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	7919      	ldrb	r1, [r3, #4]
 800269e:	7aba      	ldrb	r2, [r7, #10]
 80026a0:	2301      	movs	r3, #1
 80026a2:	f001 fb2d 	bl	8003d00 <WIRE_RequestFrom>
	while(count-- > 0)
 80026a6:	e009      	b.n	80026bc <readMulti+0x72>
	{
		*(dst++) = WIRE_Read(tof->wire);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687c      	ldr	r4, [r7, #4]
 80026ae:	1c63      	adds	r3, r4, #1
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	4610      	mov	r0, r2
 80026b4:	f001 fc29 	bl	8003f0a <WIRE_Read>
 80026b8:	4603      	mov	r3, r0
 80026ba:	7023      	strb	r3, [r4, #0]
	while(count-- > 0)
 80026bc:	7abb      	ldrb	r3, [r7, #10]
 80026be:	1e5a      	subs	r2, r3, #1
 80026c0:	72ba      	strb	r2, [r7, #10]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <readMulti+0x5e>
	}
}
 80026c6:	bf00      	nop
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd90      	pop	{r4, r7, pc}

080026d0 <writeMulti>:

void writeMulti(VL53_t* tof, uint8_t reg, uint8_t const * src, uint8_t count)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	461a      	mov	r2, r3
 80026dc:	460b      	mov	r3, r1
 80026de:	72fb      	strb	r3, [r7, #11]
 80026e0:	4613      	mov	r3, r2
 80026e2:	72bb      	strb	r3, [r7, #10]
  WIRE_BeginTransmission(tof->wire, tof->address);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	791b      	ldrb	r3, [r3, #4]
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f001 fa19 	bl	8003b26 <WIRE_BeginTransmission>
  WIRE_WriteByte(tof->wire, reg);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	7afa      	ldrb	r2, [r7, #11]
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f001 fa3a 	bl	8003b76 <WIRE_WriteByte>

  while (count-- > 0)
 8002702:	e008      	b.n	8002716 <writeMulti+0x46>
  {
    WIRE_WriteByte(tof->wire, *(src++));
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4619      	mov	r1, r3
 8002712:	f001 fa30 	bl	8003b76 <WIRE_WriteByte>
  while (count-- > 0)
 8002716:	7abb      	ldrb	r3, [r7, #10]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	72ba      	strb	r2, [r7, #10]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f1      	bne.n	8002704 <writeMulti+0x34>
  }

  tof->lastStatus = WIRE_EndTransmission(tof->wire, true);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2101      	movs	r1, #1
 8002726:	4618      	mov	r0, r3
 8002728:	f001 fa4c 	bl	8003bc4 <WIRE_EndTransmission>
 800272c:	4603      	mov	r3, r0
 800272e:	461a      	mov	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	739a      	strb	r2, [r3, #14]
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <getSpadInfo>:
bool getSpadInfo(VL53_t* tof, uint8_t * count, bool * type_is_aperture)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint8_t tmp;

  writeReg(tof, 0x80, 0x01);
 8002748:	2201      	movs	r2, #1
 800274a:	2180      	movs	r1, #128	; 0x80
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff feda 	bl	8002506 <writeReg>
  writeReg(tof, 0xFF, 0x01);
 8002752:	2201      	movs	r2, #1
 8002754:	21ff      	movs	r1, #255	; 0xff
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fed5 	bl	8002506 <writeReg>
  writeReg(tof, 0x00, 0x00);
 800275c:	2200      	movs	r2, #0
 800275e:	2100      	movs	r1, #0
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f7ff fed0 	bl	8002506 <writeReg>

  writeReg(tof, 0xFF, 0x06);
 8002766:	2206      	movs	r2, #6
 8002768:	21ff      	movs	r1, #255	; 0xff
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f7ff fecb 	bl	8002506 <writeReg>
  writeReg(tof, 0x83, readReg(tof, 0x83) | 0x04);
 8002770:	2183      	movs	r1, #131	; 0x83
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f7ff fe96 	bl	80024a4 <readReg>
 8002778:	4603      	mov	r3, r0
 800277a:	f043 0304 	orr.w	r3, r3, #4
 800277e:	b2db      	uxtb	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	2183      	movs	r1, #131	; 0x83
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7ff febe 	bl	8002506 <writeReg>
  writeReg(tof, 0xFF, 0x07);
 800278a:	2207      	movs	r2, #7
 800278c:	21ff      	movs	r1, #255	; 0xff
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff feb9 	bl	8002506 <writeReg>
  writeReg(tof, 0x81, 0x01);
 8002794:	2201      	movs	r2, #1
 8002796:	2181      	movs	r1, #129	; 0x81
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff feb4 	bl	8002506 <writeReg>

  writeReg(tof, 0x80, 0x01);
 800279e:	2201      	movs	r2, #1
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f7ff feaf 	bl	8002506 <writeReg>

  writeReg(tof, 0x94, 0x6b);
 80027a8:	226b      	movs	r2, #107	; 0x6b
 80027aa:	2194      	movs	r1, #148	; 0x94
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff feaa 	bl	8002506 <writeReg>
  writeReg(tof, 0x83, 0x00);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2183      	movs	r1, #131	; 0x83
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f7ff fea5 	bl	8002506 <writeReg>
  startTimeout(tof);
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f7ff fe45 	bl	800244c <startTimeout>
  while (readReg(tof, 0x83) == 0x00)
 80027c2:	e007      	b.n	80027d4 <getSpadInfo+0x98>
  {
    if (checkTimeoutExpired(tof)) { return false; }
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff fe4f 	bl	8002468 <checkTimeoutExpired>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <getSpadInfo+0x98>
 80027d0:	2300      	movs	r3, #0
 80027d2:	e04f      	b.n	8002874 <getSpadInfo+0x138>
  while (readReg(tof, 0x83) == 0x00)
 80027d4:	2183      	movs	r1, #131	; 0x83
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff fe64 	bl	80024a4 <readReg>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <getSpadInfo+0x88>
  }
  writeReg(tof, 0x83, 0x01);
 80027e2:	2201      	movs	r2, #1
 80027e4:	2183      	movs	r1, #131	; 0x83
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f7ff fe8d 	bl	8002506 <writeReg>
  tmp = readReg(tof, 0x92);
 80027ec:	2192      	movs	r1, #146	; 0x92
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7ff fe58 	bl	80024a4 <readReg>
 80027f4:	4603      	mov	r3, r0
 80027f6:	75fb      	strb	r3, [r7, #23]

  *count = tmp & 0x7f;
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
 80027fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	09db      	lsrs	r3, r3, #7
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	bf14      	ite	ne
 8002812:	2301      	movne	r3, #1
 8002814:	2300      	moveq	r3, #0
 8002816:	b2da      	uxtb	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	701a      	strb	r2, [r3, #0]

  writeReg(tof, 0x81, 0x00);
 800281c:	2200      	movs	r2, #0
 800281e:	2181      	movs	r1, #129	; 0x81
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f7ff fe70 	bl	8002506 <writeReg>
  writeReg(tof, 0xFF, 0x06);
 8002826:	2206      	movs	r2, #6
 8002828:	21ff      	movs	r1, #255	; 0xff
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7ff fe6b 	bl	8002506 <writeReg>
  writeReg(tof, 0x83, readReg(tof, 0x83)  & ~0x04);
 8002830:	2183      	movs	r1, #131	; 0x83
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f7ff fe36 	bl	80024a4 <readReg>
 8002838:	4603      	mov	r3, r0
 800283a:	f023 0304 	bic.w	r3, r3, #4
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	2183      	movs	r1, #131	; 0x83
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7ff fe5e 	bl	8002506 <writeReg>
  writeReg(tof, 0xFF, 0x01);
 800284a:	2201      	movs	r2, #1
 800284c:	21ff      	movs	r1, #255	; 0xff
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff fe59 	bl	8002506 <writeReg>
  writeReg(tof, 0x00, 0x01);
 8002854:	2201      	movs	r2, #1
 8002856:	2100      	movs	r1, #0
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f7ff fe54 	bl	8002506 <writeReg>

  writeReg(tof, 0xFF, 0x00);
 800285e:	2200      	movs	r2, #0
 8002860:	21ff      	movs	r1, #255	; 0xff
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7ff fe4f 	bl	8002506 <writeReg>
  writeReg(tof, 0x80, 0x00);
 8002868:	2200      	movs	r2, #0
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff fe4a 	bl	8002506 <writeReg>

  return true;
 8002872:	2301      	movs	r3, #1
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(VL53_t* tof, SequenceStepEnables * enables)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint8_t sequence_config = readReg(tof, SYSTEM_SEQUENCE_CONFIG);
 8002886:	2101      	movs	r1, #1
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff fe0b 	bl	80024a4 <readReg>
 800288e:	4603      	mov	r3, r0
 8002890:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf14      	ite	ne
 80028a0:	2301      	movne	r3, #1
 80028a2:	2300      	moveq	r3, #0
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	08db      	lsrs	r3, r3, #3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf14      	ite	ne
 80028d0:	2301      	movne	r3, #1
 80028d2:	2300      	moveq	r3, #0
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	099b      	lsrs	r3, r3, #6
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf14      	ite	ne
 80028e8:	2301      	movne	r3, #1
 80028ea:	2300      	moveq	r3, #0
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	09db      	lsrs	r3, r3, #7
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2da      	uxtb	r2, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	711a      	strb	r2, [r3, #4]
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <decodeVcselPeriod>:


uint8_t decodeVcselPeriod(uint8_t reg_val)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	71fb      	strb	r3, [r7, #7]
	return ((reg_val + 1) << 1);
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	3301      	adds	r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	b2db      	uxtb	r3, r3
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <calcMacroPeriod>:

uint32_t calcMacroPeriod(uint8_t vcsel_period_pclks)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
	return ((((uint32_t)2304 * (vcsel_period_pclks) * 1655) + 500) / 1000);
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	4a06      	ldr	r2, [pc, #24]	; (8002958 <calcMacroPeriod+0x28>)
 800293e:	fb02 f303 	mul.w	r3, r2, r3
 8002942:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <calcMacroPeriod+0x2c>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	099b      	lsrs	r3, r3, #6
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	003a2f00 	.word	0x003a2f00
 800295c:	10624dd3 	.word	0x10624dd3

08002960 <timeoutMclksToMicroseconds>:
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	460a      	mov	r2, r1
 800296a:	80fb      	strh	r3, [r7, #6]
 800296c:	4613      	mov	r3, r2
 800296e:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002970:	797b      	ldrb	r3, [r7, #5]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff ffdc 	bl	8002930 <calcMacroPeriod>
 8002978:	60f8      	str	r0, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002986:	4a04      	ldr	r2, [pc, #16]	; (8002998 <timeoutMclksToMicroseconds+0x38>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	099b      	lsrs	r3, r3, #6
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	10624dd3 	.word	0x10624dd3

0800299c <getVcselPulsePeriod>:

uint8_t getVcselPulsePeriod(VL53_t* tof, vcselPeriodType type)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	70fb      	strb	r3, [r7, #3]
  if (type == VcselPeriodPreRange)
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <getVcselPulsePeriod+0x26>
  {
    return decodeVcselPeriod(readReg(tof, PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80029ae:	2150      	movs	r1, #80	; 0x50
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff fd77 	bl	80024a4 <readReg>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ffaa 	bl	8002912 <decodeVcselPeriod>
 80029be:	4603      	mov	r3, r0
 80029c0:	e00d      	b.n	80029de <getVcselPulsePeriod+0x42>
  }
  else if (type == VcselPeriodFinalRange)
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d109      	bne.n	80029dc <getVcselPulsePeriod+0x40>
  {
    return decodeVcselPeriod(readReg(tof, FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80029c8:	2170      	movs	r1, #112	; 0x70
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fd6a 	bl	80024a4 <readReg>
 80029d0:	4603      	mov	r3, r0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff9d 	bl	8002912 <decodeVcselPeriod>
 80029d8:	4603      	mov	r3, r0
 80029da:	e000      	b.n	80029de <getVcselPulsePeriod+0x42>
  }
  else { return 255; }
 80029dc:	23ff      	movs	r3, #255	; 0xff
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <decodeTimeout>:

uint16_t decodeTimeout(uint16_t reg_val)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80029f4:	88fa      	ldrh	r2, [r7, #6]
 80029f6:	0a12      	lsrs	r2, r2, #8
 80029f8:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 80029fa:	4093      	lsls	r3, r2
 80029fc:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80029fe:	3301      	adds	r3, #1
 8002a00:	b29b      	uxth	r3, r3
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(VL53_t* tof, SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(tof, VcselPeriodPreRange);
 8002a18:	2100      	movs	r1, #0
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f7ff ffbe 	bl	800299c <getVcselPulsePeriod>
 8002a20:	4603      	mov	r3, r0
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(tof, MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8002a28:	2146      	movs	r1, #70	; 0x46
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff fd3a 	bl	80024a4 <readReg>
 8002a30:	4603      	mov	r3, r0
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3301      	adds	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	4619      	mov	r1, r3
 8002a48:	4610      	mov	r0, r2
 8002a4a:	f7ff ff89 	bl	8002960 <timeoutMclksToMicroseconds>
 8002a4e:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(tof, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8002a54:	2151      	movs	r1, #81	; 0x51
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f7ff fd81 	bl	800255e <readReg16Bit>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ffc1 	bl	80029e6 <decodeTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f7ff ff71 	bl	8002960 <timeoutMclksToMicroseconds>
 8002a7e:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(tof, VcselPeriodFinalRange);
 8002a84:	2101      	movs	r1, #1
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7ff ff88 	bl	800299c <getVcselPulsePeriod>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(tof, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8002a94:	2171      	movs	r1, #113	; 0x71
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff fd61 	bl	800255e <readReg16Bit>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ffa1 	bl	80029e6 <decodeTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	78db      	ldrb	r3, [r3, #3]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d007      	beq.n	8002ac4 <getSequenceStepTimeouts+0xb8>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	891a      	ldrh	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	88db      	ldrh	r3, [r3, #6]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	f7ff ff45 	bl	8002960 <timeoutMclksToMicroseconds>
 8002ad6:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	615a      	str	r2, [r3, #20]
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <timeoutMicrosecondsToMclks>:

uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff1c 	bl	8002930 <calcMacroPeriod>
 8002af8:	60f8      	str	r0, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b00:	fb02 f203 	mul.w	r2, r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	441a      	add	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <encodeTimeout>:

uint16_t encodeTimeout(uint32_t timeout_mclks)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d018      	beq.n	8002b60 <encodeTimeout+0x48>
  {
    ls_byte = timeout_mclks - 1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8002b34:	e005      	b.n	8002b42 <encodeTimeout+0x2a>
    {
      ls_byte >>= 1;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8002b3c:	897b      	ldrh	r3, [r7, #10]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f4      	bne.n	8002b36 <encodeTimeout+0x1e>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8002b4c:	897b      	ldrh	r3, [r7, #10]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	e000      	b.n	8002b62 <encodeTimeout+0x4a>
  }
  else { return 0; }
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <getMeasurementTimingBudget>:

uint32_t getMeasurementTimingBudget(VL53_t* tof)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08e      	sub	sp, #56	; 0x38
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910;
 8002b74:	f240 7376 	movw	r3, #1910	; 0x776
 8002b78:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const EndOverhead        = 960;
 8002b7a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002b7e:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const MsrcOverhead       = 660;
 8002b80:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002b84:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const TccOverhead        = 590;
 8002b86:	f240 234e 	movw	r3, #590	; 0x24e
 8002b8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t const DssOverhead        = 690;
 8002b8c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002b90:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const PreRangeOverhead   = 660;
 8002b92:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002b96:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const FinalRangeOverhead = 550;
 8002b98:	f240 2326 	movw	r3, #550	; 0x226
 8002b9c:	84fb      	strh	r3, [r7, #38]	; 0x26

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8002b9e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002ba0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ba2:	4413      	add	r3, r2
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34

  getSequenceStepEnables(tof, &enables);
 8002ba6:	f107 0320 	add.w	r3, r7, #32
 8002baa:	4619      	mov	r1, r3
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fe65 	bl	800287c <getSequenceStepEnables>
  getSequenceStepTimeouts(tof, &enables, &timeouts);
 8002bb2:	f107 0208 	add.w	r2, r7, #8
 8002bb6:	f107 0320 	add.w	r3, r7, #32
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff25 	bl	8002a0c <getSequenceStepTimeouts>

  if (enables.tcc)
 8002bc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <getMeasurementTimingBudget+0x6a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002bce:	4413      	add	r3, r2
 8002bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd2:	4413      	add	r3, r2
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.dss)
 8002bd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <getMeasurementTimingBudget+0x82>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002be2:	4413      	add	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002be8:	4413      	add	r3, r2
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
 8002bec:	e009      	b.n	8002c02 <getMeasurementTimingBudget+0x96>
  }
  else if (enables.msrc)
 8002bee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <getMeasurementTimingBudget+0x96>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bfa:	4413      	add	r3, r2
 8002bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bfe:	4413      	add	r3, r2
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.pre_range)
 8002c02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c0e:	4413      	add	r3, r2
 8002c10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c12:	4413      	add	r3, r2
 8002c14:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.final_range)
 8002c16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c22:	4413      	add	r3, r2
 8002c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c26:	4413      	add	r3, r2
 8002c28:	637b      	str	r3, [r7, #52]	; 0x34
  }

  tof->measurement_timing_budget_us = budget_us; // store for internal reuse
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c2e:	619a      	str	r2, [r3, #24]
  return budget_us;
 8002c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3738      	adds	r7, #56	; 0x38
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <performSingleRefCalibration>:
{
	return (period_pclks >> 1) -1;
}

bool performSingleRefCalibration(VL53_t* tof, uint8_t vhv_init_byte)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	70fb      	strb	r3, [r7, #3]
  writeReg(tof, SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	2100      	movs	r1, #0
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff fc57 	bl	8002506 <writeReg>

  startTimeout(tof);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff fbf7 	bl	800244c <startTimeout>
  while ((readReg(tof, RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002c5e:	bf00      	nop
 8002c60:	2113      	movs	r1, #19
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff fc1e 	bl	80024a4 <readReg>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f6      	beq.n	8002c60 <performSingleRefCalibration+0x26>
  {
//    if (checkTimeoutExpired(tof)) { return false; }
  }

  writeReg(tof, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002c72:	2201      	movs	r2, #1
 8002c74:	210b      	movs	r1, #11
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff fc45 	bl	8002506 <writeReg>

  writeReg(tof, SYSRANGE_START, 0x00);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2100      	movs	r1, #0
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff fc40 	bl	8002506 <writeReg>

  return true;
 8002c86:	2301      	movs	r3, #1
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <readRangeContinuousMillimeters>:

uint16_t readRangeContinuousMillimeters(VL53_t* tof)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  startTimeout(tof);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff fbd7 	bl	800244c <startTimeout>
  while ((readReg(tof, RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002c9e:	e00b      	b.n	8002cb8 <readRangeContinuousMillimeters+0x28>
  {
    if (checkTimeoutExpired(tof))
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff fbe1 	bl	8002468 <checkTimeoutExpired>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <readRangeContinuousMillimeters+0x28>
    {
      tof->did_timeout = true;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	749a      	strb	r2, [r3, #18]
      return 65535;
 8002cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cb6:	e014      	b.n	8002ce2 <readRangeContinuousMillimeters+0x52>
  while ((readReg(tof, RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002cb8:	2113      	movs	r1, #19
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fbf2 	bl	80024a4 <readReg>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0ea      	beq.n	8002ca0 <readRangeContinuousMillimeters+0x10>
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(tof, RESULT_RANGE_STATUS + 10);
 8002cca:	211e      	movs	r1, #30
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff fc46 	bl	800255e <readReg16Bit>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	81fb      	strh	r3, [r7, #14]

  writeReg(tof, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	210b      	movs	r1, #11
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff fc13 	bl	8002506 <writeReg>

  return range;
 8002ce0:	89fb      	ldrh	r3, [r7, #14]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <VL53_Init>:

bool VL53_Init(VL53_t* tof, WIRE_t* wire, uint8_t address, GPIO_TypeDef* xsGPIO, uint16_t xsPIN)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b088      	sub	sp, #32
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	71fb      	strb	r3, [r7, #7]
	tof->wire = wire;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	601a      	str	r2, [r3, #0]
	tof->address = address;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	79fa      	ldrb	r2, [r7, #7]
 8002d04:	711a      	strb	r2, [r3, #4]
	tof->xsGPIO = xsGPIO;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	609a      	str	r2, [r3, #8]
	tof->xsPIN = xsPIN;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d10:	819a      	strh	r2, [r3, #12]
	tof->io_timeout = 0;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	821a      	strh	r2, [r3, #16]
	tof->did_timeout = false;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	749a      	strb	r2, [r3, #18]

	if(readReg(tof, IDENTIFICATION_MODEL_ID) != 0xEE)
 8002d1e:	21c0      	movs	r1, #192	; 0xc0
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7ff fbbf 	bl	80024a4 <readReg>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2bee      	cmp	r3, #238	; 0xee
 8002d2a:	d001      	beq.n	8002d30 <VL53_Init+0x46>
	{
		return false;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e2a4      	b.n	800327a <VL53_Init+0x590>
	}

//	writeReg(tof, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, readReg(tof, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01);

	  // "Set I2C standard mode"
	  writeReg(tof, 0x88, 0x00);
 8002d30:	2200      	movs	r2, #0
 8002d32:	2188      	movs	r1, #136	; 0x88
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7ff fbe6 	bl	8002506 <writeReg>

	  writeReg(tof, 0x80, 0x01);
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f7ff fbe1 	bl	8002506 <writeReg>
	  writeReg(tof, 0xFF, 0x01);
 8002d44:	2201      	movs	r2, #1
 8002d46:	21ff      	movs	r1, #255	; 0xff
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff fbdc 	bl	8002506 <writeReg>
	  writeReg(tof, 0x00, 0x00);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7ff fbd7 	bl	8002506 <writeReg>
	  tof->stopVariable = readReg(tof, 0x91);
 8002d58:	2191      	movs	r1, #145	; 0x91
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7ff fba2 	bl	80024a4 <readReg>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	73da      	strb	r2, [r3, #15]
	  writeReg(tof, 0x00, 0x01);
 8002d68:	2201      	movs	r2, #1
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f7ff fbca 	bl	8002506 <writeReg>
	  writeReg(tof, 0xFF, 0x00);
 8002d72:	2200      	movs	r2, #0
 8002d74:	21ff      	movs	r1, #255	; 0xff
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f7ff fbc5 	bl	8002506 <writeReg>
	  writeReg(tof, 0x80, 0x00);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2180      	movs	r1, #128	; 0x80
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7ff fbc0 	bl	8002506 <writeReg>

	  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
	  writeReg(tof, MSRC_CONFIG_CONTROL, readReg(tof, MSRC_CONFIG_CONTROL) | 0x12);
 8002d86:	2160      	movs	r1, #96	; 0x60
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7ff fb8b 	bl	80024a4 <readReg>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f043 0312 	orr.w	r3, r3, #18
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	2160      	movs	r1, #96	; 0x60
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f7ff fbb3 	bl	8002506 <writeReg>

	  VL53_SetSignalRateLimit(tof, 0.25);
 8002da0:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fa7b 	bl	80032a0 <VL53_SetSignalRateLimit>

	  writeReg(tof, SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8002daa:	22ff      	movs	r2, #255	; 0xff
 8002dac:	2101      	movs	r1, #1
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f7ff fba9 	bl	8002506 <writeReg>

	  uint8_t spad_count;
	  bool spad_type_is_aperture;
	  if (!getSpadInfo(tof, &spad_count, &spad_type_is_aperture)) { return false; }
 8002db4:	f107 021b 	add.w	r2, r7, #27
 8002db8:	f107 031c 	add.w	r3, r7, #28
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff fcbc 	bl	800273c <getSpadInfo>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f083 0301 	eor.w	r3, r3, #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <VL53_Init+0xea>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e252      	b.n	800327a <VL53_Init+0x590>

	  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
	  // the API, but the same data seems to be more easily readable from
	  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
	  uint8_t ref_spad_map[6];
	  readMulti(tof, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002dd4:	f107 0214 	add.w	r2, r7, #20
 8002dd8:	2306      	movs	r3, #6
 8002dda:	21b0      	movs	r1, #176	; 0xb0
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f7ff fc34 	bl	800264a <readMulti>

	  writeReg(tof, 0xFF, 0x01);
 8002de2:	2201      	movs	r2, #1
 8002de4:	21ff      	movs	r1, #255	; 0xff
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff fb8d 	bl	8002506 <writeReg>
	  writeReg(tof, DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8002dec:	2200      	movs	r2, #0
 8002dee:	214f      	movs	r1, #79	; 0x4f
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff fb88 	bl	8002506 <writeReg>
	  writeReg(tof, DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8002df6:	222c      	movs	r2, #44	; 0x2c
 8002df8:	214e      	movs	r1, #78	; 0x4e
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f7ff fb83 	bl	8002506 <writeReg>
	  writeReg(tof, 0xFF, 0x00);
 8002e00:	2200      	movs	r2, #0
 8002e02:	21ff      	movs	r1, #255	; 0xff
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f7ff fb7e 	bl	8002506 <writeReg>
	  writeReg(tof, GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8002e0a:	22b4      	movs	r2, #180	; 0xb4
 8002e0c:	21b6      	movs	r1, #182	; 0xb6
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7ff fb79 	bl	8002506 <writeReg>

	  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8002e14:	7efb      	ldrb	r3, [r7, #27]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <VL53_Init+0x134>
 8002e1a:	230c      	movs	r3, #12
 8002e1c:	e000      	b.n	8002e20 <VL53_Init+0x136>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	777b      	strb	r3, [r7, #29]
	  uint8_t spads_enabled = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	77fb      	strb	r3, [r7, #31]

	  for (uint8_t i = 0; i < 48; i++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	77bb      	strb	r3, [r7, #30]
 8002e2a:	e03c      	b.n	8002ea6 <VL53_Init+0x1bc>
	  {
	    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8002e2c:	7fba      	ldrb	r2, [r7, #30]
 8002e2e:	7f7b      	ldrb	r3, [r7, #29]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d303      	bcc.n	8002e3c <VL53_Init+0x152>
 8002e34:	7f3b      	ldrb	r3, [r7, #28]
 8002e36:	7ffa      	ldrb	r2, [r7, #31]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d11c      	bne.n	8002e76 <VL53_Init+0x18c>
	    {
	      // This bit is lower than the first one that should be enabled, or
	      // (reference_spad_count) bits have already been enabled, so zero this bit
	      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8002e3c:	7fbb      	ldrb	r3, [r7, #30]
 8002e3e:	08db      	lsrs	r3, r3, #3
 8002e40:	b2d8      	uxtb	r0, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	f107 0220 	add.w	r2, r7, #32
 8002e48:	4413      	add	r3, r2
 8002e4a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e4e:	b25a      	sxtb	r2, r3
 8002e50:	7fbb      	ldrb	r3, [r7, #30]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	2101      	movs	r1, #1
 8002e58:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5c:	b25b      	sxtb	r3, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	b25b      	sxtb	r3, r3
 8002e62:	4013      	ands	r3, r2
 8002e64:	b25a      	sxtb	r2, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	f107 0120 	add.w	r1, r7, #32
 8002e6e:	440b      	add	r3, r1
 8002e70:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8002e74:	e014      	b.n	8002ea0 <VL53_Init+0x1b6>
	    }
	    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8002e76:	7fbb      	ldrb	r3, [r7, #30]
 8002e78:	08db      	lsrs	r3, r3, #3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f107 0220 	add.w	r2, r7, #32
 8002e80:	4413      	add	r3, r2
 8002e82:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002e86:	461a      	mov	r2, r3
 8002e88:	7fbb      	ldrb	r3, [r7, #30]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	fa42 f303 	asr.w	r3, r2, r3
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <VL53_Init+0x1b6>
	    {
	      spads_enabled++;
 8002e9a:	7ffb      	ldrb	r3, [r7, #31]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	77fb      	strb	r3, [r7, #31]
	  for (uint8_t i = 0; i < 48; i++)
 8002ea0:	7fbb      	ldrb	r3, [r7, #30]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	77bb      	strb	r3, [r7, #30]
 8002ea6:	7fbb      	ldrb	r3, [r7, #30]
 8002ea8:	2b2f      	cmp	r3, #47	; 0x2f
 8002eaa:	d9bf      	bls.n	8002e2c <VL53_Init+0x142>
	    }
	  }

	  writeMulti(tof, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002eac:	f107 0214 	add.w	r2, r7, #20
 8002eb0:	2306      	movs	r3, #6
 8002eb2:	21b0      	movs	r1, #176	; 0xb0
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f7ff fc0b 	bl	80026d0 <writeMulti>

	  writeReg(tof, 0xFF, 0x01);
 8002eba:	2201      	movs	r2, #1
 8002ebc:	21ff      	movs	r1, #255	; 0xff
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff fb21 	bl	8002506 <writeReg>
	  writeReg(tof, 0x00, 0x00);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff fb1c 	bl	8002506 <writeReg>

	  writeReg(tof, 0xFF, 0x00);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	21ff      	movs	r1, #255	; 0xff
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f7ff fb17 	bl	8002506 <writeReg>
	  writeReg(tof, 0x09, 0x00);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2109      	movs	r1, #9
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f7ff fb12 	bl	8002506 <writeReg>
	  writeReg(tof, 0x10, 0x00);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2110      	movs	r1, #16
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff fb0d 	bl	8002506 <writeReg>
	  writeReg(tof, 0x11, 0x00);
 8002eec:	2200      	movs	r2, #0
 8002eee:	2111      	movs	r1, #17
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7ff fb08 	bl	8002506 <writeReg>

	  writeReg(tof, 0x24, 0x01);
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	2124      	movs	r1, #36	; 0x24
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff fb03 	bl	8002506 <writeReg>
	  writeReg(tof, 0x25, 0xFF);
 8002f00:	22ff      	movs	r2, #255	; 0xff
 8002f02:	2125      	movs	r1, #37	; 0x25
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff fafe 	bl	8002506 <writeReg>
	  writeReg(tof, 0x75, 0x00);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2175      	movs	r1, #117	; 0x75
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f7ff faf9 	bl	8002506 <writeReg>

	  writeReg(tof, 0xFF, 0x01);
 8002f14:	2201      	movs	r2, #1
 8002f16:	21ff      	movs	r1, #255	; 0xff
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f7ff faf4 	bl	8002506 <writeReg>
	  writeReg(tof, 0x4E, 0x2C);
 8002f1e:	222c      	movs	r2, #44	; 0x2c
 8002f20:	214e      	movs	r1, #78	; 0x4e
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7ff faef 	bl	8002506 <writeReg>
	  writeReg(tof, 0x48, 0x00);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2148      	movs	r1, #72	; 0x48
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff faea 	bl	8002506 <writeReg>
	  writeReg(tof, 0x30, 0x20);
 8002f32:	2220      	movs	r2, #32
 8002f34:	2130      	movs	r1, #48	; 0x30
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff fae5 	bl	8002506 <writeReg>

	  writeReg(tof, 0xFF, 0x00);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	21ff      	movs	r1, #255	; 0xff
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f7ff fae0 	bl	8002506 <writeReg>
	  writeReg(tof, 0x30, 0x09);
 8002f46:	2209      	movs	r2, #9
 8002f48:	2130      	movs	r1, #48	; 0x30
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f7ff fadb 	bl	8002506 <writeReg>
	  writeReg(tof, 0x54, 0x00);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2154      	movs	r1, #84	; 0x54
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7ff fad6 	bl	8002506 <writeReg>
	  writeReg(tof, 0x31, 0x04);
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	2131      	movs	r1, #49	; 0x31
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff fad1 	bl	8002506 <writeReg>
	  writeReg(tof, 0x32, 0x03);
 8002f64:	2203      	movs	r2, #3
 8002f66:	2132      	movs	r1, #50	; 0x32
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7ff facc 	bl	8002506 <writeReg>
	  writeReg(tof, 0x40, 0x83);
 8002f6e:	2283      	movs	r2, #131	; 0x83
 8002f70:	2140      	movs	r1, #64	; 0x40
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f7ff fac7 	bl	8002506 <writeReg>
	  writeReg(tof, 0x46, 0x25);
 8002f78:	2225      	movs	r2, #37	; 0x25
 8002f7a:	2146      	movs	r1, #70	; 0x46
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff fac2 	bl	8002506 <writeReg>
	  writeReg(tof, 0x60, 0x00);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2160      	movs	r1, #96	; 0x60
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f7ff fabd 	bl	8002506 <writeReg>
	  writeReg(tof, 0x27, 0x00);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2127      	movs	r1, #39	; 0x27
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff fab8 	bl	8002506 <writeReg>
	  writeReg(tof, 0x50, 0x06);
 8002f96:	2206      	movs	r2, #6
 8002f98:	2150      	movs	r1, #80	; 0x50
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7ff fab3 	bl	8002506 <writeReg>
	  writeReg(tof, 0x51, 0x00);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2151      	movs	r1, #81	; 0x51
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7ff faae 	bl	8002506 <writeReg>
	  writeReg(tof, 0x52, 0x96);
 8002faa:	2296      	movs	r2, #150	; 0x96
 8002fac:	2152      	movs	r1, #82	; 0x52
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f7ff faa9 	bl	8002506 <writeReg>
	  writeReg(tof, 0x56, 0x08);
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	2156      	movs	r1, #86	; 0x56
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f7ff faa4 	bl	8002506 <writeReg>
	  writeReg(tof, 0x57, 0x30);
 8002fbe:	2230      	movs	r2, #48	; 0x30
 8002fc0:	2157      	movs	r1, #87	; 0x57
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff fa9f 	bl	8002506 <writeReg>
	  writeReg(tof, 0x61, 0x00);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2161      	movs	r1, #97	; 0x61
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f7ff fa9a 	bl	8002506 <writeReg>
	  writeReg(tof, 0x62, 0x00);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2162      	movs	r1, #98	; 0x62
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff fa95 	bl	8002506 <writeReg>
	  writeReg(tof, 0x64, 0x00);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2164      	movs	r1, #100	; 0x64
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f7ff fa90 	bl	8002506 <writeReg>
	  writeReg(tof, 0x65, 0x00);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2165      	movs	r1, #101	; 0x65
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff fa8b 	bl	8002506 <writeReg>
	  writeReg(tof, 0x66, 0xA0);
 8002ff0:	22a0      	movs	r2, #160	; 0xa0
 8002ff2:	2166      	movs	r1, #102	; 0x66
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f7ff fa86 	bl	8002506 <writeReg>

	  writeReg(tof, 0xFF, 0x01);
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	21ff      	movs	r1, #255	; 0xff
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f7ff fa81 	bl	8002506 <writeReg>
	  writeReg(tof, 0x22, 0x32);
 8003004:	2232      	movs	r2, #50	; 0x32
 8003006:	2122      	movs	r1, #34	; 0x22
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f7ff fa7c 	bl	8002506 <writeReg>
	  writeReg(tof, 0x47, 0x14);
 800300e:	2214      	movs	r2, #20
 8003010:	2147      	movs	r1, #71	; 0x47
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7ff fa77 	bl	8002506 <writeReg>
	  writeReg(tof, 0x49, 0xFF);
 8003018:	22ff      	movs	r2, #255	; 0xff
 800301a:	2149      	movs	r1, #73	; 0x49
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7ff fa72 	bl	8002506 <writeReg>
	  writeReg(tof, 0x4A, 0x00);
 8003022:	2200      	movs	r2, #0
 8003024:	214a      	movs	r1, #74	; 0x4a
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f7ff fa6d 	bl	8002506 <writeReg>

	  writeReg(tof, 0xFF, 0x00);
 800302c:	2200      	movs	r2, #0
 800302e:	21ff      	movs	r1, #255	; 0xff
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7ff fa68 	bl	8002506 <writeReg>
	  writeReg(tof, 0x7A, 0x0A);
 8003036:	220a      	movs	r2, #10
 8003038:	217a      	movs	r1, #122	; 0x7a
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f7ff fa63 	bl	8002506 <writeReg>
	  writeReg(tof, 0x7B, 0x00);
 8003040:	2200      	movs	r2, #0
 8003042:	217b      	movs	r1, #123	; 0x7b
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff fa5e 	bl	8002506 <writeReg>
	  writeReg(tof, 0x78, 0x21);
 800304a:	2221      	movs	r2, #33	; 0x21
 800304c:	2178      	movs	r1, #120	; 0x78
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f7ff fa59 	bl	8002506 <writeReg>

	  writeReg(tof, 0xFF, 0x01);
 8003054:	2201      	movs	r2, #1
 8003056:	21ff      	movs	r1, #255	; 0xff
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f7ff fa54 	bl	8002506 <writeReg>
	  writeReg(tof, 0x23, 0x34);
 800305e:	2234      	movs	r2, #52	; 0x34
 8003060:	2123      	movs	r1, #35	; 0x23
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff fa4f 	bl	8002506 <writeReg>
	  writeReg(tof, 0x42, 0x00);
 8003068:	2200      	movs	r2, #0
 800306a:	2142      	movs	r1, #66	; 0x42
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff fa4a 	bl	8002506 <writeReg>
	  writeReg(tof, 0x44, 0xFF);
 8003072:	22ff      	movs	r2, #255	; 0xff
 8003074:	2144      	movs	r1, #68	; 0x44
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f7ff fa45 	bl	8002506 <writeReg>
	  writeReg(tof, 0x45, 0x26);
 800307c:	2226      	movs	r2, #38	; 0x26
 800307e:	2145      	movs	r1, #69	; 0x45
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7ff fa40 	bl	8002506 <writeReg>
	  writeReg(tof, 0x46, 0x05);
 8003086:	2205      	movs	r2, #5
 8003088:	2146      	movs	r1, #70	; 0x46
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff fa3b 	bl	8002506 <writeReg>
	  writeReg(tof, 0x40, 0x40);
 8003090:	2240      	movs	r2, #64	; 0x40
 8003092:	2140      	movs	r1, #64	; 0x40
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7ff fa36 	bl	8002506 <writeReg>
	  writeReg(tof, 0x0E, 0x06);
 800309a:	2206      	movs	r2, #6
 800309c:	210e      	movs	r1, #14
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f7ff fa31 	bl	8002506 <writeReg>
	  writeReg(tof, 0x20, 0x1A);
 80030a4:	221a      	movs	r2, #26
 80030a6:	2120      	movs	r1, #32
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7ff fa2c 	bl	8002506 <writeReg>
	  writeReg(tof, 0x43, 0x40);
 80030ae:	2240      	movs	r2, #64	; 0x40
 80030b0:	2143      	movs	r1, #67	; 0x43
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f7ff fa27 	bl	8002506 <writeReg>

	  writeReg(tof, 0xFF, 0x00);
 80030b8:	2200      	movs	r2, #0
 80030ba:	21ff      	movs	r1, #255	; 0xff
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f7ff fa22 	bl	8002506 <writeReg>
	  writeReg(tof, 0x34, 0x03);
 80030c2:	2203      	movs	r2, #3
 80030c4:	2134      	movs	r1, #52	; 0x34
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f7ff fa1d 	bl	8002506 <writeReg>
	  writeReg(tof, 0x35, 0x44);
 80030cc:	2244      	movs	r2, #68	; 0x44
 80030ce:	2135      	movs	r1, #53	; 0x35
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7ff fa18 	bl	8002506 <writeReg>

	  writeReg(tof, 0xFF, 0x01);
 80030d6:	2201      	movs	r2, #1
 80030d8:	21ff      	movs	r1, #255	; 0xff
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7ff fa13 	bl	8002506 <writeReg>
	  writeReg(tof, 0x31, 0x04);
 80030e0:	2204      	movs	r2, #4
 80030e2:	2131      	movs	r1, #49	; 0x31
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7ff fa0e 	bl	8002506 <writeReg>
	  writeReg(tof, 0x4B, 0x09);
 80030ea:	2209      	movs	r2, #9
 80030ec:	214b      	movs	r1, #75	; 0x4b
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f7ff fa09 	bl	8002506 <writeReg>
	  writeReg(tof, 0x4C, 0x05);
 80030f4:	2205      	movs	r2, #5
 80030f6:	214c      	movs	r1, #76	; 0x4c
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff fa04 	bl	8002506 <writeReg>
	  writeReg(tof, 0x4D, 0x04);
 80030fe:	2204      	movs	r2, #4
 8003100:	214d      	movs	r1, #77	; 0x4d
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7ff f9ff 	bl	8002506 <writeReg>

	  writeReg(tof, 0xFF, 0x00);
 8003108:	2200      	movs	r2, #0
 800310a:	21ff      	movs	r1, #255	; 0xff
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7ff f9fa 	bl	8002506 <writeReg>
	  writeReg(tof, 0x44, 0x00);
 8003112:	2200      	movs	r2, #0
 8003114:	2144      	movs	r1, #68	; 0x44
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff f9f5 	bl	8002506 <writeReg>
	  writeReg(tof, 0x45, 0x20);
 800311c:	2220      	movs	r2, #32
 800311e:	2145      	movs	r1, #69	; 0x45
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f7ff f9f0 	bl	8002506 <writeReg>
	  writeReg(tof, 0x47, 0x08);
 8003126:	2208      	movs	r2, #8
 8003128:	2147      	movs	r1, #71	; 0x47
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff f9eb 	bl	8002506 <writeReg>
	  writeReg(tof, 0x48, 0x28);
 8003130:	2228      	movs	r2, #40	; 0x28
 8003132:	2148      	movs	r1, #72	; 0x48
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7ff f9e6 	bl	8002506 <writeReg>
	  writeReg(tof, 0x67, 0x00);
 800313a:	2200      	movs	r2, #0
 800313c:	2167      	movs	r1, #103	; 0x67
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f7ff f9e1 	bl	8002506 <writeReg>
	  writeReg(tof, 0x70, 0x04);
 8003144:	2204      	movs	r2, #4
 8003146:	2170      	movs	r1, #112	; 0x70
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7ff f9dc 	bl	8002506 <writeReg>
	  writeReg(tof, 0x71, 0x01);
 800314e:	2201      	movs	r2, #1
 8003150:	2171      	movs	r1, #113	; 0x71
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff f9d7 	bl	8002506 <writeReg>
	  writeReg(tof, 0x72, 0xFE);
 8003158:	22fe      	movs	r2, #254	; 0xfe
 800315a:	2172      	movs	r1, #114	; 0x72
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff f9d2 	bl	8002506 <writeReg>
	  writeReg(tof, 0x76, 0x00);
 8003162:	2200      	movs	r2, #0
 8003164:	2176      	movs	r1, #118	; 0x76
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f7ff f9cd 	bl	8002506 <writeReg>
	  writeReg(tof, 0x77, 0x00);
 800316c:	2200      	movs	r2, #0
 800316e:	2177      	movs	r1, #119	; 0x77
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7ff f9c8 	bl	8002506 <writeReg>

	  writeReg(tof, 0xFF, 0x01);
 8003176:	2201      	movs	r2, #1
 8003178:	21ff      	movs	r1, #255	; 0xff
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7ff f9c3 	bl	8002506 <writeReg>
	  writeReg(tof, 0x0D, 0x01);
 8003180:	2201      	movs	r2, #1
 8003182:	210d      	movs	r1, #13
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f7ff f9be 	bl	8002506 <writeReg>

	  writeReg(tof, 0xFF, 0x00);
 800318a:	2200      	movs	r2, #0
 800318c:	21ff      	movs	r1, #255	; 0xff
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7ff f9b9 	bl	8002506 <writeReg>
	  writeReg(tof, 0x80, 0x01);
 8003194:	2201      	movs	r2, #1
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff f9b4 	bl	8002506 <writeReg>
	  writeReg(tof, 0x01, 0xF8);
 800319e:	22f8      	movs	r2, #248	; 0xf8
 80031a0:	2101      	movs	r1, #1
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f7ff f9af 	bl	8002506 <writeReg>

	  writeReg(tof, 0xFF, 0x01);
 80031a8:	2201      	movs	r2, #1
 80031aa:	21ff      	movs	r1, #255	; 0xff
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7ff f9aa 	bl	8002506 <writeReg>
	  writeReg(tof, 0x8E, 0x01);
 80031b2:	2201      	movs	r2, #1
 80031b4:	218e      	movs	r1, #142	; 0x8e
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7ff f9a5 	bl	8002506 <writeReg>
	  writeReg(tof, 0x00, 0x01);
 80031bc:	2201      	movs	r2, #1
 80031be:	2100      	movs	r1, #0
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f7ff f9a0 	bl	8002506 <writeReg>
	  writeReg(tof, 0xFF, 0x00);
 80031c6:	2200      	movs	r2, #0
 80031c8:	21ff      	movs	r1, #255	; 0xff
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f7ff f99b 	bl	8002506 <writeReg>
	  writeReg(tof, 0x80, 0x00);
 80031d0:	2200      	movs	r2, #0
 80031d2:	2180      	movs	r1, #128	; 0x80
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f7ff f996 	bl	8002506 <writeReg>
	  // -- VL53L0X_load_tuning_settings() end

	  // "Set interrupt config to new sample ready"
	  // -- VL53L0X_SetGpioConfig() begin

	  writeReg(tof, SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80031da:	2204      	movs	r2, #4
 80031dc:	210a      	movs	r1, #10
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f7ff f991 	bl	8002506 <writeReg>
	  writeReg(tof, GPIO_HV_MUX_ACTIVE_HIGH, readReg(tof, GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80031e4:	2184      	movs	r1, #132	; 0x84
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff f95c 	bl	80024a4 <readReg>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f023 0310 	bic.w	r3, r3, #16
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	2184      	movs	r1, #132	; 0x84
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f7ff f984 	bl	8002506 <writeReg>
	  writeReg(tof, SYSTEM_INTERRUPT_CLEAR, 0x01);
 80031fe:	2201      	movs	r2, #1
 8003200:	210b      	movs	r1, #11
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f7ff f97f 	bl	8002506 <writeReg>

	  tof->measurement_timing_budget_us = getMeasurementTimingBudget(tof);
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff fcaf 	bl	8002b6c <getMeasurementTimingBudget>
 800320e:	4602      	mov	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	619a      	str	r2, [r3, #24]

	  writeReg(tof, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8003214:	22e8      	movs	r2, #232	; 0xe8
 8003216:	2101      	movs	r1, #1
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f7ff f974 	bl	8002506 <writeReg>

	  // "Recalculate timing budget"
	  VL53_SetMeasurementTimingBudget(tof, tof->measurement_timing_budget_us);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	4619      	mov	r1, r3
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f86f 	bl	8003308 <VL53_SetMeasurementTimingBudget>

	  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

	  // -- VL53L0X_perform_vhv_calibration() begin

	  writeReg(tof, SYSTEM_SEQUENCE_CONFIG, 0x01);
 800322a:	2201      	movs	r2, #1
 800322c:	2101      	movs	r1, #1
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f7ff f969 	bl	8002506 <writeReg>
	  if (!performSingleRefCalibration(tof, 0x40)) { return false; }
 8003234:	2140      	movs	r1, #64	; 0x40
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff fcff 	bl	8002c3a <performSingleRefCalibration>
 800323c:	4603      	mov	r3, r0
 800323e:	f083 0301 	eor.w	r3, r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <VL53_Init+0x562>
 8003248:	2300      	movs	r3, #0
 800324a:	e016      	b.n	800327a <VL53_Init+0x590>

	  // -- VL53L0X_perform_vhv_calibration() end

	  // -- VL53L0X_perform_phase_calibration() begin

	  writeReg(tof, SYSTEM_SEQUENCE_CONFIG, 0x02);
 800324c:	2202      	movs	r2, #2
 800324e:	2101      	movs	r1, #1
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff f958 	bl	8002506 <writeReg>
	  if (!performSingleRefCalibration(tof, 0x00)) { return false; }
 8003256:	2100      	movs	r1, #0
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7ff fcee 	bl	8002c3a <performSingleRefCalibration>
 800325e:	4603      	mov	r3, r0
 8003260:	f083 0301 	eor.w	r3, r3, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <VL53_Init+0x584>
 800326a:	2300      	movs	r3, #0
 800326c:	e005      	b.n	800327a <VL53_Init+0x590>

	  // -- VL53L0X_perform_phase_calibration() end

	  // "restore the previous Sequence Config"
	  writeReg(tof, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800326e:	22e8      	movs	r2, #232	; 0xe8
 8003270:	2101      	movs	r1, #1
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7ff f947 	bl	8002506 <writeReg>

	  // VL53L0X_PerformRefCalibration() end
	return true;
 8003278:	2301      	movs	r3, #1
}
 800327a:	4618      	mov	r0, r3
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <VL53_SetTimeout>:

void VL53_SetTimeout(VL53_t* tof, int timeout)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	6039      	str	r1, [r7, #0]
	tof->io_timeout = timeout;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	b29a      	uxth	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	821a      	strh	r2, [r3, #16]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
	...

080032a0 <VL53_SetSignalRateLimit>:

bool VL53_SetSignalRateLimit(VL53_t* tof, float limit)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
	  if (limit < 0 || limit > 511.99) { return false; }
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	6838      	ldr	r0, [r7, #0]
 80032b0:	f7fd fc3e 	bl	8000b30 <__aeabi_fcmplt>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <VL53_SetSignalRateLimit+0x30>
 80032ba:	6838      	ldr	r0, [r7, #0]
 80032bc:	f7fd f8ac 	bl	8000418 <__aeabi_f2d>
 80032c0:	a30f      	add	r3, pc, #60	; (adr r3, 8003300 <VL53_SetSignalRateLimit+0x60>)
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	f7fd f97d 	bl	80005c4 <__aeabi_dcmpgt>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <VL53_SetSignalRateLimit+0x34>
 80032d0:	2300      	movs	r3, #0
 80032d2:	e010      	b.n	80032f6 <VL53_SetSignalRateLimit+0x56>

	  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
	  writeReg16Bit(tof, FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit * (1 << 7));
 80032d4:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80032d8:	6838      	ldr	r0, [r7, #0]
 80032da:	f7fd fa8b 	bl	80007f4 <__aeabi_fmul>
 80032de:	4603      	mov	r3, r0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd fc73 	bl	8000bcc <__aeabi_f2uiz>
 80032e6:	4603      	mov	r3, r0
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	2144      	movs	r1, #68	; 0x44
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff f974 	bl	80025dc <writeReg16Bit>
	  return true;
 80032f4:	2301      	movs	r3, #1
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	0a3d70a4 	.word	0x0a3d70a4
 8003304:	407fffd7 	.word	0x407fffd7

08003308 <VL53_SetMeasurementTimingBudget>:

	  return true;
}

bool VL53_SetMeasurementTimingBudget(VL53_t* tof, uint32_t budget_us)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b092      	sub	sp, #72	; 0x48
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
	  SequenceStepEnables enables;
	  SequenceStepTimeouts timeouts;

	  uint16_t const StartOverhead     = 1910;
 8003312:	f240 7376 	movw	r3, #1910	; 0x776
 8003316:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  uint16_t const EndOverhead        = 960;
 8003318:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800331c:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  uint16_t const MsrcOverhead       = 660;
 800331e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8003322:	877b      	strh	r3, [r7, #58]	; 0x3a
	  uint16_t const TccOverhead        = 590;
 8003324:	f240 234e 	movw	r3, #590	; 0x24e
 8003328:	873b      	strh	r3, [r7, #56]	; 0x38
	  uint16_t const DssOverhead        = 690;
 800332a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800332e:	86fb      	strh	r3, [r7, #54]	; 0x36
	  uint16_t const PreRangeOverhead   = 660;
 8003330:	f44f 7325 	mov.w	r3, #660	; 0x294
 8003334:	86bb      	strh	r3, [r7, #52]	; 0x34
	  uint16_t const FinalRangeOverhead = 550;
 8003336:	f240 2326 	movw	r3, #550	; 0x226
 800333a:	867b      	strh	r3, [r7, #50]	; 0x32

	  uint32_t const MinTimingBudget = 20000;
 800333c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003340:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if (budget_us < MinTimingBudget) { return false; }
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003346:	429a      	cmp	r2, r3
 8003348:	d201      	bcs.n	800334e <VL53_SetMeasurementTimingBudget+0x46>
 800334a:	2300      	movs	r3, #0
 800334c:	e06a      	b.n	8003424 <VL53_SetMeasurementTimingBudget+0x11c>

	  uint32_t used_budget_us = StartOverhead + EndOverhead;
 800334e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003350:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003352:	4413      	add	r3, r2
 8003354:	647b      	str	r3, [r7, #68]	; 0x44

	  getSequenceStepEnables(tof, &enables);
 8003356:	f107 0320 	add.w	r3, r7, #32
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fa8d 	bl	800287c <getSequenceStepEnables>
	  getSequenceStepTimeouts(tof, &enables, &timeouts);
 8003362:	f107 0208 	add.w	r2, r7, #8
 8003366:	f107 0320 	add.w	r3, r7, #32
 800336a:	4619      	mov	r1, r3
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff fb4d 	bl	8002a0c <getSequenceStepTimeouts>

	  if (enables.tcc)
 8003372:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <VL53_SetMeasurementTimingBudget+0x7e>
	  {
	    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800337e:	4413      	add	r3, r2
 8003380:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003382:	4413      	add	r3, r2
 8003384:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.dss)
 8003386:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <VL53_SetMeasurementTimingBudget+0x96>
	  {
	    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003392:	4413      	add	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003398:	4413      	add	r3, r2
 800339a:	647b      	str	r3, [r7, #68]	; 0x44
 800339c:	e009      	b.n	80033b2 <VL53_SetMeasurementTimingBudget+0xaa>
	  }
	  else if (enables.msrc)
 800339e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <VL53_SetMeasurementTimingBudget+0xaa>
	  {
	    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80033aa:	4413      	add	r3, r2
 80033ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033ae:	4413      	add	r3, r2
 80033b0:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.pre_range)
 80033b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <VL53_SetMeasurementTimingBudget+0xbe>
	  {
	    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80033be:	4413      	add	r3, r2
 80033c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033c2:	4413      	add	r3, r2
 80033c4:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.final_range)
 80033c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d029      	beq.n	8003422 <VL53_SetMeasurementTimingBudget+0x11a>
	  {
	    used_budget_us += FinalRangeOverhead;
 80033ce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80033d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033d2:	4413      	add	r3, r2
 80033d4:	647b      	str	r3, [r7, #68]	; 0x44
	    // budget and the sum of all other timeouts within the sequence.
	    // If there is no room for the final range timeout, then an error
	    // will be set. Otherwise the remaining time will be applied to
	    // the final range."

	    if (used_budget_us > budget_us)
 80033d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d901      	bls.n	80033e2 <VL53_SetMeasurementTimingBudget+0xda>
	    {
	      // "Requested timeout too big."
	      return false;
 80033de:	2300      	movs	r3, #0
 80033e0:	e020      	b.n	8003424 <VL53_SetMeasurementTimingBudget+0x11c>
	    }

	    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
	    //  timeouts must be expressed in macro periods MClks
	    //  because they have different vcsel periods."

	    uint32_t final_range_timeout_mclks =
	      timeoutMicrosecondsToMclks(final_range_timeout_us,
	                                 timeouts.final_range_vcsel_period_pclks);
 80033ea:	897b      	ldrh	r3, [r7, #10]
	      timeoutMicrosecondsToMclks(final_range_timeout_us,
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	4619      	mov	r1, r3
 80033f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033f2:	f7ff fb77 	bl	8002ae4 <timeoutMicrosecondsToMclks>
 80033f6:	6438      	str	r0, [r7, #64]	; 0x40

	    if (enables.pre_range)
 80033f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d004      	beq.n	800340a <VL53_SetMeasurementTimingBudget+0x102>
	    {
	      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8003400:	89fb      	ldrh	r3, [r7, #14]
 8003402:	461a      	mov	r2, r3
 8003404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003406:	4413      	add	r3, r2
 8003408:	643b      	str	r3, [r7, #64]	; 0x40
	    }

	    writeReg16Bit(tof, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800340a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800340c:	f7ff fb84 	bl	8002b18 <encodeTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	461a      	mov	r2, r3
 8003414:	2171      	movs	r1, #113	; 0x71
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff f8e0 	bl	80025dc <writeReg16Bit>
	      encodeTimeout(final_range_timeout_mclks));

	    // set_sequence_step_timeout() end

	    tof->measurement_timing_budget_us = budget_us; // store for internal reuse
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	619a      	str	r2, [r3, #24]
	  }
	  return true;
 8003422:	2301      	movs	r3, #1
}
 8003424:	4618      	mov	r0, r3
 8003426:	3748      	adds	r7, #72	; 0x48
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <VL53_TimeoutOccured>:

bool VL53_TimeoutOccured(VL53_t* tof)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	  bool tmp = tof->did_timeout;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	7c9b      	ldrb	r3, [r3, #18]
 8003438:	73fb      	strb	r3, [r7, #15]
	  tof->did_timeout = false;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	749a      	strb	r2, [r3, #18]
	  return tmp;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <VL53_ReadRangeSingle_mm>:

uint16_t VL53_ReadRangeSingle_mm(VL53_t* tof)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  writeReg(tof, 0x80, 0x01);
 8003454:	2201      	movs	r2, #1
 8003456:	2180      	movs	r1, #128	; 0x80
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff f854 	bl	8002506 <writeReg>
  writeReg(tof, 0xFF, 0x01);
 800345e:	2201      	movs	r2, #1
 8003460:	21ff      	movs	r1, #255	; 0xff
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff f84f 	bl	8002506 <writeReg>
  writeReg(tof, 0x00, 0x00);
 8003468:	2200      	movs	r2, #0
 800346a:	2100      	movs	r1, #0
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff f84a 	bl	8002506 <writeReg>
  writeReg(tof, 0x91, tof->stopVariable);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	7bdb      	ldrb	r3, [r3, #15]
 8003476:	461a      	mov	r2, r3
 8003478:	2191      	movs	r1, #145	; 0x91
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff f843 	bl	8002506 <writeReg>
  writeReg(tof, 0x00, 0x01);
 8003480:	2201      	movs	r2, #1
 8003482:	2100      	movs	r1, #0
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff f83e 	bl	8002506 <writeReg>
  writeReg(tof, 0xFF, 0x00);
 800348a:	2200      	movs	r2, #0
 800348c:	21ff      	movs	r1, #255	; 0xff
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff f839 	bl	8002506 <writeReg>
  writeReg(tof, 0x80, 0x00);
 8003494:	2200      	movs	r2, #0
 8003496:	2180      	movs	r1, #128	; 0x80
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff f834 	bl	8002506 <writeReg>

  writeReg(tof, SYSRANGE_START, 0x01);
 800349e:	2201      	movs	r2, #1
 80034a0:	2100      	movs	r1, #0
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff f82f 	bl	8002506 <writeReg>

  // "Wait until start bit has been cleared"
  startTimeout(tof);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7fe ffcf 	bl	800244c <startTimeout>
  while (readReg(tof, SYSRANGE_START) & 0x01)
 80034ae:	e00b      	b.n	80034c8 <VL53_ReadRangeSingle_mm+0x7c>
  {
    if (checkTimeoutExpired(tof))
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7fe ffd9 	bl	8002468 <checkTimeoutExpired>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <VL53_ReadRangeSingle_mm+0x7c>
    {
      tof->did_timeout = true;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	749a      	strb	r2, [r3, #18]
      return 65535;
 80034c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034c6:	e00c      	b.n	80034e2 <VL53_ReadRangeSingle_mm+0x96>
  while (readReg(tof, SYSRANGE_START) & 0x01)
 80034c8:	2100      	movs	r1, #0
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fe ffea 	bl	80024a4 <readReg>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1ea      	bne.n	80034b0 <VL53_ReadRangeSingle_mm+0x64>
    }
  }

  return readRangeContinuousMillimeters(tof);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fbd8 	bl	8002c90 <readRangeContinuousMillimeters>
 80034e0:	4603      	mov	r3, r0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <WEIGHTEDAVG_Init>:
		uint32_t* values,
		uint32_t* calibMin,
		uint32_t* calibMax,
		uint32_t maxVal,
		uint32_t* weights)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b087      	sub	sp, #28
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]
	wavg->size = size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	615a      	str	r2, [r3, #20]
	wavg->values = values;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	611a      	str	r2, [r3, #16]
	wavg->calibMin = calibMin;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	601a      	str	r2, [r3, #0]
	wavg->calibMax = calibMax;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a3a      	ldr	r2, [r7, #32]
 800350e:	605a      	str	r2, [r3, #4]
	wavg->maxVal = maxVal;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003514:	60da      	str	r2, [r3, #12]
	wavg->weights = weights;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800351a:	609a      	str	r2, [r3, #8]

	wavg->output = 0;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	621a      	str	r2, [r3, #32]
	wavg->num = 0;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	619a      	str	r2, [r3, #24]
	wavg->denum = 0;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	61da      	str	r2, [r3, #28]
	wavg->invert = false;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	for(uint32_t i = 0; i < size; i++)
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e011      	b.n	8003560 <WEIGHTEDAVG_Init+0x76>
	{
		wavg->calibMin[i] = 0xffffffff;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800354a:	601a      	str	r2, [r3, #0]
		wavg->calibMax[i] = 0x0;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < size; i++)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	3301      	adds	r3, #1
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	429a      	cmp	r2, r3
 8003566:	d3e9      	bcc.n	800353c <WEIGHTEDAVG_Init+0x52>
	}
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <WEIGHTEDAVG_Invert>:

void WEIGHTEDAVG_Invert(WEIGHTEDAVG_t* wavg, bool invert)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	70fb      	strb	r3, [r7, #3]
	wavg->invert = invert;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr

08003592 <WEIGHTEDAVG_SetData>:

void WEIGHTEDAVG_SetData(WEIGHTEDAVG_t* wavg, uint32_t* data)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
	wavg->values = data;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	611a      	str	r2, [r3, #16]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <WEIGHTEDAVG_Calibrate>:

void WEIGHTEDAVG_Calibrate(WEIGHTEDAVG_t* wavg)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < wavg->size; i++)
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	e02c      	b.n	8003614 <WEIGHTEDAVG_Calibrate+0x68>
	{
		wavg->calibMin[i] = min(wavg->values[i], wavg->calibMin[i]);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4403      	add	r3, r0
 80035dc:	428a      	cmp	r2, r1
 80035de:	bf28      	it	cs
 80035e0:	460a      	movcs	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]
		wavg->calibMax[i] = max(wavg->values[i], wavg->calibMax[i]);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	6819      	ldr	r1, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6858      	ldr	r0, [r3, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4403      	add	r3, r0
 8003606:	428a      	cmp	r2, r1
 8003608:	bf38      	it	cc
 800360a:	460a      	movcc	r2, r1
 800360c:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < wavg->size; i++)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3301      	adds	r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	429a      	cmp	r2, r3
 800361c:	d3cd      	bcc.n	80035ba <WEIGHTEDAVG_Calibrate+0xe>
	}
}
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <WEIGHTEDAVG_AddSamples>:

void WEIGHTEDAVG_AddSamples(WEIGHTEDAVG_t* wavg)
{
 800362a:	b480      	push	{r7}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < wavg->size; i++)
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	e0a4      	b.n	8003782 <WEIGHTEDAVG_AddSamples+0x158>
	{
		wavg->values[i] = min(wavg->values[i], wavg->calibMax[i]);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6918      	ldr	r0, [r3, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4403      	add	r3, r0
 800365a:	428a      	cmp	r2, r1
 800365c:	bf28      	it	cs
 800365e:	460a      	movcs	r2, r1
 8003660:	601a      	str	r2, [r3, #0]
		wavg->values[i] = max(wavg->values[i], wavg->calibMin[i]);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6918      	ldr	r0, [r3, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4403      	add	r3, r0
 8003684:	428a      	cmp	r2, r1
 8003686:	bf38      	it	cc
 8003688:	460a      	movcc	r2, r1
 800368a:	601a      	str	r2, [r3, #0]
		wavg->values[i] -= wavg->calibMin[i];
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	6819      	ldr	r1, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6918      	ldr	r0, [r3, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4403      	add	r3, r0
 80036ae:	1a8a      	subs	r2, r1, r2
 80036b0:	601a      	str	r2, [r3, #0]
		wavg->values[i] *= wavg->maxVal;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68d9      	ldr	r1, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6918      	ldr	r0, [r3, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4403      	add	r3, r0
 80036cc:	fb01 f202 	mul.w	r2, r1, r2
 80036d0:	601a      	str	r2, [r3, #0]
		wavg->values[i] /= (wavg->calibMax[i] - wavg->calibMin[i]);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	6819      	ldr	r1, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4403      	add	r3, r0
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	1ad2      	subs	r2, r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6918      	ldr	r0, [r3, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4403      	add	r3, r0
 8003702:	fbb1 f2f2 	udiv	r2, r1, r2
 8003706:	601a      	str	r2, [r3, #0]
		if(wavg->invert)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800370e:	2b00      	cmp	r3, #0
 8003710:	d016      	beq.n	8003740 <WEIGHTEDAVG_AddSamples+0x116>
		{
			wavg->num += (wavg->maxVal - wavg->values[i]) * wavg->weights[i];
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699a      	ldr	r2, [r3, #24]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68d9      	ldr	r1, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6918      	ldr	r0, [r3, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4403      	add	r3, r0
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	1acb      	subs	r3, r1, r3
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	6888      	ldr	r0, [r1, #8]
 800372c:	68f9      	ldr	r1, [r7, #12]
 800372e:	0089      	lsls	r1, r1, #2
 8003730:	4401      	add	r1, r0
 8003732:	6809      	ldr	r1, [r1, #0]
 8003734:	fb01 f303 	mul.w	r3, r1, r3
 8003738:	441a      	add	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	619a      	str	r2, [r3, #24]
 800373e:	e012      	b.n	8003766 <WEIGHTEDAVG_AddSamples+0x13c>
		}
		else
		{
			wavg->num += wavg->values[i] * wavg->weights[i];
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699a      	ldr	r2, [r3, #24]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6919      	ldr	r1, [r3, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	6888      	ldr	r0, [r1, #8]
 8003754:	68f9      	ldr	r1, [r7, #12]
 8003756:	0089      	lsls	r1, r1, #2
 8003758:	4401      	add	r1, r0
 800375a:	6809      	ldr	r1, [r1, #0]
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	441a      	add	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	619a      	str	r2, [r3, #24]
		}
		wavg->denum += wavg->values[i];
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69da      	ldr	r2, [r3, #28]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6919      	ldr	r1, [r3, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	441a      	add	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	61da      	str	r2, [r3, #28]
	for(uint32_t i = 0; i < wavg->size; i++)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3301      	adds	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	429a      	cmp	r2, r3
 800378a:	f4ff af55 	bcc.w	8003638 <WEIGHTEDAVG_AddSamples+0xe>
	}
}
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <WEIGHTEDAVG_Process>:

uint32_t WEIGHTEDAVG_Process(WEIGHTEDAVG_t* wavg)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
	if(wavg->denum > 0)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <WEIGHTEDAVG_Process+0x20>
	{
		wavg->output = wavg->num / wavg->denum;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	621a      	str	r2, [r3, #32]
	}
	wavg->num = 0;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	619a      	str	r2, [r3, #24]
	wavg->denum = 0;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	61da      	str	r2, [r3, #28]

	return wavg->output;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <WIRE_Init>:
void WIRE_Init(WIRE_t* w,
		GPIO_TypeDef* sdaGPIO, uint16_t sdaPin,
		GPIO_TypeDef* sclGPIO, uint16_t sclPin,
		uint32_t delay,
		QUEUE_t* receiveBuf, QUEUE_t* sendBuf)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	80fb      	strh	r3, [r7, #6]
	w->sdaGPIO = sdaGPIO;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	601a      	str	r2, [r3, #0]
	w->sdaPIN = sdaPin;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	88fa      	ldrh	r2, [r7, #6]
 80037ee:	811a      	strh	r2, [r3, #8]
	w->sclGPIO = sclGPIO;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	605a      	str	r2, [r3, #4]
	w->sclPIN = sclPin;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8b3a      	ldrh	r2, [r7, #24]
 80037fa:	815a      	strh	r2, [r3, #10]
	w->delay = delay;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	69fa      	ldr	r2, [r7, #28]
 8003800:	60da      	str	r2, [r3, #12]
	w->in = receiveBuf;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	611a      	str	r2, [r3, #16]
	w->out = sendBuf;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380c:	615a      	str	r2, [r3, #20]
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <setBit>:

void setBit(GPIO_TypeDef* GPIOx, uint16_t pin)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 8003824:	887b      	ldrh	r3, [r7, #2]
 8003826:	2201      	movs	r2, #1
 8003828:	4619      	mov	r1, r3
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f001 fcdd 	bl	80051ea <HAL_GPIO_WritePin>
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <resetBit>:

void resetBit(GPIO_TypeDef* GPIOx, uint16_t pin)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8003844:	887b      	ldrh	r3, [r7, #2]
 8003846:	2200      	movs	r2, #0
 8003848:	4619      	mov	r1, r3
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f001 fccd 	bl	80051ea <HAL_GPIO_WritePin>
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <gpioReadBit>:

uint8_t gpioReadBit(GPIO_TypeDef* GPIOx, uint16_t pin)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
	return (uint16_t)HAL_GPIO_ReadPin(GPIOx, pin);
 8003864:	887b      	ldrh	r3, [r7, #2]
 8003866:	4619      	mov	r1, r3
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f001 fca7 	bl	80051bc <HAL_GPIO_ReadPin>
 800386e:	4603      	mov	r3, r0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <wait>:

void wait(uint32_t delay)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < delay; i++)
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	e003      	b.n	800388e <wait+0x16>
	{
		asm("nop");
 8003886:	bf00      	nop
	for(uint32_t i = 0; i < delay; i++)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3301      	adds	r3, #1
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	429a      	cmp	r2, r3
 8003894:	d3f7      	bcc.n	8003886 <wait+0xe>
	}
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <sdaInit>:

void sdaInit(WIRE_t* w, bool output)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b086      	sub	sp, #24
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	460b      	mov	r3, r1
 80038ac:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef init;
	init.Speed = GPIO_SPEED_FREQ_HIGH;
 80038ae:	2303      	movs	r3, #3
 80038b0:	617b      	str	r3, [r7, #20]
	init.Pin = w->sdaPIN;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	891b      	ldrh	r3, [r3, #8]
 80038b6:	60bb      	str	r3, [r7, #8]

	if(output)
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <sdaInit+0x22>
	{
		init.Mode = GPIO_MODE_OUTPUT_OD;
 80038be:	2311      	movs	r3, #17
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	e001      	b.n	80038c8 <sdaInit+0x26>
	}
	else
	{
		init.Mode = GPIO_MODE_INPUT;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
	}

	HAL_GPIO_Init(w->sdaGPIO, &init);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f107 0208 	add.w	r2, r7, #8
 80038d0:	4611      	mov	r1, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 faee 	bl	8004eb4 <HAL_GPIO_Init>
}
 80038d8:	bf00      	nop
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <sclInit>:

void sclInit(WIRE_t* w)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef init;
	init.Speed = GPIO_SPEED_FREQ_HIGH;
 80038e8:	2303      	movs	r3, #3
 80038ea:	617b      	str	r3, [r7, #20]
	init.Mode = GPIO_MODE_OUTPUT_OD;
 80038ec:	2311      	movs	r3, #17
 80038ee:	60fb      	str	r3, [r7, #12]
	init.Pin = w->sclPIN;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	895b      	ldrh	r3, [r3, #10]
 80038f4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(w->sclGPIO, &init);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f107 0208 	add.w	r2, r7, #8
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f001 fad7 	bl	8004eb4 <HAL_GPIO_Init>
}
 8003906:	bf00      	nop
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <sdaHigh>:

void sdaHigh(WIRE_t* w)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
	setBit(w->sdaGPIO, w->sdaPIN);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	891b      	ldrh	r3, [r3, #8]
 800391e:	4619      	mov	r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	f7ff ff79 	bl	8003818 <setBit>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <sdaLow>:

void sdaLow(WIRE_t* w)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
	resetBit(w->sdaGPIO, w->sdaPIN);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	891b      	ldrh	r3, [r3, #8]
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f7ff ff79 	bl	8003838 <resetBit>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <sdaOut>:

void sdaOut(WIRE_t* w, uint8_t dat)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	70fb      	strb	r3, [r7, #3]
	if(dat)
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <sdaOut+0x1a>
	{
		sdaHigh(w);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ffd4 	bl	800390e <sdaHigh>
	}
	else
	{
		sdaLow(w);
	}
}
 8003966:	e002      	b.n	800396e <sdaOut+0x20>
		sdaLow(w);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ffe0 	bl	800392e <sdaLow>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <sclHigh>:

void sclHigh(WIRE_t* w)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
	setBit(w->sclGPIO, w->sclPIN);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	895b      	ldrh	r3, [r3, #10]
 8003986:	4619      	mov	r1, r3
 8003988:	4610      	mov	r0, r2
 800398a:	f7ff ff45 	bl	8003818 <setBit>
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <sclLow>:

void sclLow(WIRE_t* w)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
	resetBit(w->sclGPIO, w->sclPIN);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	895b      	ldrh	r3, [r3, #10]
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7ff ff45 	bl	8003838 <resetBit>
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <sclCycle>:

void sclCycle(WIRE_t* w)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
	sclHigh(w);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff ffd9 	bl	8003976 <sclHigh>
	wait(w->delay);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff55 	bl	8003878 <wait>
	sclLow(w);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff ffe1 	bl	8003996 <sclLow>
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <startCondition>:

void startCondition(WIRE_t* w)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	sdaHigh(w);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ff92 	bl	800390e <sdaHigh>
	sclHigh(w);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff ffc3 	bl	8003976 <sclHigh>
	wait(w->delay << 1);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ff3e 	bl	8003878 <wait>
//	wait(w->delay);
	sdaLow(w);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ff96 	bl	800392e <sdaLow>
	wait(w->delay);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff ff36 	bl	8003878 <wait>
	sclLow(w);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff ffc2 	bl	8003996 <sclLow>
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <stopCondition>:

void stopCondition(WIRE_t* w)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
	sdaLow(w);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff ff83 	bl	800392e <sdaLow>
	sclHigh(w);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff ffa4 	bl	8003976 <sclHigh>
	wait(w->delay<<1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff1f 	bl	8003878 <wait>
//	wait(w->delay);
	sdaHigh(w);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ff67 	bl	800390e <sdaHigh>
	wait(w->delay);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff17 	bl	8003878 <wait>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <sdaRead>:

uint8_t sdaRead(WIRE_t* w)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
	return gpioReadBit(w->sdaGPIO, w->sdaPIN);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	891b      	ldrh	r3, [r3, #8]
 8003a62:	4619      	mov	r1, r3
 8003a64:	4610      	mov	r0, r2
 8003a66:	f7ff fef7 	bl	8003858 <gpioReadBit>
 8003a6a:	4603      	mov	r3, r0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <isAck>:

bool isAck(WIRE_t*w)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	unsigned int tmp;
	bool ack = false;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	75fb      	strb	r3, [r7, #23]

	sdaInit(w, false);
 8003a80:	2100      	movs	r1, #0
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ff0d 	bl	80038a2 <sdaInit>
	wait(w->delay << 2);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff fef2 	bl	8003878 <wait>
//	wait(w->delay);
	sclHigh(w);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff ff6e 	bl	8003976 <sclHigh>
	wait(w->delay << 2);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fee9 	bl	8003878 <wait>
//	wait(w->delay);

	for(int i = 0; i < 10; i++)
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	e012      	b.n	8003ad2 <isAck+0x5e>
	{
		tmp = !(sdaRead(w));
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ffd0 	bl	8003a52 <sdaRead>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	60fb      	str	r3, [r7, #12]
		if(tmp)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <isAck+0x58>
		{
			ack = true;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
			break;
 8003aca:	e005      	b.n	8003ad8 <isAck+0x64>
	for(int i = 0; i < 10; i++)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b09      	cmp	r3, #9
 8003ad6:	dde9      	ble.n	8003aac <isAck+0x38>
		}
	}
	sclLow(w);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ff5c 	bl	8003996 <sclLow>
	sdaInit(w, true);
 8003ade:	2101      	movs	r1, #1
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff fede 	bl	80038a2 <sdaInit>
	wait(w->delay<<2);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fec3 	bl	8003878 <wait>
//	wait(w->delay);
	return ack;
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <WIRE_Begin>:

void WIRE_Begin(WIRE_t* w)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	sclInit(w);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff feeb 	bl	80038e0 <sclInit>
	sdaInit(w, true);
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff fec8 	bl	80038a2 <sdaInit>
	sdaHigh(w);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff fefb 	bl	800390e <sdaHigh>
	sclHigh(w);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff2c 	bl	8003976 <sclHigh>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <WIRE_BeginTransmission>:

void WIRE_BeginTransmission(WIRE_t*w, uint8_t address)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	70fb      	strb	r3, [r7, #3]
	uint8_t addr = (address << 1);
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
	addr |= 0x00;
	while(!QUEUE_IsEmpty(w->out))
 8003b38:	e004      	b.n	8003b44 <WIRE_BeginTransmission+0x1e>
	{
		QUEUE_Pop(w->out);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe fa53 	bl	8001fea <QUEUE_Pop>
	while(!QUEUE_IsEmpty(w->out))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fe fa1b 	bl	8001f84 <QUEUE_IsEmpty>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f083 0301 	eor.w	r3, r3, #1
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1ef      	bne.n	8003b3a <WIRE_BeginTransmission+0x14>
	}
	w->bufferFull = false;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	761a      	strb	r2, [r3, #24]
	QUEUE_Push(addr, w->out);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe fa1b 	bl	8001fa4 <QUEUE_Push>
}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <WIRE_WriteByte>:

uint8_t WIRE_WriteByte(WIRE_t* w, uint8_t dat)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	70fb      	strb	r3, [r7, #3]
	if(!QUEUE_IsFull(w->out))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe f9ea 	bl	8001f60 <QUEUE_IsFull>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f083 0301 	eor.w	r3, r3, #1
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d007      	beq.n	8003ba8 <WIRE_WriteByte+0x32>
	{
		QUEUE_Push(dat, w->out);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe f9ff 	bl	8001fa4 <QUEUE_Push>
 8003ba6:	e002      	b.n	8003bae <WIRE_WriteByte+0x38>
	}
	else
	{
		w->bufferFull = true;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	761a      	strb	r2, [r3, #24]
	}
	return QUEUE_Size(w->out);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe fa3b 	bl	800202e <QUEUE_Size>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	b2db      	uxtb	r3, r3
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <WIRE_EndTransmission>:
	}
	return size;
}

uint8_t WIRE_EndTransmission(WIRE_t* w, bool stop)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
	uint8_t error = WIRE_SUCCESS;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	75fb      	strb	r3, [r7, #23]
	if(w->bufferFull)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	7e1b      	ldrb	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <WIRE_EndTransmission+0x1e>
	{
		error = WIRE_BUFFEROVERFLOW;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	75fb      	strb	r3, [r7, #23]
 8003be0:	e089      	b.n	8003cf6 <WIRE_EndTransmission+0x132>
	}
	else
	{
		sdaInit(w, true);
 8003be2:	2101      	movs	r1, #1
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff fe5c 	bl	80038a2 <sdaInit>
		startCondition(w);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fef6 	bl	80039dc <startCondition>
		wait(w->delay);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fe3f 	bl	8003878 <wait>
		int ctr = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
		while(!QUEUE_IsEmpty(w->out))
 8003bfe:	e040      	b.n	8003c82 <WIRE_EndTransmission+0xbe>
		{
			uint8_t dat = QUEUE_Pop(w->out);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fe f9f0 	bl	8001fea <QUEUE_Pop>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	72fb      	strb	r3, [r7, #11]
			for(int i = 7; i >= 0; i--)
 8003c0e:	2307      	movs	r3, #7
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	e01d      	b.n	8003c50 <WIRE_EndTransmission+0x8c>
			{
				sdaOut(w, dat & (1 << i));
 8003c14:	2201      	movs	r2, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	b25a      	sxtb	r2, r3
 8003c1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003c22:	4013      	ands	r3, r2
 8003c24:	b25b      	sxtb	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff fe8f 	bl	800394e <sdaOut>
				wait(w->delay);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fe1f 	bl	8003878 <wait>
				sclCycle(w);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff febb 	bl	80039b6 <sclCycle>
				wait(w->delay);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fe17 	bl	8003878 <wait>
			for(int i = 7; i >= 0; i--)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	dade      	bge.n	8003c14 <WIRE_EndTransmission+0x50>
			}
			bool ack = isAck(w);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff ff0c 	bl	8003a74 <isAck>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	72bb      	strb	r3, [r7, #10]
			if(!ack)
 8003c60:	7abb      	ldrb	r3, [r7, #10]
 8003c62:	f083 0301 	eor.w	r3, r3, #1
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <WIRE_EndTransmission+0xbe>
			{
				if(0 == ctr)
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <WIRE_EndTransmission+0xb4>
				{
					error = WIRE_NACK_ADDR;
 8003c72:	2302      	movs	r3, #2
 8003c74:	75fb      	strb	r3, [r7, #23]
 8003c76:	e001      	b.n	8003c7c <WIRE_EndTransmission+0xb8>
				}
				else
				{
					error = WIRE_NACK_DATA;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	75fb      	strb	r3, [r7, #23]
				}
				ctr++;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	613b      	str	r3, [r7, #16]
		while(!QUEUE_IsEmpty(w->out))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe f97c 	bl	8001f84 <QUEUE_IsEmpty>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f083 0301 	eor.w	r3, r3, #1
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1b3      	bne.n	8003c00 <WIRE_EndTransmission+0x3c>
			}
		}

		wait(w->delay);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fdeb 	bl	8003878 <wait>

		if(stop)
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d006      	beq.n	8003cb6 <WIRE_EndTransmission+0xf2>
		{
			w->restarted = false;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	765a      	strb	r2, [r3, #25]
			stopCondition(w);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff feb3 	bl	8003a1a <stopCondition>
 8003cb4:	e01f      	b.n	8003cf6 <WIRE_EndTransmission+0x132>
		}
		else
		{
			w->restarted = true;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	765a      	strb	r2, [r3, #25]
			sdaHigh(w);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff fe26 	bl	800390e <sdaHigh>
			wait(w->delay << 1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fdd5 	bl	8003878 <wait>
			sclHigh(w);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff fe51 	bl	8003976 <sclHigh>
			wait(w->delay << 1);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fdcc 	bl	8003878 <wait>
			sdaLow(w);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff fe24 	bl	800392e <sdaLow>
			wait(w->delay);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fdc4 	bl	8003878 <wait>
			sclLow(w);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff fe50 	bl	8003996 <sclLow>
		}
	}

	return error;
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <WIRE_RequestFrom>:

uint8_t WIRE_RequestFrom(WIRE_t* w, uint8_t address, uint8_t len, bool stop)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	4608      	mov	r0, r1
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	70fb      	strb	r3, [r7, #3]
 8003d12:	460b      	mov	r3, r1
 8003d14:	70bb      	strb	r3, [r7, #2]
 8003d16:	4613      	mov	r3, r2
 8003d18:	707b      	strb	r3, [r7, #1]
	uint8_t addr = address;
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	73fb      	strb	r3, [r7, #15]
	addr = addr << 1;
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
	addr = addr | 0x01;
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]

	sdaInit(w, true);
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff fdb7 	bl	80038a2 <sdaInit>
	if(!w->restarted)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	7e5b      	ldrb	r3, [r3, #25]
 8003d38:	f083 0301 	eor.w	r3, r3, #1
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <WIRE_RequestFrom+0x48>
	{
		startCondition(w);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fe4a 	bl	80039dc <startCondition>
	}
	wait(w->delay);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fd93 	bl	8003878 <wait>
	for(int i = 7; i >= 0; i--)
 8003d52:	2307      	movs	r3, #7
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	e01d      	b.n	8003d94 <WIRE_RequestFrom+0x94>
	{
		sdaOut(w, addr & (1 << i));
 8003d58:	2201      	movs	r2, #1
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	b25a      	sxtb	r2, r3
 8003d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d66:	4013      	ands	r3, r2
 8003d68:	b25b      	sxtb	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fded 	bl	800394e <sdaOut>
		wait(w->delay);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fd7d 	bl	8003878 <wait>
		sclCycle(w);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fe19 	bl	80039b6 <sclCycle>
		wait(w->delay);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff fd75 	bl	8003878 <wait>
	for(int i = 7; i >= 0; i--)
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	dade      	bge.n	8003d58 <WIRE_RequestFrom+0x58>
	}
	bool ack = isAck(w);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fe6a 	bl	8003a74 <isAck>
 8003da0:	4603      	mov	r3, r0
 8003da2:	73bb      	strb	r3, [r7, #14]
	if(!ack)
 8003da4:	7bbb      	ldrb	r3, [r7, #14]
 8003da6:	f083 0301 	eor.w	r3, r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <WIRE_RequestFrom+0xb4>
	{
		return 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e0a6      	b.n	8003f02 <WIRE_RequestFrom+0x202>
	}

	sclLow(w);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff fdee 	bl	8003996 <sclLow>
	sdaInit(w, true);
 8003dba:	2101      	movs	r1, #1
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff fd70 	bl	80038a2 <sdaInit>
	wait(w->delay<<2);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fd55 	bl	8003878 <wait>
//	wait(w->delay);

	while(!QUEUE_IsEmpty(w->in))
 8003dce:	e004      	b.n	8003dda <WIRE_RequestFrom+0xda>
	{
		QUEUE_Pop(w->in);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe f908 	bl	8001fea <QUEUE_Pop>
	while(!QUEUE_IsEmpty(w->in))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe f8d0 	bl	8001f84 <QUEUE_IsEmpty>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f083 0301 	eor.w	r3, r3, #1
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ef      	bne.n	8003dd0 <WIRE_RequestFrom+0xd0>
	}

	w->bufferFull = false;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	761a      	strb	r2, [r3, #24]
	sdaInit(w, false);
 8003df6:	2100      	movs	r1, #0
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff fd52 	bl	80038a2 <sdaInit>
	uint8_t byte;
	for(int i = 0; i < len; i++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e069      	b.n	8003ed8 <WIRE_RequestFrom+0x1d8>
	{
			byte = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	76fb      	strb	r3, [r7, #27]
			for(int x = 0; x < 8; x++)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	e01f      	b.n	8003e4e <WIRE_RequestFrom+0x14e>
			{
					sclHigh(w);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fdb1 	bl	8003976 <sclHigh>

					byte = byte << 1;
 8003e14:	7efb      	ldrb	r3, [r7, #27]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	76fb      	strb	r3, [r7, #27]
					if(sdaRead(w))
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff fe19 	bl	8003a52 <sdaRead>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <WIRE_RequestFrom+0x12e>
					{
						byte |= 0x01;
 8003e26:	7efb      	ldrb	r3, [r7, #27]
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	76fb      	strb	r3, [r7, #27]
					}
					wait(w->delay);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fd20 	bl	8003878 <wait>
					sclLow(w);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fdac 	bl	8003996 <sclLow>
					wait(w->delay);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fd18 	bl	8003878 <wait>
			for(int x = 0; x < 8; x++)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b07      	cmp	r3, #7
 8003e52:	dddc      	ble.n	8003e0e <WIRE_RequestFrom+0x10e>
			}
			if(!QUEUE_IsFull(w->in))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe f881 	bl	8001f60 <QUEUE_IsFull>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f083 0301 	eor.w	r3, r3, #1
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <WIRE_RequestFrom+0x17a>
			{
				QUEUE_Push(byte, w->in);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	7efb      	ldrb	r3, [r7, #27]
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe f896 	bl	8001fa4 <QUEUE_Push>
 8003e78:	e002      	b.n	8003e80 <WIRE_RequestFrom+0x180>
			}
			else
			{
				w->bufferFull = true;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	761a      	strb	r2, [r3, #24]
			}
			sdaInit(w, true);
 8003e80:	2101      	movs	r1, #1
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff fd0d 	bl	80038a2 <sdaInit>
			if(i == len -1)
 8003e88:	78bb      	ldrb	r3, [r7, #2]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d103      	bne.n	8003e9a <WIRE_RequestFrom+0x19a>
			{
				sdaHigh(w);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fd3b 	bl	800390e <sdaHigh>
 8003e98:	e002      	b.n	8003ea0 <WIRE_RequestFrom+0x1a0>
			}
			else
			{
				sdaLow(w);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fd47 	bl	800392e <sdaLow>
			}
			wait(w->delay);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fce7 	bl	8003878 <wait>
			sclCycle(w);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff fd83 	bl	80039b6 <sclCycle>
			wait(w->delay);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fcdf 	bl	8003878 <wait>
			sdaLow(w);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff fd37 	bl	800392e <sdaLow>
			wait(w->delay);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fcd7 	bl	8003878 <wait>
			sdaInit(w, false);
 8003eca:	2100      	movs	r1, #0
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff fce8 	bl	80038a2 <sdaInit>
	for(int i = 0; i < len; i++)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	78bb      	ldrb	r3, [r7, #2]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	db91      	blt.n	8003e04 <WIRE_RequestFrom+0x104>
	}
	sdaInit(w, true);
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff fcdd 	bl	80038a2 <sdaInit>
	if(stop)
 8003ee8:	787b      	ldrb	r3, [r7, #1]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <WIRE_RequestFrom+0x1f4>
	{
		stopCondition(w);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fd93 	bl	8003a1a <stopCondition>
	}

	return QUEUE_Size(w->in);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe f898 	bl	800202e <QUEUE_Size>
 8003efe:	4603      	mov	r3, r0
 8003f00:	b2db      	uxtb	r3, r3
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3720      	adds	r7, #32
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <WIRE_Read>:
{
	return !QUEUE_IsEmpty(w->in);
}

uint8_t WIRE_Read(WIRE_t* w)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
	if(!QUEUE_IsEmpty(w->in))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe f834 	bl	8001f84 <QUEUE_IsEmpty>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	f083 0301 	eor.w	r3, r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d006      	beq.n	8003f36 <WIRE_Read+0x2c>
	{

		return QUEUE_Pop(w->in);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe f85c 	bl	8001fea <QUEUE_Pop>
 8003f32:	4603      	mov	r3, r0
 8003f34:	e000      	b.n	8003f38 <WIRE_Read+0x2e>
	}
	else
	{
		return 0;
 8003f36:	2300      	movs	r3, #0
	}
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003f40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003f42:	e003      	b.n	8003f4c <LoopCopyDataInit>

08003f44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003f46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003f48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003f4a:	3104      	adds	r1, #4

08003f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003f4c:	480a      	ldr	r0, [pc, #40]	; (8003f78 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003f50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003f52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003f54:	d3f6      	bcc.n	8003f44 <CopyDataInit>
  ldr r2, =_sbss
 8003f56:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003f58:	e002      	b.n	8003f60 <LoopFillZerobss>

08003f5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003f5a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003f5c:	f842 3b04 	str.w	r3, [r2], #4

08003f60 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003f62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003f64:	d3f9      	bcc.n	8003f5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f66:	f7fe fa6b 	bl	8002440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f6a:	f002 ff5d 	bl	8006e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f6e:	f7fc ff3d 	bl	8000dec <main>
  bx lr
 8003f72:	4770      	bx	lr
  ldr r3, =_sidata
 8003f74:	08006ec8 	.word	0x08006ec8
  ldr r0, =_sdata
 8003f78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003f7c:	20000030 	.word	0x20000030
  ldr r2, =_sbss
 8003f80:	20000030 	.word	0x20000030
  ldr r3, = _ebss
 8003f84:	20000528 	.word	0x20000528

08003f88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f88:	e7fe      	b.n	8003f88 <ADC1_2_IRQHandler>
	...

08003f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f90:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <HAL_Init+0x28>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a07      	ldr	r2, [pc, #28]	; (8003fb4 <HAL_Init+0x28>)
 8003f96:	f043 0310 	orr.w	r3, r3, #16
 8003f9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f9c:	2003      	movs	r0, #3
 8003f9e:	f000 fd59 	bl	8004a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	f000 f808 	bl	8003fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fa8:	f7fe f84c 	bl	8002044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40022000 	.word	0x40022000

08003fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fc0:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_InitTick+0x54>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4b12      	ldr	r3, [pc, #72]	; (8004010 <HAL_InitTick+0x58>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fd71 	bl	8004abe <HAL_SYSTICK_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e00e      	b.n	8004004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b0f      	cmp	r3, #15
 8003fea:	d80a      	bhi.n	8004002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fec:	2200      	movs	r2, #0
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ff4:	f000 fd39 	bl	8004a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ff8:	4a06      	ldr	r2, [pc, #24]	; (8004014 <HAL_InitTick+0x5c>)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e000      	b.n	8004004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20000024 	.word	0x20000024
 8004010:	2000002c 	.word	0x2000002c
 8004014:	20000028 	.word	0x20000028

08004018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <HAL_IncTick+0x1c>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <HAL_IncTick+0x20>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4413      	add	r3, r2
 8004028:	4a03      	ldr	r2, [pc, #12]	; (8004038 <HAL_IncTick+0x20>)
 800402a:	6013      	str	r3, [r2, #0]
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	2000002c 	.word	0x2000002c
 8004038:	20000524 	.word	0x20000524

0800403c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  return uwTick;
 8004040:	4b02      	ldr	r3, [pc, #8]	; (800404c <HAL_GetTick+0x10>)
 8004042:	681b      	ldr	r3, [r3, #0]
}
 8004044:	4618      	mov	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr
 800404c:	20000524 	.word	0x20000524

08004050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004058:	f7ff fff0 	bl	800403c <HAL_GetTick>
 800405c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004068:	d005      	beq.n	8004076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800406a:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <HAL_Delay+0x44>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4413      	add	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004076:	bf00      	nop
 8004078:	f7ff ffe0 	bl	800403c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	429a      	cmp	r2, r3
 8004086:	d8f7      	bhi.n	8004078 <HAL_Delay+0x28>
  {
  }
}
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	2000002c 	.word	0x2000002c

08004098 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0be      	b.n	8004238 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fd ffe6 	bl	80020a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fb4d 	bl	800477c <ADC_ConversionStop_Disable>
 80040e2:	4603      	mov	r3, r0
 80040e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f040 8099 	bne.w	8004226 <HAL_ADC_Init+0x18e>
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f040 8095 	bne.w	8004226 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004104:	f023 0302 	bic.w	r3, r3, #2
 8004108:	f043 0202 	orr.w	r2, r3, #2
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004118:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	7b1b      	ldrb	r3, [r3, #12]
 800411e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004120:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	4313      	orrs	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004130:	d003      	beq.n	800413a <HAL_ADC_Init+0xa2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d102      	bne.n	8004140 <HAL_ADC_Init+0xa8>
 800413a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800413e:	e000      	b.n	8004142 <HAL_ADC_Init+0xaa>
 8004140:	2300      	movs	r3, #0
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	7d1b      	ldrb	r3, [r3, #20]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d119      	bne.n	8004184 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	7b1b      	ldrb	r3, [r3, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	3b01      	subs	r3, #1
 800415e:	035a      	lsls	r2, r3, #13
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	e00b      	b.n	8004184 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	f043 0220 	orr.w	r2, r3, #32
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	f043 0201 	orr.w	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	430a      	orrs	r2, r1
 8004196:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	4b28      	ldr	r3, [pc, #160]	; (8004240 <HAL_ADC_Init+0x1a8>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b4:	d003      	beq.n	80041be <HAL_ADC_Init+0x126>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d104      	bne.n	80041c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	051b      	lsls	r3, r3, #20
 80041c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	430a      	orrs	r2, r1
 80041da:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <HAL_ADC_Init+0x1ac>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d10b      	bne.n	8004204 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	f043 0201 	orr.w	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004202:	e018      	b.n	8004236 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	f023 0312 	bic.w	r3, r3, #18
 800420c:	f043 0210 	orr.w	r2, r3, #16
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	f043 0201 	orr.w	r2, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004224:	e007      	b.n	8004236 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	f043 0210 	orr.w	r2, r3, #16
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004236:	7dfb      	ldrb	r3, [r7, #23]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	ffe1f7fd 	.word	0xffe1f7fd
 8004244:	ff1f0efe 	.word	0xff1f0efe

08004248 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a64      	ldr	r2, [pc, #400]	; (80043f0 <HAL_ADC_Start_DMA+0x1a8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_ADC_Start_DMA+0x24>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a63      	ldr	r2, [pc, #396]	; (80043f4 <HAL_ADC_Start_DMA+0x1ac>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d106      	bne.n	800427a <HAL_ADC_Start_DMA+0x32>
 800426c:	4b60      	ldr	r3, [pc, #384]	; (80043f0 <HAL_ADC_Start_DMA+0x1a8>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004274:	2b00      	cmp	r3, #0
 8004276:	f040 80b3 	bne.w	80043e0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_ADC_Start_DMA+0x40>
 8004284:	2302      	movs	r3, #2
 8004286:	e0ae      	b.n	80043e6 <HAL_ADC_Start_DMA+0x19e>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fa21 	bl	80046d8 <ADC_Enable>
 8004296:	4603      	mov	r3, r0
 8004298:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800429a:	7dfb      	ldrb	r3, [r7, #23]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f040 809a 	bne.w	80043d6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a4e      	ldr	r2, [pc, #312]	; (80043f4 <HAL_ADC_Start_DMA+0x1ac>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d105      	bne.n	80042cc <HAL_ADC_Start_DMA+0x84>
 80042c0:	4b4b      	ldr	r3, [pc, #300]	; (80043f0 <HAL_ADC_Start_DMA+0x1a8>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d115      	bne.n	80042f8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d026      	beq.n	8004334 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042f6:	e01d      	b.n	8004334 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a39      	ldr	r2, [pc, #228]	; (80043f0 <HAL_ADC_Start_DMA+0x1a8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_ADC_Start_DMA+0xd0>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a38      	ldr	r2, [pc, #224]	; (80043f4 <HAL_ADC_Start_DMA+0x1ac>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d10d      	bne.n	8004334 <HAL_ADC_Start_DMA+0xec>
 8004318:	4b35      	ldr	r3, [pc, #212]	; (80043f0 <HAL_ADC_Start_DMA+0x1a8>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800432c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d006      	beq.n	800434e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	f023 0206 	bic.w	r2, r3, #6
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	62da      	str	r2, [r3, #44]	; 0x2c
 800434c:	e002      	b.n	8004354 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <HAL_ADC_Start_DMA+0x1b0>)
 8004362:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4a24      	ldr	r2, [pc, #144]	; (80043fc <HAL_ADC_Start_DMA+0x1b4>)
 800436a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	4a23      	ldr	r2, [pc, #140]	; (8004400 <HAL_ADC_Start_DMA+0x1b8>)
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0202 	mvn.w	r2, #2
 800437c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800438c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a18      	ldr	r0, [r3, #32]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	334c      	adds	r3, #76	; 0x4c
 8004398:	4619      	mov	r1, r3
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f000 fbf5 	bl	8004b8c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80043ac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80043b0:	d108      	bne.n	80043c4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80043c0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80043c2:	e00f      	b.n	80043e4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80043d2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80043d4:	e006      	b.n	80043e4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80043de:	e001      	b.n	80043e4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40012400 	.word	0x40012400
 80043f4:	40012800 	.word	0x40012800
 80043f8:	080047f1 	.word	0x080047f1
 80043fc:	0800486d 	.word	0x0800486d
 8004400:	08004889 	.word	0x08004889

08004404 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr
	...

0800443c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_ADC_ConfigChannel+0x20>
 8004458:	2302      	movs	r3, #2
 800445a:	e0dc      	b.n	8004616 <HAL_ADC_ConfigChannel+0x1da>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b06      	cmp	r3, #6
 800446a:	d81c      	bhi.n	80044a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	3b05      	subs	r3, #5
 800447e:	221f      	movs	r2, #31
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	4019      	ands	r1, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	3b05      	subs	r3, #5
 8004498:	fa00 f203 	lsl.w	r2, r0, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	635a      	str	r2, [r3, #52]	; 0x34
 80044a4:	e03c      	b.n	8004520 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d81c      	bhi.n	80044e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	3b23      	subs	r3, #35	; 0x23
 80044c0:	221f      	movs	r2, #31
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43db      	mvns	r3, r3
 80044c8:	4019      	ands	r1, r3
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	3b23      	subs	r3, #35	; 0x23
 80044da:	fa00 f203 	lsl.w	r2, r0, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	631a      	str	r2, [r3, #48]	; 0x30
 80044e6:	e01b      	b.n	8004520 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	3b41      	subs	r3, #65	; 0x41
 80044fa:	221f      	movs	r2, #31
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	4019      	ands	r1, r3
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	3b41      	subs	r3, #65	; 0x41
 8004514:	fa00 f203 	lsl.w	r2, r0, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b09      	cmp	r3, #9
 8004526:	d91c      	bls.n	8004562 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68d9      	ldr	r1, [r3, #12]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4613      	mov	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4413      	add	r3, r2
 8004538:	3b1e      	subs	r3, #30
 800453a:	2207      	movs	r2, #7
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	4019      	ands	r1, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6898      	ldr	r0, [r3, #8]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	4413      	add	r3, r2
 8004552:	3b1e      	subs	r3, #30
 8004554:	fa00 f203 	lsl.w	r2, r0, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	60da      	str	r2, [r3, #12]
 8004560:	e019      	b.n	8004596 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6919      	ldr	r1, [r3, #16]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	4413      	add	r3, r2
 8004572:	2207      	movs	r2, #7
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	4019      	ands	r1, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	6898      	ldr	r0, [r3, #8]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4613      	mov	r3, r2
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	4413      	add	r3, r2
 800458a:	fa00 f203 	lsl.w	r2, r0, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b10      	cmp	r3, #16
 800459c:	d003      	beq.n	80045a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045a2:	2b11      	cmp	r3, #17
 80045a4:	d132      	bne.n	800460c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a1d      	ldr	r2, [pc, #116]	; (8004620 <HAL_ADC_ConfigChannel+0x1e4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d125      	bne.n	80045fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d126      	bne.n	800460c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80045cc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b10      	cmp	r3, #16
 80045d4:	d11a      	bne.n	800460c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80045d6:	4b13      	ldr	r3, [pc, #76]	; (8004624 <HAL_ADC_ConfigChannel+0x1e8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a13      	ldr	r2, [pc, #76]	; (8004628 <HAL_ADC_ConfigChannel+0x1ec>)
 80045dc:	fba2 2303 	umull	r2, r3, r2, r3
 80045e0:	0c9a      	lsrs	r2, r3, #18
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80045ec:	e002      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f9      	bne.n	80045ee <HAL_ADC_ConfigChannel+0x1b2>
 80045fa:	e007      	b.n	800460c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	f043 0220 	orr.w	r2, r3, #32
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004614:	7bfb      	ldrb	r3, [r7, #15]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	40012400 	.word	0x40012400
 8004624:	20000024 	.word	0x20000024
 8004628:	431bde83 	.word	0x431bde83

0800462c <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a24      	ldr	r2, [pc, #144]	; (80046cc <HAL_ADC_AnalogWDGConfig+0xa0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d003      	beq.n	8004648 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004644:	4a22      	ldr	r2, [pc, #136]	; (80046d0 <HAL_ADC_AnalogWDGConfig+0xa4>)
 8004646:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_ADC_AnalogWDGConfig+0x2a>
 8004652:	2302      	movs	r3, #2
 8004654:	e035      	b.n	80046c2 <HAL_ADC_AnalogWDGConfig+0x96>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	7a1b      	ldrb	r3, [r3, #8]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d108      	bne.n	8004678 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	e007      	b.n	8004688 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004686:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8004690:	4013      	ands	r3, r2
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	6811      	ldr	r1, [r2, #0]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	6852      	ldr	r2, [r2, #4]
 800469a:	4311      	orrs	r1, r2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	430b      	orrs	r3, r1
 80046a2:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	68d2      	ldr	r2, [r2, #12]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	6912      	ldr	r2, [r2, #16]
 80046b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	00800200 	.word	0x00800200
 80046d0:	00400200 	.word	0x00400200
 80046d4:	ff3ffde0 	.word	0xff3ffde0

080046d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d039      	beq.n	800476a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0201 	orr.w	r2, r2, #1
 8004704:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <ADC_Enable+0x9c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <ADC_Enable+0xa0>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	0c9b      	lsrs	r3, r3, #18
 8004712:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004714:	e002      	b.n	800471c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3b01      	subs	r3, #1
 800471a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f9      	bne.n	8004716 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004722:	f7ff fc8b 	bl	800403c <HAL_GetTick>
 8004726:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004728:	e018      	b.n	800475c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800472a:	f7ff fc87 	bl	800403c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d911      	bls.n	800475c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	f043 0210 	orr.w	r2, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	f043 0201 	orr.w	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e007      	b.n	800476c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b01      	cmp	r3, #1
 8004768:	d1df      	bne.n	800472a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000024 	.word	0x20000024
 8004778:	431bde83 	.word	0x431bde83

0800477c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b01      	cmp	r3, #1
 8004794:	d127      	bne.n	80047e6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0201 	bic.w	r2, r2, #1
 80047a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80047a6:	f7ff fc49 	bl	800403c <HAL_GetTick>
 80047aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80047ac:	e014      	b.n	80047d8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80047ae:	f7ff fc45 	bl	800403c <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d90d      	bls.n	80047d8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	f043 0210 	orr.w	r2, r3, #16
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	f043 0201 	orr.w	r2, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e007      	b.n	80047e8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d0e3      	beq.n	80047ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004806:	2b00      	cmp	r3, #0
 8004808:	d127      	bne.n	800485a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004820:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004824:	d115      	bne.n	8004852 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800482a:	2b00      	cmp	r3, #0
 800482c:	d111      	bne.n	8004852 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d105      	bne.n	8004852 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	f043 0201 	orr.w	r2, r3, #1
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff fdd6 	bl	8004404 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004858:	e004      	b.n	8004864 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
}
 8004864:	bf00      	nop
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7ff fdcb 	bl	8004416 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	f043 0204 	orr.w	r2, r3, #4
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7ff fdba 	bl	8004428 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <__NVIC_SetPriorityGrouping+0x44>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048d8:	4013      	ands	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ee:	4a04      	ldr	r2, [pc, #16]	; (8004900 <__NVIC_SetPriorityGrouping+0x44>)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	60d3      	str	r3, [r2, #12]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	e000ed00 	.word	0xe000ed00

08004904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004908:	4b04      	ldr	r3, [pc, #16]	; (800491c <__NVIC_GetPriorityGrouping+0x18>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	f003 0307 	and.w	r3, r3, #7
}
 8004912:	4618      	mov	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	e000ed00 	.word	0xe000ed00

08004920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	2b00      	cmp	r3, #0
 8004930:	db0b      	blt.n	800494a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	f003 021f 	and.w	r2, r3, #31
 8004938:	4906      	ldr	r1, [pc, #24]	; (8004954 <__NVIC_EnableIRQ+0x34>)
 800493a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2001      	movs	r0, #1
 8004942:	fa00 f202 	lsl.w	r2, r0, r2
 8004946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr
 8004954:	e000e100 	.word	0xe000e100

08004958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	6039      	str	r1, [r7, #0]
 8004962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004968:	2b00      	cmp	r3, #0
 800496a:	db0a      	blt.n	8004982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	b2da      	uxtb	r2, r3
 8004970:	490c      	ldr	r1, [pc, #48]	; (80049a4 <__NVIC_SetPriority+0x4c>)
 8004972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004976:	0112      	lsls	r2, r2, #4
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	440b      	add	r3, r1
 800497c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004980:	e00a      	b.n	8004998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	b2da      	uxtb	r2, r3
 8004986:	4908      	ldr	r1, [pc, #32]	; (80049a8 <__NVIC_SetPriority+0x50>)
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	3b04      	subs	r3, #4
 8004990:	0112      	lsls	r2, r2, #4
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	440b      	add	r3, r1
 8004996:	761a      	strb	r2, [r3, #24]
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	e000e100 	.word	0xe000e100
 80049a8:	e000ed00 	.word	0xe000ed00

080049ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b089      	sub	sp, #36	; 0x24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f1c3 0307 	rsb	r3, r3, #7
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	bf28      	it	cs
 80049ca:	2304      	movcs	r3, #4
 80049cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3304      	adds	r3, #4
 80049d2:	2b06      	cmp	r3, #6
 80049d4:	d902      	bls.n	80049dc <NVIC_EncodePriority+0x30>
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	3b03      	subs	r3, #3
 80049da:	e000      	b.n	80049de <NVIC_EncodePriority+0x32>
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43da      	mvns	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	401a      	ands	r2, r3
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	fa01 f303 	lsl.w	r3, r1, r3
 80049fe:	43d9      	mvns	r1, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a04:	4313      	orrs	r3, r2
         );
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3724      	adds	r7, #36	; 0x24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a20:	d301      	bcc.n	8004a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a22:	2301      	movs	r3, #1
 8004a24:	e00f      	b.n	8004a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a26:	4a0a      	ldr	r2, [pc, #40]	; (8004a50 <SysTick_Config+0x40>)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a2e:	210f      	movs	r1, #15
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a34:	f7ff ff90 	bl	8004958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <SysTick_Config+0x40>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a3e:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <SysTick_Config+0x40>)
 8004a40:	2207      	movs	r2, #7
 8004a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	e000e010 	.word	0xe000e010

08004a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff ff2d 	bl	80048bc <__NVIC_SetPriorityGrouping>
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b086      	sub	sp, #24
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	4603      	mov	r3, r0
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a7c:	f7ff ff42 	bl	8004904 <__NVIC_GetPriorityGrouping>
 8004a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	6978      	ldr	r0, [r7, #20]
 8004a88:	f7ff ff90 	bl	80049ac <NVIC_EncodePriority>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a92:	4611      	mov	r1, r2
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff ff5f 	bl	8004958 <__NVIC_SetPriority>
}
 8004a9a:	bf00      	nop
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff ff35 	bl	8004920 <__NVIC_EnableIRQ>
}
 8004ab6:	bf00      	nop
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff ffa2 	bl	8004a10 <SysTick_Config>
 8004acc:	4603      	mov	r3, r0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e043      	b.n	8004b76 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	4b22      	ldr	r3, [pc, #136]	; (8004b80 <HAL_DMA_Init+0xa8>)
 8004af6:	4413      	add	r3, r2
 8004af8:	4a22      	ldr	r2, [pc, #136]	; (8004b84 <HAL_DMA_Init+0xac>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	009a      	lsls	r2, r3, #2
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a1f      	ldr	r2, [pc, #124]	; (8004b88 <HAL_DMA_Init+0xb0>)
 8004b0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004b22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004b26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr
 8004b80:	bffdfff8 	.word	0xbffdfff8
 8004b84:	cccccccd 	.word	0xcccccccd
 8004b88:	40020000 	.word	0x40020000

08004b8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_DMA_Start_IT+0x20>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e04a      	b.n	8004c42 <HAL_DMA_Start_IT+0xb6>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d13a      	bne.n	8004c34 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0201 	bic.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f938 	bl	8004e58 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d008      	beq.n	8004c02 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 020e 	orr.w	r2, r2, #14
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	e00f      	b.n	8004c22 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0204 	bic.w	r2, r2, #4
 8004c10:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 020a 	orr.w	r2, r2, #10
 8004c20:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	e005      	b.n	8004c40 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	2204      	movs	r2, #4
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d04f      	beq.n	8004d14 <HAL_DMA_IRQHandler+0xc8>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d04a      	beq.n	8004d14 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d107      	bne.n	8004c9c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0204 	bic.w	r2, r2, #4
 8004c9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a66      	ldr	r2, [pc, #408]	; (8004e3c <HAL_DMA_IRQHandler+0x1f0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d029      	beq.n	8004cfa <HAL_DMA_IRQHandler+0xae>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a65      	ldr	r2, [pc, #404]	; (8004e40 <HAL_DMA_IRQHandler+0x1f4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d022      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0xaa>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a63      	ldr	r2, [pc, #396]	; (8004e44 <HAL_DMA_IRQHandler+0x1f8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d01a      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0xa4>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a62      	ldr	r2, [pc, #392]	; (8004e48 <HAL_DMA_IRQHandler+0x1fc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d012      	beq.n	8004cea <HAL_DMA_IRQHandler+0x9e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a60      	ldr	r2, [pc, #384]	; (8004e4c <HAL_DMA_IRQHandler+0x200>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x98>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a5f      	ldr	r2, [pc, #380]	; (8004e50 <HAL_DMA_IRQHandler+0x204>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d102      	bne.n	8004cde <HAL_DMA_IRQHandler+0x92>
 8004cd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004cdc:	e00e      	b.n	8004cfc <HAL_DMA_IRQHandler+0xb0>
 8004cde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004ce2:	e00b      	b.n	8004cfc <HAL_DMA_IRQHandler+0xb0>
 8004ce4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ce8:	e008      	b.n	8004cfc <HAL_DMA_IRQHandler+0xb0>
 8004cea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cee:	e005      	b.n	8004cfc <HAL_DMA_IRQHandler+0xb0>
 8004cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf4:	e002      	b.n	8004cfc <HAL_DMA_IRQHandler+0xb0>
 8004cf6:	2340      	movs	r3, #64	; 0x40
 8004cf8:	e000      	b.n	8004cfc <HAL_DMA_IRQHandler+0xb0>
 8004cfa:	2304      	movs	r3, #4
 8004cfc:	4a55      	ldr	r2, [pc, #340]	; (8004e54 <HAL_DMA_IRQHandler+0x208>)
 8004cfe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8094 	beq.w	8004e32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004d12:	e08e      	b.n	8004e32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	2202      	movs	r2, #2
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d056      	beq.n	8004dd2 <HAL_DMA_IRQHandler+0x186>
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d051      	beq.n	8004dd2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10b      	bne.n	8004d54 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 020a 	bic.w	r2, r2, #10
 8004d4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a38      	ldr	r2, [pc, #224]	; (8004e3c <HAL_DMA_IRQHandler+0x1f0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d029      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x166>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a37      	ldr	r2, [pc, #220]	; (8004e40 <HAL_DMA_IRQHandler+0x1f4>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d022      	beq.n	8004dae <HAL_DMA_IRQHandler+0x162>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a35      	ldr	r2, [pc, #212]	; (8004e44 <HAL_DMA_IRQHandler+0x1f8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01a      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x15c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a34      	ldr	r2, [pc, #208]	; (8004e48 <HAL_DMA_IRQHandler+0x1fc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d012      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x156>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a32      	ldr	r2, [pc, #200]	; (8004e4c <HAL_DMA_IRQHandler+0x200>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00a      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x150>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a31      	ldr	r2, [pc, #196]	; (8004e50 <HAL_DMA_IRQHandler+0x204>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d102      	bne.n	8004d96 <HAL_DMA_IRQHandler+0x14a>
 8004d90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d94:	e00e      	b.n	8004db4 <HAL_DMA_IRQHandler+0x168>
 8004d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d9a:	e00b      	b.n	8004db4 <HAL_DMA_IRQHandler+0x168>
 8004d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004da0:	e008      	b.n	8004db4 <HAL_DMA_IRQHandler+0x168>
 8004da2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004da6:	e005      	b.n	8004db4 <HAL_DMA_IRQHandler+0x168>
 8004da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dac:	e002      	b.n	8004db4 <HAL_DMA_IRQHandler+0x168>
 8004dae:	2320      	movs	r3, #32
 8004db0:	e000      	b.n	8004db4 <HAL_DMA_IRQHandler+0x168>
 8004db2:	2302      	movs	r3, #2
 8004db4:	4a27      	ldr	r2, [pc, #156]	; (8004e54 <HAL_DMA_IRQHandler+0x208>)
 8004db6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d034      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004dd0:	e02f      	b.n	8004e32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	2208      	movs	r2, #8
 8004dd8:	409a      	lsls	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d028      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x1e8>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d023      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 020e 	bic.w	r2, r2, #14
 8004dfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e04:	2101      	movs	r1, #1
 8004e06:	fa01 f202 	lsl.w	r2, r1, r2
 8004e0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d004      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	4798      	blx	r3
    }
  }
  return;
 8004e32:	bf00      	nop
 8004e34:	bf00      	nop
}
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40020008 	.word	0x40020008
 8004e40:	4002001c 	.word	0x4002001c
 8004e44:	40020030 	.word	0x40020030
 8004e48:	40020044 	.word	0x40020044
 8004e4c:	40020058 	.word	0x40020058
 8004e50:	4002006c 	.word	0x4002006c
 8004e54:	40020000 	.word	0x40020000

08004e58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6e:	2101      	movs	r1, #1
 8004e70:	fa01 f202 	lsl.w	r2, r1, r2
 8004e74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	d108      	bne.n	8004e98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e96:	e007      	b.n	8004ea8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	60da      	str	r2, [r3, #12]
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr
	...

08004eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b08b      	sub	sp, #44	; 0x2c
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ec6:	e169      	b.n	800519c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ec8:	2201      	movs	r2, #1
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	f040 8158 	bne.w	8005196 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4a9a      	ldr	r2, [pc, #616]	; (8005154 <HAL_GPIO_Init+0x2a0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d05e      	beq.n	8004fae <HAL_GPIO_Init+0xfa>
 8004ef0:	4a98      	ldr	r2, [pc, #608]	; (8005154 <HAL_GPIO_Init+0x2a0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d875      	bhi.n	8004fe2 <HAL_GPIO_Init+0x12e>
 8004ef6:	4a98      	ldr	r2, [pc, #608]	; (8005158 <HAL_GPIO_Init+0x2a4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d058      	beq.n	8004fae <HAL_GPIO_Init+0xfa>
 8004efc:	4a96      	ldr	r2, [pc, #600]	; (8005158 <HAL_GPIO_Init+0x2a4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d86f      	bhi.n	8004fe2 <HAL_GPIO_Init+0x12e>
 8004f02:	4a96      	ldr	r2, [pc, #600]	; (800515c <HAL_GPIO_Init+0x2a8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d052      	beq.n	8004fae <HAL_GPIO_Init+0xfa>
 8004f08:	4a94      	ldr	r2, [pc, #592]	; (800515c <HAL_GPIO_Init+0x2a8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d869      	bhi.n	8004fe2 <HAL_GPIO_Init+0x12e>
 8004f0e:	4a94      	ldr	r2, [pc, #592]	; (8005160 <HAL_GPIO_Init+0x2ac>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d04c      	beq.n	8004fae <HAL_GPIO_Init+0xfa>
 8004f14:	4a92      	ldr	r2, [pc, #584]	; (8005160 <HAL_GPIO_Init+0x2ac>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d863      	bhi.n	8004fe2 <HAL_GPIO_Init+0x12e>
 8004f1a:	4a92      	ldr	r2, [pc, #584]	; (8005164 <HAL_GPIO_Init+0x2b0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d046      	beq.n	8004fae <HAL_GPIO_Init+0xfa>
 8004f20:	4a90      	ldr	r2, [pc, #576]	; (8005164 <HAL_GPIO_Init+0x2b0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d85d      	bhi.n	8004fe2 <HAL_GPIO_Init+0x12e>
 8004f26:	2b12      	cmp	r3, #18
 8004f28:	d82a      	bhi.n	8004f80 <HAL_GPIO_Init+0xcc>
 8004f2a:	2b12      	cmp	r3, #18
 8004f2c:	d859      	bhi.n	8004fe2 <HAL_GPIO_Init+0x12e>
 8004f2e:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <HAL_GPIO_Init+0x80>)
 8004f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f34:	08004faf 	.word	0x08004faf
 8004f38:	08004f89 	.word	0x08004f89
 8004f3c:	08004f9b 	.word	0x08004f9b
 8004f40:	08004fdd 	.word	0x08004fdd
 8004f44:	08004fe3 	.word	0x08004fe3
 8004f48:	08004fe3 	.word	0x08004fe3
 8004f4c:	08004fe3 	.word	0x08004fe3
 8004f50:	08004fe3 	.word	0x08004fe3
 8004f54:	08004fe3 	.word	0x08004fe3
 8004f58:	08004fe3 	.word	0x08004fe3
 8004f5c:	08004fe3 	.word	0x08004fe3
 8004f60:	08004fe3 	.word	0x08004fe3
 8004f64:	08004fe3 	.word	0x08004fe3
 8004f68:	08004fe3 	.word	0x08004fe3
 8004f6c:	08004fe3 	.word	0x08004fe3
 8004f70:	08004fe3 	.word	0x08004fe3
 8004f74:	08004fe3 	.word	0x08004fe3
 8004f78:	08004f91 	.word	0x08004f91
 8004f7c:	08004fa5 	.word	0x08004fa5
 8004f80:	4a79      	ldr	r2, [pc, #484]	; (8005168 <HAL_GPIO_Init+0x2b4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004f86:	e02c      	b.n	8004fe2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	623b      	str	r3, [r7, #32]
          break;
 8004f8e:	e029      	b.n	8004fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	3304      	adds	r3, #4
 8004f96:	623b      	str	r3, [r7, #32]
          break;
 8004f98:	e024      	b.n	8004fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	623b      	str	r3, [r7, #32]
          break;
 8004fa2:	e01f      	b.n	8004fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	623b      	str	r3, [r7, #32]
          break;
 8004fac:	e01a      	b.n	8004fe4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d102      	bne.n	8004fbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004fb6:	2304      	movs	r3, #4
 8004fb8:	623b      	str	r3, [r7, #32]
          break;
 8004fba:	e013      	b.n	8004fe4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d105      	bne.n	8004fd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	611a      	str	r2, [r3, #16]
          break;
 8004fce:	e009      	b.n	8004fe4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fd0:	2308      	movs	r3, #8
 8004fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	615a      	str	r2, [r3, #20]
          break;
 8004fda:	e003      	b.n	8004fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	623b      	str	r3, [r7, #32]
          break;
 8004fe0:	e000      	b.n	8004fe4 <HAL_GPIO_Init+0x130>
          break;
 8004fe2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	2bff      	cmp	r3, #255	; 0xff
 8004fe8:	d801      	bhi.n	8004fee <HAL_GPIO_Init+0x13a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	e001      	b.n	8004ff2 <HAL_GPIO_Init+0x13e>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2bff      	cmp	r3, #255	; 0xff
 8004ff8:	d802      	bhi.n	8005000 <HAL_GPIO_Init+0x14c>
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	e002      	b.n	8005006 <HAL_GPIO_Init+0x152>
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	3b08      	subs	r3, #8
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	210f      	movs	r1, #15
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	fa01 f303 	lsl.w	r3, r1, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	401a      	ands	r2, r3
 8005018:	6a39      	ldr	r1, [r7, #32]
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	fa01 f303 	lsl.w	r3, r1, r3
 8005020:	431a      	orrs	r2, r3
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 80b1 	beq.w	8005196 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005034:	4b4d      	ldr	r3, [pc, #308]	; (800516c <HAL_GPIO_Init+0x2b8>)
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	4a4c      	ldr	r2, [pc, #304]	; (800516c <HAL_GPIO_Init+0x2b8>)
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	6193      	str	r3, [r2, #24]
 8005040:	4b4a      	ldr	r3, [pc, #296]	; (800516c <HAL_GPIO_Init+0x2b8>)
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800504c:	4a48      	ldr	r2, [pc, #288]	; (8005170 <HAL_GPIO_Init+0x2bc>)
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	089b      	lsrs	r3, r3, #2
 8005052:	3302      	adds	r3, #2
 8005054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005058:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	220f      	movs	r2, #15
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	43db      	mvns	r3, r3
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4013      	ands	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a40      	ldr	r2, [pc, #256]	; (8005174 <HAL_GPIO_Init+0x2c0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <HAL_GPIO_Init+0x1ec>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a3f      	ldr	r2, [pc, #252]	; (8005178 <HAL_GPIO_Init+0x2c4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00d      	beq.n	800509c <HAL_GPIO_Init+0x1e8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a3e      	ldr	r2, [pc, #248]	; (800517c <HAL_GPIO_Init+0x2c8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d007      	beq.n	8005098 <HAL_GPIO_Init+0x1e4>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a3d      	ldr	r2, [pc, #244]	; (8005180 <HAL_GPIO_Init+0x2cc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d101      	bne.n	8005094 <HAL_GPIO_Init+0x1e0>
 8005090:	2303      	movs	r3, #3
 8005092:	e006      	b.n	80050a2 <HAL_GPIO_Init+0x1ee>
 8005094:	2304      	movs	r3, #4
 8005096:	e004      	b.n	80050a2 <HAL_GPIO_Init+0x1ee>
 8005098:	2302      	movs	r3, #2
 800509a:	e002      	b.n	80050a2 <HAL_GPIO_Init+0x1ee>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <HAL_GPIO_Init+0x1ee>
 80050a0:	2300      	movs	r3, #0
 80050a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a4:	f002 0203 	and.w	r2, r2, #3
 80050a8:	0092      	lsls	r2, r2, #2
 80050aa:	4093      	lsls	r3, r2
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80050b2:	492f      	ldr	r1, [pc, #188]	; (8005170 <HAL_GPIO_Init+0x2bc>)
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	089b      	lsrs	r3, r3, #2
 80050b8:	3302      	adds	r3, #2
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d006      	beq.n	80050da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80050cc:	4b2d      	ldr	r3, [pc, #180]	; (8005184 <HAL_GPIO_Init+0x2d0>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	492c      	ldr	r1, [pc, #176]	; (8005184 <HAL_GPIO_Init+0x2d0>)
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	600b      	str	r3, [r1, #0]
 80050d8:	e006      	b.n	80050e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80050da:	4b2a      	ldr	r3, [pc, #168]	; (8005184 <HAL_GPIO_Init+0x2d0>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	43db      	mvns	r3, r3
 80050e2:	4928      	ldr	r1, [pc, #160]	; (8005184 <HAL_GPIO_Init+0x2d0>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d006      	beq.n	8005102 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80050f4:	4b23      	ldr	r3, [pc, #140]	; (8005184 <HAL_GPIO_Init+0x2d0>)
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	4922      	ldr	r1, [pc, #136]	; (8005184 <HAL_GPIO_Init+0x2d0>)
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	604b      	str	r3, [r1, #4]
 8005100:	e006      	b.n	8005110 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005102:	4b20      	ldr	r3, [pc, #128]	; (8005184 <HAL_GPIO_Init+0x2d0>)
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	43db      	mvns	r3, r3
 800510a:	491e      	ldr	r1, [pc, #120]	; (8005184 <HAL_GPIO_Init+0x2d0>)
 800510c:	4013      	ands	r3, r2
 800510e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d006      	beq.n	800512a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800511c:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_GPIO_Init+0x2d0>)
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	4918      	ldr	r1, [pc, #96]	; (8005184 <HAL_GPIO_Init+0x2d0>)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	4313      	orrs	r3, r2
 8005126:	608b      	str	r3, [r1, #8]
 8005128:	e006      	b.n	8005138 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800512a:	4b16      	ldr	r3, [pc, #88]	; (8005184 <HAL_GPIO_Init+0x2d0>)
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	43db      	mvns	r3, r3
 8005132:	4914      	ldr	r1, [pc, #80]	; (8005184 <HAL_GPIO_Init+0x2d0>)
 8005134:	4013      	ands	r3, r2
 8005136:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d021      	beq.n	8005188 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005144:	4b0f      	ldr	r3, [pc, #60]	; (8005184 <HAL_GPIO_Init+0x2d0>)
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	490e      	ldr	r1, [pc, #56]	; (8005184 <HAL_GPIO_Init+0x2d0>)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	60cb      	str	r3, [r1, #12]
 8005150:	e021      	b.n	8005196 <HAL_GPIO_Init+0x2e2>
 8005152:	bf00      	nop
 8005154:	10320000 	.word	0x10320000
 8005158:	10310000 	.word	0x10310000
 800515c:	10220000 	.word	0x10220000
 8005160:	10210000 	.word	0x10210000
 8005164:	10120000 	.word	0x10120000
 8005168:	10110000 	.word	0x10110000
 800516c:	40021000 	.word	0x40021000
 8005170:	40010000 	.word	0x40010000
 8005174:	40010800 	.word	0x40010800
 8005178:	40010c00 	.word	0x40010c00
 800517c:	40011000 	.word	0x40011000
 8005180:	40011400 	.word	0x40011400
 8005184:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_GPIO_Init+0x304>)
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	43db      	mvns	r3, r3
 8005190:	4909      	ldr	r1, [pc, #36]	; (80051b8 <HAL_GPIO_Init+0x304>)
 8005192:	4013      	ands	r3, r2
 8005194:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	3301      	adds	r3, #1
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	fa22 f303 	lsr.w	r3, r2, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f47f ae8e 	bne.w	8004ec8 <HAL_GPIO_Init+0x14>
  }
}
 80051ac:	bf00      	nop
 80051ae:	bf00      	nop
 80051b0:	372c      	adds	r7, #44	; 0x2c
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr
 80051b8:	40010400 	.word	0x40010400

080051bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	887b      	ldrh	r3, [r7, #2]
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
 80051d8:	e001      	b.n	80051de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051da:	2300      	movs	r3, #0
 80051dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051de:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bc80      	pop	{r7}
 80051e8:	4770      	bx	lr

080051ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	460b      	mov	r3, r1
 80051f4:	807b      	strh	r3, [r7, #2]
 80051f6:	4613      	mov	r3, r2
 80051f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051fa:	787b      	ldrb	r3, [r7, #1]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005200:	887a      	ldrh	r2, [r7, #2]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005206:	e003      	b.n	8005210 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005208:	887b      	ldrh	r3, [r7, #2]
 800520a:	041a      	lsls	r2, r3, #16
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	611a      	str	r2, [r3, #16]
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr
	...

0800521c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005226:	4b08      	ldr	r3, [pc, #32]	; (8005248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005228:	695a      	ldr	r2, [r3, #20]
 800522a:	88fb      	ldrh	r3, [r7, #6]
 800522c:	4013      	ands	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d006      	beq.n	8005240 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005232:	4a05      	ldr	r2, [pc, #20]	; (8005248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f806 	bl	800524c <HAL_GPIO_EXTI_Callback>
  }
}
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40010400 	.word	0x40010400

0800524c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e26c      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 8087 	beq.w	800538e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005280:	4b92      	ldr	r3, [pc, #584]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f003 030c 	and.w	r3, r3, #12
 8005288:	2b04      	cmp	r3, #4
 800528a:	d00c      	beq.n	80052a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800528c:	4b8f      	ldr	r3, [pc, #572]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f003 030c 	and.w	r3, r3, #12
 8005294:	2b08      	cmp	r3, #8
 8005296:	d112      	bne.n	80052be <HAL_RCC_OscConfig+0x5e>
 8005298:	4b8c      	ldr	r3, [pc, #560]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a4:	d10b      	bne.n	80052be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a6:	4b89      	ldr	r3, [pc, #548]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d06c      	beq.n	800538c <HAL_RCC_OscConfig+0x12c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d168      	bne.n	800538c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e246      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c6:	d106      	bne.n	80052d6 <HAL_RCC_OscConfig+0x76>
 80052c8:	4b80      	ldr	r3, [pc, #512]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a7f      	ldr	r2, [pc, #508]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80052ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	e02e      	b.n	8005334 <HAL_RCC_OscConfig+0xd4>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10c      	bne.n	80052f8 <HAL_RCC_OscConfig+0x98>
 80052de:	4b7b      	ldr	r3, [pc, #492]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a7a      	ldr	r2, [pc, #488]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80052e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	4b78      	ldr	r3, [pc, #480]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a77      	ldr	r2, [pc, #476]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80052f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e01d      	b.n	8005334 <HAL_RCC_OscConfig+0xd4>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005300:	d10c      	bne.n	800531c <HAL_RCC_OscConfig+0xbc>
 8005302:	4b72      	ldr	r3, [pc, #456]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a71      	ldr	r2, [pc, #452]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	4b6f      	ldr	r3, [pc, #444]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a6e      	ldr	r2, [pc, #440]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	e00b      	b.n	8005334 <HAL_RCC_OscConfig+0xd4>
 800531c:	4b6b      	ldr	r3, [pc, #428]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a6a      	ldr	r2, [pc, #424]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	4b68      	ldr	r3, [pc, #416]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a67      	ldr	r2, [pc, #412]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 800532e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005332:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d013      	beq.n	8005364 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7fe fe7e 	bl	800403c <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005344:	f7fe fe7a 	bl	800403c <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b64      	cmp	r3, #100	; 0x64
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e1fa      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005356:	4b5d      	ldr	r3, [pc, #372]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0xe4>
 8005362:	e014      	b.n	800538e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005364:	f7fe fe6a 	bl	800403c <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800536c:	f7fe fe66 	bl	800403c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b64      	cmp	r3, #100	; 0x64
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e1e6      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800537e:	4b53      	ldr	r3, [pc, #332]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x10c>
 800538a:	e000      	b.n	800538e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800538c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d063      	beq.n	8005462 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800539a:	4b4c      	ldr	r3, [pc, #304]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f003 030c 	and.w	r3, r3, #12
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80053a6:	4b49      	ldr	r3, [pc, #292]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f003 030c 	and.w	r3, r3, #12
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d11c      	bne.n	80053ec <HAL_RCC_OscConfig+0x18c>
 80053b2:	4b46      	ldr	r3, [pc, #280]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d116      	bne.n	80053ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053be:	4b43      	ldr	r3, [pc, #268]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <HAL_RCC_OscConfig+0x176>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d001      	beq.n	80053d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e1ba      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d6:	4b3d      	ldr	r3, [pc, #244]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4939      	ldr	r1, [pc, #228]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ea:	e03a      	b.n	8005462 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d020      	beq.n	8005436 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053f4:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <HAL_RCC_OscConfig+0x270>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fa:	f7fe fe1f 	bl	800403c <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005402:	f7fe fe1b 	bl	800403c <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e19b      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005414:	4b2d      	ldr	r3, [pc, #180]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f0      	beq.n	8005402 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005420:	4b2a      	ldr	r3, [pc, #168]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	4927      	ldr	r1, [pc, #156]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005430:	4313      	orrs	r3, r2
 8005432:	600b      	str	r3, [r1, #0]
 8005434:	e015      	b.n	8005462 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005436:	4b26      	ldr	r3, [pc, #152]	; (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543c:	f7fe fdfe 	bl	800403c <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005444:	f7fe fdfa 	bl	800403c <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e17a      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005456:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f0      	bne.n	8005444 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d03a      	beq.n	80054e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d019      	beq.n	80054aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005476:	4b17      	ldr	r3, [pc, #92]	; (80054d4 <HAL_RCC_OscConfig+0x274>)
 8005478:	2201      	movs	r2, #1
 800547a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800547c:	f7fe fdde 	bl	800403c <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005484:	f7fe fdda 	bl	800403c <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e15a      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005496:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80054a2:	2001      	movs	r0, #1
 80054a4:	f000 fad8 	bl	8005a58 <RCC_Delay>
 80054a8:	e01c      	b.n	80054e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054aa:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <HAL_RCC_OscConfig+0x274>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b0:	f7fe fdc4 	bl	800403c <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b6:	e00f      	b.n	80054d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b8:	f7fe fdc0 	bl	800403c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d908      	bls.n	80054d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e140      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	42420000 	.word	0x42420000
 80054d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d8:	4b9e      	ldr	r3, [pc, #632]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e9      	bne.n	80054b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80a6 	beq.w	800563e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054f2:	2300      	movs	r3, #0
 80054f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f6:	4b97      	ldr	r3, [pc, #604]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10d      	bne.n	800551e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005502:	4b94      	ldr	r3, [pc, #592]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	4a93      	ldr	r2, [pc, #588]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800550c:	61d3      	str	r3, [r2, #28]
 800550e:	4b91      	ldr	r3, [pc, #580]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005516:	60bb      	str	r3, [r7, #8]
 8005518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800551a:	2301      	movs	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551e:	4b8e      	ldr	r3, [pc, #568]	; (8005758 <HAL_RCC_OscConfig+0x4f8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005526:	2b00      	cmp	r3, #0
 8005528:	d118      	bne.n	800555c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800552a:	4b8b      	ldr	r3, [pc, #556]	; (8005758 <HAL_RCC_OscConfig+0x4f8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a8a      	ldr	r2, [pc, #552]	; (8005758 <HAL_RCC_OscConfig+0x4f8>)
 8005530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005536:	f7fe fd81 	bl	800403c <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553c:	e008      	b.n	8005550 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800553e:	f7fe fd7d 	bl	800403c <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b64      	cmp	r3, #100	; 0x64
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e0fd      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005550:	4b81      	ldr	r3, [pc, #516]	; (8005758 <HAL_RCC_OscConfig+0x4f8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0f0      	beq.n	800553e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d106      	bne.n	8005572 <HAL_RCC_OscConfig+0x312>
 8005564:	4b7b      	ldr	r3, [pc, #492]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	4a7a      	ldr	r2, [pc, #488]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	6213      	str	r3, [r2, #32]
 8005570:	e02d      	b.n	80055ce <HAL_RCC_OscConfig+0x36e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10c      	bne.n	8005594 <HAL_RCC_OscConfig+0x334>
 800557a:	4b76      	ldr	r3, [pc, #472]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	4a75      	ldr	r2, [pc, #468]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005580:	f023 0301 	bic.w	r3, r3, #1
 8005584:	6213      	str	r3, [r2, #32]
 8005586:	4b73      	ldr	r3, [pc, #460]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	4a72      	ldr	r2, [pc, #456]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 800558c:	f023 0304 	bic.w	r3, r3, #4
 8005590:	6213      	str	r3, [r2, #32]
 8005592:	e01c      	b.n	80055ce <HAL_RCC_OscConfig+0x36e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b05      	cmp	r3, #5
 800559a:	d10c      	bne.n	80055b6 <HAL_RCC_OscConfig+0x356>
 800559c:	4b6d      	ldr	r3, [pc, #436]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	4a6c      	ldr	r2, [pc, #432]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055a2:	f043 0304 	orr.w	r3, r3, #4
 80055a6:	6213      	str	r3, [r2, #32]
 80055a8:	4b6a      	ldr	r3, [pc, #424]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	4a69      	ldr	r2, [pc, #420]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055ae:	f043 0301 	orr.w	r3, r3, #1
 80055b2:	6213      	str	r3, [r2, #32]
 80055b4:	e00b      	b.n	80055ce <HAL_RCC_OscConfig+0x36e>
 80055b6:	4b67      	ldr	r3, [pc, #412]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	4a66      	ldr	r2, [pc, #408]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055bc:	f023 0301 	bic.w	r3, r3, #1
 80055c0:	6213      	str	r3, [r2, #32]
 80055c2:	4b64      	ldr	r3, [pc, #400]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	4a63      	ldr	r2, [pc, #396]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055c8:	f023 0304 	bic.w	r3, r3, #4
 80055cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d015      	beq.n	8005602 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d6:	f7fe fd31 	bl	800403c <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055dc:	e00a      	b.n	80055f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055de:	f7fe fd2d 	bl	800403c <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e0ab      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f4:	4b57      	ldr	r3, [pc, #348]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0ee      	beq.n	80055de <HAL_RCC_OscConfig+0x37e>
 8005600:	e014      	b.n	800562c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005602:	f7fe fd1b 	bl	800403c <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005608:	e00a      	b.n	8005620 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800560a:	f7fe fd17 	bl	800403c <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	f241 3288 	movw	r2, #5000	; 0x1388
 8005618:	4293      	cmp	r3, r2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e095      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005620:	4b4c      	ldr	r3, [pc, #304]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1ee      	bne.n	800560a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d105      	bne.n	800563e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005632:	4b48      	ldr	r3, [pc, #288]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	4a47      	ldr	r2, [pc, #284]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800563c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 8081 	beq.w	800574a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005648:	4b42      	ldr	r3, [pc, #264]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 030c 	and.w	r3, r3, #12
 8005650:	2b08      	cmp	r3, #8
 8005652:	d061      	beq.n	8005718 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d146      	bne.n	80056ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565c:	4b3f      	ldr	r3, [pc, #252]	; (800575c <HAL_RCC_OscConfig+0x4fc>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005662:	f7fe fceb 	bl	800403c <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005668:	e008      	b.n	800567c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800566a:	f7fe fce7 	bl	800403c <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e067      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800567c:	4b35      	ldr	r3, [pc, #212]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1f0      	bne.n	800566a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005690:	d108      	bne.n	80056a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005692:	4b30      	ldr	r3, [pc, #192]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	492d      	ldr	r1, [pc, #180]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056a4:	4b2b      	ldr	r3, [pc, #172]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a19      	ldr	r1, [r3, #32]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	430b      	orrs	r3, r1
 80056b6:	4927      	ldr	r1, [pc, #156]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056bc:	4b27      	ldr	r3, [pc, #156]	; (800575c <HAL_RCC_OscConfig+0x4fc>)
 80056be:	2201      	movs	r2, #1
 80056c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c2:	f7fe fcbb 	bl	800403c <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ca:	f7fe fcb7 	bl	800403c <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e037      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056dc:	4b1d      	ldr	r3, [pc, #116]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0f0      	beq.n	80056ca <HAL_RCC_OscConfig+0x46a>
 80056e8:	e02f      	b.n	800574a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ea:	4b1c      	ldr	r3, [pc, #112]	; (800575c <HAL_RCC_OscConfig+0x4fc>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f0:	f7fe fca4 	bl	800403c <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f8:	f7fe fca0 	bl	800403c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e020      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800570a:	4b12      	ldr	r3, [pc, #72]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x498>
 8005716:	e018      	b.n	800574a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e013      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	429a      	cmp	r2, r3
 8005736:	d106      	bne.n	8005746 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005742:	429a      	cmp	r2, r3
 8005744:	d001      	beq.n	800574a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000
 8005758:	40007000 	.word	0x40007000
 800575c:	42420060 	.word	0x42420060

08005760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0d0      	b.n	8005916 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005774:	4b6a      	ldr	r3, [pc, #424]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d910      	bls.n	80057a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005782:	4b67      	ldr	r3, [pc, #412]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f023 0207 	bic.w	r2, r3, #7
 800578a:	4965      	ldr	r1, [pc, #404]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	4313      	orrs	r3, r2
 8005790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005792:	4b63      	ldr	r3, [pc, #396]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d001      	beq.n	80057a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0b8      	b.n	8005916 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d020      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057bc:	4b59      	ldr	r3, [pc, #356]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	4a58      	ldr	r2, [pc, #352]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80057c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057d4:	4b53      	ldr	r3, [pc, #332]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	4a52      	ldr	r2, [pc, #328]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80057da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80057de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e0:	4b50      	ldr	r3, [pc, #320]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	494d      	ldr	r1, [pc, #308]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d040      	beq.n	8005880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d107      	bne.n	8005816 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005806:	4b47      	ldr	r3, [pc, #284]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d115      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e07f      	b.n	8005916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d107      	bne.n	800582e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581e:	4b41      	ldr	r3, [pc, #260]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e073      	b.n	8005916 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582e:	4b3d      	ldr	r3, [pc, #244]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e06b      	b.n	8005916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800583e:	4b39      	ldr	r3, [pc, #228]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f023 0203 	bic.w	r2, r3, #3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4936      	ldr	r1, [pc, #216]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 800584c:	4313      	orrs	r3, r2
 800584e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005850:	f7fe fbf4 	bl	800403c <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005856:	e00a      	b.n	800586e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005858:	f7fe fbf0 	bl	800403c <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	; 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e053      	b.n	8005916 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586e:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f003 020c 	and.w	r2, r3, #12
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	429a      	cmp	r2, r3
 800587e:	d1eb      	bne.n	8005858 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005880:	4b27      	ldr	r3, [pc, #156]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d210      	bcs.n	80058b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588e:	4b24      	ldr	r3, [pc, #144]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f023 0207 	bic.w	r2, r3, #7
 8005896:	4922      	ldr	r1, [pc, #136]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	4313      	orrs	r3, r2
 800589c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800589e:	4b20      	ldr	r3, [pc, #128]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d001      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e032      	b.n	8005916 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058bc:	4b19      	ldr	r3, [pc, #100]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4916      	ldr	r1, [pc, #88]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058da:	4b12      	ldr	r3, [pc, #72]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	490e      	ldr	r1, [pc, #56]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058ee:	f000 f821 	bl	8005934 <HAL_RCC_GetSysClockFreq>
 80058f2:	4602      	mov	r2, r0
 80058f4:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	490a      	ldr	r1, [pc, #40]	; (8005928 <HAL_RCC_ClockConfig+0x1c8>)
 8005900:	5ccb      	ldrb	r3, [r1, r3]
 8005902:	fa22 f303 	lsr.w	r3, r2, r3
 8005906:	4a09      	ldr	r2, [pc, #36]	; (800592c <HAL_RCC_ClockConfig+0x1cc>)
 8005908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <HAL_RCC_ClockConfig+0x1d0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fb52 	bl	8003fb8 <HAL_InitTick>

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	40022000 	.word	0x40022000
 8005924:	40021000 	.word	0x40021000
 8005928:	08006ea8 	.word	0x08006ea8
 800592c:	20000024 	.word	0x20000024
 8005930:	20000028 	.word	0x20000028

08005934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005934:	b490      	push	{r4, r7}
 8005936:	b08a      	sub	sp, #40	; 0x28
 8005938:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800593a:	4b2a      	ldr	r3, [pc, #168]	; (80059e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800593c:	1d3c      	adds	r4, r7, #4
 800593e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005944:	f240 2301 	movw	r3, #513	; 0x201
 8005948:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	2300      	movs	r3, #0
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	2300      	movs	r3, #0
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800595e:	4b22      	ldr	r3, [pc, #136]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b04      	cmp	r3, #4
 800596c:	d002      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x40>
 800596e:	2b08      	cmp	r3, #8
 8005970:	d003      	beq.n	800597a <HAL_RCC_GetSysClockFreq+0x46>
 8005972:	e02d      	b.n	80059d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005974:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005976:	623b      	str	r3, [r7, #32]
      break;
 8005978:	e02d      	b.n	80059d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	0c9b      	lsrs	r3, r3, #18
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005986:	4413      	add	r3, r2
 8005988:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800598c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d013      	beq.n	80059c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005998:	4b13      	ldr	r3, [pc, #76]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	0c5b      	lsrs	r3, r3, #17
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80059a6:	4413      	add	r3, r2
 80059a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80059ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	4a0e      	ldr	r2, [pc, #56]	; (80059ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80059b2:	fb02 f203 	mul.w	r2, r2, r3
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
 80059be:	e004      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	4a0b      	ldr	r2, [pc, #44]	; (80059f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059c4:	fb02 f303 	mul.w	r3, r2, r3
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	623b      	str	r3, [r7, #32]
      break;
 80059ce:	e002      	b.n	80059d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059d0:	4b06      	ldr	r3, [pc, #24]	; (80059ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80059d2:	623b      	str	r3, [r7, #32]
      break;
 80059d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059d6:	6a3b      	ldr	r3, [r7, #32]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3728      	adds	r7, #40	; 0x28
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc90      	pop	{r4, r7}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	08006e98 	.word	0x08006e98
 80059e8:	40021000 	.word	0x40021000
 80059ec:	007a1200 	.word	0x007a1200
 80059f0:	003d0900 	.word	0x003d0900

080059f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059f8:	4b02      	ldr	r3, [pc, #8]	; (8005a04 <HAL_RCC_GetHCLKFreq+0x10>)
 80059fa:	681b      	ldr	r3, [r3, #0]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr
 8005a04:	20000024 	.word	0x20000024

08005a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a0c:	f7ff fff2 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8005a10:	4602      	mov	r2, r0
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	0a1b      	lsrs	r3, r3, #8
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	4903      	ldr	r1, [pc, #12]	; (8005a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a1e:	5ccb      	ldrb	r3, [r1, r3]
 8005a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	08006eb8 	.word	0x08006eb8

08005a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a34:	f7ff ffde 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	0adb      	lsrs	r3, r3, #11
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	4903      	ldr	r1, [pc, #12]	; (8005a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a46:	5ccb      	ldrb	r3, [r1, r3]
 8005a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40021000 	.word	0x40021000
 8005a54:	08006eb8 	.word	0x08006eb8

08005a58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a60:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <RCC_Delay+0x34>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <RCC_Delay+0x38>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	0a5b      	lsrs	r3, r3, #9
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a74:	bf00      	nop
  }
  while (Delay --);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	1e5a      	subs	r2, r3, #1
 8005a7a:	60fa      	str	r2, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f9      	bne.n	8005a74 <RCC_Delay+0x1c>
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr
 8005a8c:	20000024 	.word	0x20000024
 8005a90:	10624dd3 	.word	0x10624dd3

08005a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	613b      	str	r3, [r7, #16]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d07d      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ab4:	4b4f      	ldr	r3, [pc, #316]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10d      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac0:	4b4c      	ldr	r3, [pc, #304]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	4a4b      	ldr	r2, [pc, #300]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aca:	61d3      	str	r3, [r2, #28]
 8005acc:	4b49      	ldr	r3, [pc, #292]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad4:	60bb      	str	r3, [r7, #8]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005adc:	4b46      	ldr	r3, [pc, #280]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d118      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ae8:	4b43      	ldr	r3, [pc, #268]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a42      	ldr	r2, [pc, #264]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005af4:	f7fe faa2 	bl	800403c <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005afa:	e008      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005afc:	f7fe fa9e 	bl	800403c <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b64      	cmp	r3, #100	; 0x64
 8005b08:	d901      	bls.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e06d      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b0e:	4b3a      	ldr	r3, [pc, #232]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b1a:	4b36      	ldr	r3, [pc, #216]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d02e      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d027      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b38:	4b2e      	ldr	r3, [pc, #184]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b42:	4b2e      	ldr	r3, [pc, #184]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b48:	4b2c      	ldr	r3, [pc, #176]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b4e:	4a29      	ldr	r2, [pc, #164]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d014      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5e:	f7fe fa6d 	bl	800403c <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b64:	e00a      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b66:	f7fe fa69 	bl	800403c <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e036      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b7c:	4b1d      	ldr	r3, [pc, #116]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0ee      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b88:	4b1a      	ldr	r3, [pc, #104]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4917      	ldr	r1, [pc, #92]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b9a:	7dfb      	ldrb	r3, [r7, #23]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d105      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ba0:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005baa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bb8:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	490b      	ldr	r1, [pc, #44]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0310 	and.w	r3, r3, #16
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d008      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bd6:	4b07      	ldr	r3, [pc, #28]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	4904      	ldr	r1, [pc, #16]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	40007000 	.word	0x40007000
 8005bfc:	42420440 	.word	0x42420440

08005c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e041      	b.n	8005c96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fc faa6 	bl	8002178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4610      	mov	r0, r2
 8005c40:	f000 fc74 	bl	800652c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d001      	beq.n	8005cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e03a      	b.n	8005d2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0201 	orr.w	r2, r2, #1
 8005cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a18      	ldr	r2, [pc, #96]	; (8005d38 <HAL_TIM_Base_Start_IT+0x98>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00e      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x58>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce2:	d009      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x58>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a14      	ldr	r2, [pc, #80]	; (8005d3c <HAL_TIM_Base_Start_IT+0x9c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x58>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a13      	ldr	r2, [pc, #76]	; (8005d40 <HAL_TIM_Base_Start_IT+0xa0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d111      	bne.n	8005d1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b06      	cmp	r3, #6
 8005d08:	d010      	beq.n	8005d2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0201 	orr.w	r2, r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1a:	e007      	b.n	8005d2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr
 8005d38:	40012c00 	.word	0x40012c00
 8005d3c:	40000400 	.word	0x40000400
 8005d40:	40000800 	.word	0x40000800

08005d44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e041      	b.n	8005dda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f839 	bl	8005de2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	4619      	mov	r1, r3
 8005d82:	4610      	mov	r0, r2
 8005d84:	f000 fbd2 	bl	800652c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d109      	bne.n	8005e18 <HAL_TIM_PWM_Start+0x24>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	bf14      	ite	ne
 8005e10:	2301      	movne	r3, #1
 8005e12:	2300      	moveq	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	e022      	b.n	8005e5e <HAL_TIM_PWM_Start+0x6a>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	d109      	bne.n	8005e32 <HAL_TIM_PWM_Start+0x3e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	bf14      	ite	ne
 8005e2a:	2301      	movne	r3, #1
 8005e2c:	2300      	moveq	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	e015      	b.n	8005e5e <HAL_TIM_PWM_Start+0x6a>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d109      	bne.n	8005e4c <HAL_TIM_PWM_Start+0x58>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	bf14      	ite	ne
 8005e44:	2301      	movne	r3, #1
 8005e46:	2300      	moveq	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	e008      	b.n	8005e5e <HAL_TIM_PWM_Start+0x6a>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	bf14      	ite	ne
 8005e58:	2301      	movne	r3, #1
 8005e5a:	2300      	moveq	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e05e      	b.n	8005f24 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <HAL_TIM_PWM_Start+0x82>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e74:	e013      	b.n	8005e9e <HAL_TIM_PWM_Start+0xaa>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d104      	bne.n	8005e86 <HAL_TIM_PWM_Start+0x92>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e84:	e00b      	b.n	8005e9e <HAL_TIM_PWM_Start+0xaa>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d104      	bne.n	8005e96 <HAL_TIM_PWM_Start+0xa2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e94:	e003      	b.n	8005e9e <HAL_TIM_PWM_Start+0xaa>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fe4e 	bl	8006b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a1e      	ldr	r2, [pc, #120]	; (8005f2c <HAL_TIM_PWM_Start+0x138>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d107      	bne.n	8005ec6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ec4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <HAL_TIM_PWM_Start+0x138>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d00e      	beq.n	8005eee <HAL_TIM_PWM_Start+0xfa>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed8:	d009      	beq.n	8005eee <HAL_TIM_PWM_Start+0xfa>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a14      	ldr	r2, [pc, #80]	; (8005f30 <HAL_TIM_PWM_Start+0x13c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d004      	beq.n	8005eee <HAL_TIM_PWM_Start+0xfa>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a12      	ldr	r2, [pc, #72]	; (8005f34 <HAL_TIM_PWM_Start+0x140>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d111      	bne.n	8005f12 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b06      	cmp	r3, #6
 8005efe:	d010      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f10:	e007      	b.n	8005f22 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0201 	orr.w	r2, r2, #1
 8005f20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40012c00 	.word	0x40012c00
 8005f30:	40000400 	.word	0x40000400
 8005f34:	40000800 	.word	0x40000800

08005f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d122      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d11b      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0202 	mvn.w	r2, #2
 8005f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 faba 	bl	80064f4 <HAL_TIM_IC_CaptureCallback>
 8005f80:	e005      	b.n	8005f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 faad 	bl	80064e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fabc 	bl	8006506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d122      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d11b      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0204 	mvn.w	r2, #4
 8005fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fa90 	bl	80064f4 <HAL_TIM_IC_CaptureCallback>
 8005fd4:	e005      	b.n	8005fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fa83 	bl	80064e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fa92 	bl	8006506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d122      	bne.n	800603c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b08      	cmp	r3, #8
 8006002:	d11b      	bne.n	800603c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0208 	mvn.w	r2, #8
 800600c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2204      	movs	r2, #4
 8006012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa66 	bl	80064f4 <HAL_TIM_IC_CaptureCallback>
 8006028:	e005      	b.n	8006036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fa59 	bl	80064e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fa68 	bl	8006506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	2b10      	cmp	r3, #16
 8006048:	d122      	bne.n	8006090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f003 0310 	and.w	r3, r3, #16
 8006054:	2b10      	cmp	r3, #16
 8006056:	d11b      	bne.n	8006090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0210 	mvn.w	r2, #16
 8006060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2208      	movs	r2, #8
 8006066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fa3c 	bl	80064f4 <HAL_TIM_IC_CaptureCallback>
 800607c:	e005      	b.n	800608a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fa2f 	bl	80064e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fa3e 	bl	8006506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b01      	cmp	r3, #1
 800609c:	d10e      	bne.n	80060bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d107      	bne.n	80060bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0201 	mvn.w	r2, #1
 80060b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fa0a 	bl	80064d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c6:	2b80      	cmp	r3, #128	; 0x80
 80060c8:	d10e      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d4:	2b80      	cmp	r3, #128	; 0x80
 80060d6:	d107      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fdbb 	bl	8006c5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f2:	2b40      	cmp	r3, #64	; 0x40
 80060f4:	d10e      	bne.n	8006114 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d107      	bne.n	8006114 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800610c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa02 	bl	8006518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b20      	cmp	r3, #32
 8006120:	d10e      	bne.n	8006140 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b20      	cmp	r3, #32
 800612e:	d107      	bne.n	8006140 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0220 	mvn.w	r2, #32
 8006138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fd86 	bl	8006c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800615a:	2b01      	cmp	r3, #1
 800615c:	d101      	bne.n	8006162 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800615e:	2302      	movs	r3, #2
 8006160:	e0ac      	b.n	80062bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b0c      	cmp	r3, #12
 800616e:	f200 809f 	bhi.w	80062b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006172:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	080061ad 	.word	0x080061ad
 800617c:	080062b1 	.word	0x080062b1
 8006180:	080062b1 	.word	0x080062b1
 8006184:	080062b1 	.word	0x080062b1
 8006188:	080061ed 	.word	0x080061ed
 800618c:	080062b1 	.word	0x080062b1
 8006190:	080062b1 	.word	0x080062b1
 8006194:	080062b1 	.word	0x080062b1
 8006198:	0800622f 	.word	0x0800622f
 800619c:	080062b1 	.word	0x080062b1
 80061a0:	080062b1 	.word	0x080062b1
 80061a4:	080062b1 	.word	0x080062b1
 80061a8:	0800626f 	.word	0x0800626f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68b9      	ldr	r1, [r7, #8]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fa1c 	bl	80065f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699a      	ldr	r2, [r3, #24]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0208 	orr.w	r2, r2, #8
 80061c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0204 	bic.w	r2, r2, #4
 80061d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6999      	ldr	r1, [r3, #24]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	619a      	str	r2, [r3, #24]
      break;
 80061ea:	e062      	b.n	80062b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fa62 	bl	80066bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6999      	ldr	r1, [r3, #24]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	021a      	lsls	r2, r3, #8
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	619a      	str	r2, [r3, #24]
      break;
 800622c:	e041      	b.n	80062b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	4618      	mov	r0, r3
 8006236:	f000 faab 	bl	8006790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69da      	ldr	r2, [r3, #28]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0208 	orr.w	r2, r2, #8
 8006248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69da      	ldr	r2, [r3, #28]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0204 	bic.w	r2, r2, #4
 8006258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69d9      	ldr	r1, [r3, #28]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	61da      	str	r2, [r3, #28]
      break;
 800626c:	e021      	b.n	80062b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68b9      	ldr	r1, [r7, #8]
 8006274:	4618      	mov	r0, r3
 8006276:	f000 faf5 	bl	8006864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69da      	ldr	r2, [r3, #28]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69d9      	ldr	r1, [r3, #28]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	021a      	lsls	r2, r3, #8
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	61da      	str	r2, [r3, #28]
      break;
 80062ae:	e000      	b.n	80062b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80062b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_TIM_ConfigClockSource+0x18>
 80062d8:	2302      	movs	r3, #2
 80062da:	e0b3      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x180>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006302:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006314:	d03e      	beq.n	8006394 <HAL_TIM_ConfigClockSource+0xd0>
 8006316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631a:	f200 8087 	bhi.w	800642c <HAL_TIM_ConfigClockSource+0x168>
 800631e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006322:	f000 8085 	beq.w	8006430 <HAL_TIM_ConfigClockSource+0x16c>
 8006326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800632a:	d87f      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x168>
 800632c:	2b70      	cmp	r3, #112	; 0x70
 800632e:	d01a      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0xa2>
 8006330:	2b70      	cmp	r3, #112	; 0x70
 8006332:	d87b      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x168>
 8006334:	2b60      	cmp	r3, #96	; 0x60
 8006336:	d050      	beq.n	80063da <HAL_TIM_ConfigClockSource+0x116>
 8006338:	2b60      	cmp	r3, #96	; 0x60
 800633a:	d877      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x168>
 800633c:	2b50      	cmp	r3, #80	; 0x50
 800633e:	d03c      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0xf6>
 8006340:	2b50      	cmp	r3, #80	; 0x50
 8006342:	d873      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x168>
 8006344:	2b40      	cmp	r3, #64	; 0x40
 8006346:	d058      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x136>
 8006348:	2b40      	cmp	r3, #64	; 0x40
 800634a:	d86f      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x168>
 800634c:	2b30      	cmp	r3, #48	; 0x30
 800634e:	d064      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x156>
 8006350:	2b30      	cmp	r3, #48	; 0x30
 8006352:	d86b      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x168>
 8006354:	2b20      	cmp	r3, #32
 8006356:	d060      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x156>
 8006358:	2b20      	cmp	r3, #32
 800635a:	d867      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x168>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d05c      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x156>
 8006360:	2b10      	cmp	r3, #16
 8006362:	d05a      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006364:	e062      	b.n	800642c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6899      	ldr	r1, [r3, #8]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f000 fbc8 	bl	8006b0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006388:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	609a      	str	r2, [r3, #8]
      break;
 8006392:	e04e      	b.n	8006432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	6899      	ldr	r1, [r3, #8]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f000 fbb1 	bl	8006b0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063b6:	609a      	str	r2, [r3, #8]
      break;
 80063b8:	e03b      	b.n	8006432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	6859      	ldr	r1, [r3, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f000 fb28 	bl	8006a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2150      	movs	r1, #80	; 0x50
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fb7f 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 80063d8:	e02b      	b.n	8006432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6859      	ldr	r1, [r3, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	461a      	mov	r2, r3
 80063e8:	f000 fb46 	bl	8006a78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2160      	movs	r1, #96	; 0x60
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fb6f 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 80063f8:	e01b      	b.n	8006432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	6859      	ldr	r1, [r3, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	461a      	mov	r2, r3
 8006408:	f000 fb08 	bl	8006a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2140      	movs	r1, #64	; 0x40
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fb5f 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 8006418:	e00b      	b.n	8006432 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f000 fb56 	bl	8006ad6 <TIM_ITRx_SetConfig>
        break;
 800642a:	e002      	b.n	8006432 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800642c:	bf00      	nop
 800642e:	e000      	b.n	8006432 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006430:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006460:	2302      	movs	r3, #2
 8006462:	e031      	b.n	80064c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fa42 	bl	8006900 <TIM_SlaveTimer_SetConfig>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d009      	beq.n	8006496 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e018      	b.n	80064c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr

080064e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b083      	sub	sp, #12
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bc80      	pop	{r7}
 80064f2:	4770      	bx	lr

080064f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr

08006506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr

08006518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	4770      	bx	lr
	...

0800652c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a29      	ldr	r2, [pc, #164]	; (80065e4 <TIM_Base_SetConfig+0xb8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00b      	beq.n	800655c <TIM_Base_SetConfig+0x30>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654a:	d007      	beq.n	800655c <TIM_Base_SetConfig+0x30>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a26      	ldr	r2, [pc, #152]	; (80065e8 <TIM_Base_SetConfig+0xbc>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_Base_SetConfig+0x30>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a25      	ldr	r2, [pc, #148]	; (80065ec <TIM_Base_SetConfig+0xc0>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d108      	bne.n	800656e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a1c      	ldr	r2, [pc, #112]	; (80065e4 <TIM_Base_SetConfig+0xb8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00b      	beq.n	800658e <TIM_Base_SetConfig+0x62>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657c:	d007      	beq.n	800658e <TIM_Base_SetConfig+0x62>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a19      	ldr	r2, [pc, #100]	; (80065e8 <TIM_Base_SetConfig+0xbc>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d003      	beq.n	800658e <TIM_Base_SetConfig+0x62>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a18      	ldr	r2, [pc, #96]	; (80065ec <TIM_Base_SetConfig+0xc0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d108      	bne.n	80065a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a07      	ldr	r2, [pc, #28]	; (80065e4 <TIM_Base_SetConfig+0xb8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d103      	bne.n	80065d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	615a      	str	r2, [r3, #20]
}
 80065da:	bf00      	nop
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr
 80065e4:	40012c00 	.word	0x40012c00
 80065e8:	40000400 	.word	0x40000400
 80065ec:	40000800 	.word	0x40000800

080065f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f023 0201 	bic.w	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 0303 	bic.w	r3, r3, #3
 8006626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f023 0302 	bic.w	r3, r3, #2
 8006638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4313      	orrs	r3, r2
 8006642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a1c      	ldr	r2, [pc, #112]	; (80066b8 <TIM_OC1_SetConfig+0xc8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d10c      	bne.n	8006666 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f023 0308 	bic.w	r3, r3, #8
 8006652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f023 0304 	bic.w	r3, r3, #4
 8006664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a13      	ldr	r2, [pc, #76]	; (80066b8 <TIM_OC1_SetConfig+0xc8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d111      	bne.n	8006692 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800667c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	621a      	str	r2, [r3, #32]
}
 80066ac:	bf00      	nop
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bc80      	pop	{r7}
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40012c00 	.word	0x40012c00

080066bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f023 0210 	bic.w	r2, r3, #16
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f023 0320 	bic.w	r3, r3, #32
 8006706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a1d      	ldr	r2, [pc, #116]	; (800678c <TIM_OC2_SetConfig+0xd0>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d10d      	bne.n	8006738 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006736:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a14      	ldr	r2, [pc, #80]	; (800678c <TIM_OC2_SetConfig+0xd0>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d113      	bne.n	8006768 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006746:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800674e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	621a      	str	r2, [r3, #32]
}
 8006782:	bf00      	nop
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr
 800678c:	40012c00 	.word	0x40012c00

08006790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a1d      	ldr	r2, [pc, #116]	; (8006860 <TIM_OC3_SetConfig+0xd0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d10d      	bne.n	800680a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a14      	ldr	r2, [pc, #80]	; (8006860 <TIM_OC3_SetConfig+0xd0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d113      	bne.n	800683a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	621a      	str	r2, [r3, #32]
}
 8006854:	bf00      	nop
 8006856:	371c      	adds	r7, #28
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40012c00 	.word	0x40012c00

08006864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	031b      	lsls	r3, r3, #12
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a0f      	ldr	r2, [pc, #60]	; (80068fc <TIM_OC4_SetConfig+0x98>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d109      	bne.n	80068d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	019b      	lsls	r3, r3, #6
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	621a      	str	r2, [r3, #32]
}
 80068f2:	bf00      	nop
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr
 80068fc:	40012c00 	.word	0x40012c00

08006900 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006918:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	4313      	orrs	r3, r2
 8006922:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f023 0307 	bic.w	r3, r3, #7
 800692a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b70      	cmp	r3, #112	; 0x70
 8006944:	d01a      	beq.n	800697c <TIM_SlaveTimer_SetConfig+0x7c>
 8006946:	2b70      	cmp	r3, #112	; 0x70
 8006948:	d860      	bhi.n	8006a0c <TIM_SlaveTimer_SetConfig+0x10c>
 800694a:	2b60      	cmp	r3, #96	; 0x60
 800694c:	d054      	beq.n	80069f8 <TIM_SlaveTimer_SetConfig+0xf8>
 800694e:	2b60      	cmp	r3, #96	; 0x60
 8006950:	d85c      	bhi.n	8006a0c <TIM_SlaveTimer_SetConfig+0x10c>
 8006952:	2b50      	cmp	r3, #80	; 0x50
 8006954:	d046      	beq.n	80069e4 <TIM_SlaveTimer_SetConfig+0xe4>
 8006956:	2b50      	cmp	r3, #80	; 0x50
 8006958:	d858      	bhi.n	8006a0c <TIM_SlaveTimer_SetConfig+0x10c>
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	d019      	beq.n	8006992 <TIM_SlaveTimer_SetConfig+0x92>
 800695e:	2b40      	cmp	r3, #64	; 0x40
 8006960:	d854      	bhi.n	8006a0c <TIM_SlaveTimer_SetConfig+0x10c>
 8006962:	2b30      	cmp	r3, #48	; 0x30
 8006964:	d054      	beq.n	8006a10 <TIM_SlaveTimer_SetConfig+0x110>
 8006966:	2b30      	cmp	r3, #48	; 0x30
 8006968:	d850      	bhi.n	8006a0c <TIM_SlaveTimer_SetConfig+0x10c>
 800696a:	2b20      	cmp	r3, #32
 800696c:	d050      	beq.n	8006a10 <TIM_SlaveTimer_SetConfig+0x110>
 800696e:	2b20      	cmp	r3, #32
 8006970:	d84c      	bhi.n	8006a0c <TIM_SlaveTimer_SetConfig+0x10c>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d04c      	beq.n	8006a10 <TIM_SlaveTimer_SetConfig+0x110>
 8006976:	2b10      	cmp	r3, #16
 8006978:	d04a      	beq.n	8006a10 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800697a:	e047      	b.n	8006a0c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6818      	ldr	r0, [r3, #0]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68d9      	ldr	r1, [r3, #12]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f000 f8bd 	bl	8006b0a <TIM_ETR_SetConfig>
      break;
 8006990:	e03f      	b.n	8006a12 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b05      	cmp	r3, #5
 8006998:	d101      	bne.n	800699e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e03a      	b.n	8006a14 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6a1a      	ldr	r2, [r3, #32]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0201 	bic.w	r2, r2, #1
 80069b4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069c4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	621a      	str	r2, [r3, #32]
      break;
 80069e2:	e016      	b.n	8006a12 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6818      	ldr	r0, [r3, #0]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	6899      	ldr	r1, [r3, #8]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	461a      	mov	r2, r3
 80069f2:	f000 f813 	bl	8006a1c <TIM_TI1_ConfigInputStage>
      break;
 80069f6:	e00c      	b.n	8006a12 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	6899      	ldr	r1, [r3, #8]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	461a      	mov	r2, r3
 8006a06:	f000 f837 	bl	8006a78 <TIM_TI2_ConfigInputStage>
      break;
 8006a0a:	e002      	b.n	8006a12 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8006a0c:	bf00      	nop
 8006a0e:	e000      	b.n	8006a12 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8006a10:	bf00      	nop
  }
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	f023 0201 	bic.w	r2, r3, #1
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f023 030a 	bic.w	r3, r3, #10
 8006a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	621a      	str	r2, [r3, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bc80      	pop	{r7}
 8006a76:	4770      	bx	lr

08006a78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f023 0210 	bic.w	r2, r3, #16
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	031b      	lsls	r3, r3, #12
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	621a      	str	r2, [r3, #32]
}
 8006acc:	bf00      	nop
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr

08006ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f043 0307 	orr.w	r3, r3, #7
 8006af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	609a      	str	r2, [r3, #8]
}
 8006b00:	bf00      	nop
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr

08006b0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b087      	sub	sp, #28
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	607a      	str	r2, [r7, #4]
 8006b16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	021a      	lsls	r2, r3, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	609a      	str	r2, [r3, #8]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr

08006b48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f003 031f 	and.w	r3, r3, #31
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a1a      	ldr	r2, [r3, #32]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	43db      	mvns	r3, r3
 8006b6a:	401a      	ands	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a1a      	ldr	r2, [r3, #32]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b80:	431a      	orrs	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	621a      	str	r2, [r3, #32]
}
 8006b86:	bf00      	nop
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bc80      	pop	{r7}
 8006b8e:	4770      	bx	lr

08006b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e046      	b.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a16      	ldr	r2, [pc, #88]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00e      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf4:	d009      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a12      	ldr	r2, [pc, #72]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a10      	ldr	r2, [pc, #64]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d10c      	bne.n	8006c24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	40000400 	.word	0x40000400
 8006c48:	40000800 	.word	0x40000800

08006c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr

08006c5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bc80      	pop	{r7}
 8006c6e:	4770      	bx	lr

08006c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e03f      	b.n	8006d02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d106      	bne.n	8006c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fb fb1c 	bl	80022d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2224      	movs	r2, #36	; 0x24
 8006ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f829 	bl	8006d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	695a      	ldr	r2, [r3, #20]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006d46:	f023 030c 	bic.w	r3, r3, #12
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6812      	ldr	r2, [r2, #0]
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	430b      	orrs	r3, r1
 8006d52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a2c      	ldr	r2, [pc, #176]	; (8006e20 <UART_SetConfig+0x114>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d103      	bne.n	8006d7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d74:	f7fe fe5c 	bl	8005a30 <HAL_RCC_GetPCLK2Freq>
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	e002      	b.n	8006d82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d7c:	f7fe fe44 	bl	8005a08 <HAL_RCC_GetPCLK1Freq>
 8006d80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009a      	lsls	r2, r3, #2
 8006d8c:	441a      	add	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d98:	4a22      	ldr	r2, [pc, #136]	; (8006e24 <UART_SetConfig+0x118>)
 8006d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	0119      	lsls	r1, r3, #4
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4613      	mov	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	009a      	lsls	r2, r3, #2
 8006dac:	441a      	add	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006db8:	4b1a      	ldr	r3, [pc, #104]	; (8006e24 <UART_SetConfig+0x118>)
 8006dba:	fba3 0302 	umull	r0, r3, r3, r2
 8006dbe:	095b      	lsrs	r3, r3, #5
 8006dc0:	2064      	movs	r0, #100	; 0x64
 8006dc2:	fb00 f303 	mul.w	r3, r0, r3
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	3332      	adds	r3, #50	; 0x32
 8006dcc:	4a15      	ldr	r2, [pc, #84]	; (8006e24 <UART_SetConfig+0x118>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd8:	4419      	add	r1, r3
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009a      	lsls	r2, r3, #2
 8006de4:	441a      	add	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	fbb2 f2f3 	udiv	r2, r2, r3
 8006df0:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <UART_SetConfig+0x118>)
 8006df2:	fba3 0302 	umull	r0, r3, r3, r2
 8006df6:	095b      	lsrs	r3, r3, #5
 8006df8:	2064      	movs	r0, #100	; 0x64
 8006dfa:	fb00 f303 	mul.w	r3, r0, r3
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	3332      	adds	r3, #50	; 0x32
 8006e04:	4a07      	ldr	r2, [pc, #28]	; (8006e24 <UART_SetConfig+0x118>)
 8006e06:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0a:	095b      	lsrs	r3, r3, #5
 8006e0c:	f003 020f 	and.w	r2, r3, #15
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	440a      	add	r2, r1
 8006e16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006e18:	bf00      	nop
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40013800 	.word	0x40013800
 8006e24:	51eb851f 	.word	0x51eb851f

08006e28 <__libc_init_array>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	2600      	movs	r6, #0
 8006e2c:	4d0c      	ldr	r5, [pc, #48]	; (8006e60 <__libc_init_array+0x38>)
 8006e2e:	4c0d      	ldr	r4, [pc, #52]	; (8006e64 <__libc_init_array+0x3c>)
 8006e30:	1b64      	subs	r4, r4, r5
 8006e32:	10a4      	asrs	r4, r4, #2
 8006e34:	42a6      	cmp	r6, r4
 8006e36:	d109      	bne.n	8006e4c <__libc_init_array+0x24>
 8006e38:	f000 f822 	bl	8006e80 <_init>
 8006e3c:	2600      	movs	r6, #0
 8006e3e:	4d0a      	ldr	r5, [pc, #40]	; (8006e68 <__libc_init_array+0x40>)
 8006e40:	4c0a      	ldr	r4, [pc, #40]	; (8006e6c <__libc_init_array+0x44>)
 8006e42:	1b64      	subs	r4, r4, r5
 8006e44:	10a4      	asrs	r4, r4, #2
 8006e46:	42a6      	cmp	r6, r4
 8006e48:	d105      	bne.n	8006e56 <__libc_init_array+0x2e>
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e50:	4798      	blx	r3
 8006e52:	3601      	adds	r6, #1
 8006e54:	e7ee      	b.n	8006e34 <__libc_init_array+0xc>
 8006e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5a:	4798      	blx	r3
 8006e5c:	3601      	adds	r6, #1
 8006e5e:	e7f2      	b.n	8006e46 <__libc_init_array+0x1e>
 8006e60:	08006ec0 	.word	0x08006ec0
 8006e64:	08006ec0 	.word	0x08006ec0
 8006e68:	08006ec0 	.word	0x08006ec0
 8006e6c:	08006ec4 	.word	0x08006ec4

08006e70 <memset>:
 8006e70:	4603      	mov	r3, r0
 8006e72:	4402      	add	r2, r0
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d100      	bne.n	8006e7a <memset+0xa>
 8006e78:	4770      	bx	lr
 8006e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e7e:	e7f9      	b.n	8006e74 <memset+0x4>

08006e80 <_init>:
 8006e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e82:	bf00      	nop
 8006e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e86:	bc08      	pop	{r3}
 8006e88:	469e      	mov	lr, r3
 8006e8a:	4770      	bx	lr

08006e8c <_fini>:
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	bf00      	nop
 8006e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e92:	bc08      	pop	{r3}
 8006e94:	469e      	mov	lr, r3
 8006e96:	4770      	bx	lr
